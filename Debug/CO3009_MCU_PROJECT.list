
CO3009_MCU_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080049c8  080049c8  000149c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a88  08004a88  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08004a88  08004a88  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a88  08004a88  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a88  08004a88  00014a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a8c  08004a8c  00014a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004a90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  2000007c  08004b0c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08004b0c  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011768  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000275a  00000000  00000000  0003180d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00033f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  00034c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ce0  00000000  00000000  00035868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f245  00000000  00000000  0004e548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ba2c  00000000  00000000  0005d78d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e91b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003850  00000000  00000000  000e920c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	080049b0 	.word	0x080049b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	080049b0 	.word	0x080049b0

0800014c <readKeyInput>:
static uint8_t flagForLongPress3s[NUM_OF_BUTTONS];
static uint16_t counterLongPress3s[NUM_OF_BUTTONS];

int button_flag[NUM_OF_BUTTONS];
int button_longPressed_flag[NUM_OF_BUTTONS];
void readKeyInput() {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (int i=0; i < NUM_OF_BUTTONS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e0d0      	b.n	80002fa <readKeyInput+0x1ae>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000158:	4a6c      	ldr	r2, [pc, #432]	; (800030c <readKeyInput+0x1c0>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	7819      	ldrb	r1, [r3, #0]
 8000160:	4a6b      	ldr	r2, [pc, #428]	; (8000310 <readKeyInput+0x1c4>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4413      	add	r3, r2
 8000166:	460a      	mov	r2, r1
 8000168:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 800016a:	4a6a      	ldr	r2, [pc, #424]	; (8000314 <readKeyInput+0x1c8>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	4413      	add	r3, r2
 8000170:	7819      	ldrb	r1, [r3, #0]
 8000172:	4a66      	ldr	r2, [pc, #408]	; (800030c <readKeyInput+0x1c0>)
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4413      	add	r3, r2
 8000178:	460a      	mov	r2, r1
 800017a:	701a      	strb	r2, [r3, #0]

		if(i == BTN_SELECT_INDEX) debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(A1_BTN_SELECT_GPIO_Port, A1_BTN_SELECT_Pin);
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d10b      	bne.n	800019a <readKeyInput+0x4e>
 8000182:	2102      	movs	r1, #2
 8000184:	4864      	ldr	r0, [pc, #400]	; (8000318 <readKeyInput+0x1cc>)
 8000186:	f002 fa37 	bl	80025f8 <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
 800018c:	4619      	mov	r1, r3
 800018e:	4a61      	ldr	r2, [pc, #388]	; (8000314 <readKeyInput+0x1c8>)
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	4413      	add	r3, r2
 8000194:	460a      	mov	r2, r1
 8000196:	701a      	strb	r2, [r3, #0]
 8000198:	e02b      	b.n	80001f2 <readKeyInput+0xa6>
		else if(i == BTN_MODIFY_INDEX) debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(A2_BTN_MODIFY_GPIO_Port, A2_BTN_MODIFY_Pin);
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d10b      	bne.n	80001b8 <readKeyInput+0x6c>
 80001a0:	2110      	movs	r1, #16
 80001a2:	485d      	ldr	r0, [pc, #372]	; (8000318 <readKeyInput+0x1cc>)
 80001a4:	f002 fa28 	bl	80025f8 <HAL_GPIO_ReadPin>
 80001a8:	4603      	mov	r3, r0
 80001aa:	4619      	mov	r1, r3
 80001ac:	4a59      	ldr	r2, [pc, #356]	; (8000314 <readKeyInput+0x1c8>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	4413      	add	r3, r2
 80001b2:	460a      	mov	r2, r1
 80001b4:	701a      	strb	r2, [r3, #0]
 80001b6:	e01c      	b.n	80001f2 <readKeyInput+0xa6>
		else if(i == BTN_SET_INDEX) debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(A3_BTN_SET_GPIO_Port, A3_BTN_SET_Pin);
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	2b02      	cmp	r3, #2
 80001bc:	d10b      	bne.n	80001d6 <readKeyInput+0x8a>
 80001be:	2101      	movs	r1, #1
 80001c0:	4856      	ldr	r0, [pc, #344]	; (800031c <readKeyInput+0x1d0>)
 80001c2:	f002 fa19 	bl	80025f8 <HAL_GPIO_ReadPin>
 80001c6:	4603      	mov	r3, r0
 80001c8:	4619      	mov	r1, r3
 80001ca:	4a52      	ldr	r2, [pc, #328]	; (8000314 <readKeyInput+0x1c8>)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	4413      	add	r3, r2
 80001d0:	460a      	mov	r2, r1
 80001d2:	701a      	strb	r2, [r3, #0]
 80001d4:	e00d      	b.n	80001f2 <readKeyInput+0xa6>
		else if(i == BTN_PED_INDEX )debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(A0_BTN_PED_GPIO_Port, A0_BTN_PED_Pin);
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	2b03      	cmp	r3, #3
 80001da:	d10a      	bne.n	80001f2 <readKeyInput+0xa6>
 80001dc:	2101      	movs	r1, #1
 80001de:	484e      	ldr	r0, [pc, #312]	; (8000318 <readKeyInput+0x1cc>)
 80001e0:	f002 fa0a 	bl	80025f8 <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4619      	mov	r1, r3
 80001e8:	4a4a      	ldr	r2, [pc, #296]	; (8000314 <readKeyInput+0x1c8>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4413      	add	r3, r2
 80001ee:	460a      	mov	r2, r1
 80001f0:	701a      	strb	r2, [r3, #0]


		if ((debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) && (debounceButtonBuffer1[i] == debounceButtonBuffer3[i])) {
 80001f2:	4a48      	ldr	r2, [pc, #288]	; (8000314 <readKeyInput+0x1c8>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4413      	add	r3, r2
 80001f8:	781a      	ldrb	r2, [r3, #0]
 80001fa:	4944      	ldr	r1, [pc, #272]	; (800030c <readKeyInput+0x1c0>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	440b      	add	r3, r1
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	429a      	cmp	r2, r3
 8000204:	d123      	bne.n	800024e <readKeyInput+0x102>
 8000206:	4a43      	ldr	r2, [pc, #268]	; (8000314 <readKeyInput+0x1c8>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	4413      	add	r3, r2
 800020c:	781a      	ldrb	r2, [r3, #0]
 800020e:	4940      	ldr	r1, [pc, #256]	; (8000310 <readKeyInput+0x1c4>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	440b      	add	r3, r1
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	429a      	cmp	r2, r3
 8000218:	d119      	bne.n	800024e <readKeyInput+0x102>
			if (buttonBuffer[i] == BTN_RELEASED && debounceButtonBuffer1[i] == BTN_PRESSED) {
 800021a:	4a41      	ldr	r2, [pc, #260]	; (8000320 <readKeyInput+0x1d4>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4413      	add	r3, r2
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	2b01      	cmp	r3, #1
 8000224:	d10a      	bne.n	800023c <readKeyInput+0xf0>
 8000226:	4a3b      	ldr	r2, [pc, #236]	; (8000314 <readKeyInput+0x1c8>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	4413      	add	r3, r2
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d104      	bne.n	800023c <readKeyInput+0xf0>
				button_flag[i] = 1;
 8000232:	4a3c      	ldr	r2, [pc, #240]	; (8000324 <readKeyInput+0x1d8>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2101      	movs	r1, #1
 8000238:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			buttonBuffer[i] = debounceButtonBuffer1[i];
 800023c:	4a35      	ldr	r2, [pc, #212]	; (8000314 <readKeyInput+0x1c8>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4413      	add	r3, r2
 8000242:	7819      	ldrb	r1, [r3, #0]
 8000244:	4a36      	ldr	r2, [pc, #216]	; (8000320 <readKeyInput+0x1d4>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	4413      	add	r3, r2
 800024a:	460a      	mov	r2, r1
 800024c:	701a      	strb	r2, [r3, #0]
		}

		// LONGPRESSED 3S
		if (buttonBuffer[i] == BTN_PRESSED) {
 800024e:	4a34      	ldr	r2, [pc, #208]	; (8000320 <readKeyInput+0x1d4>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	4413      	add	r3, r2
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d117      	bne.n	800028a <readKeyInput+0x13e>
			if (counterLongPress3s[i] < PRESSED_DURATION_3S/TIMER_CYCLE) {
 800025a:	4a33      	ldr	r2, [pc, #204]	; (8000328 <readKeyInput+0x1dc>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000262:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000266:	d20a      	bcs.n	800027e <readKeyInput+0x132>
				counterLongPress3s[i]++;
 8000268:	4a2f      	ldr	r2, [pc, #188]	; (8000328 <readKeyInput+0x1dc>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000270:	3301      	adds	r3, #1
 8000272:	b299      	uxth	r1, r3
 8000274:	4a2c      	ldr	r2, [pc, #176]	; (8000328 <readKeyInput+0x1dc>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800027c:	e03a      	b.n	80002f4 <readKeyInput+0x1a8>
			} else {
				flagForLongPress3s[i] = 1;
 800027e:	4a2b      	ldr	r2, [pc, #172]	; (800032c <readKeyInput+0x1e0>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	4413      	add	r3, r2
 8000284:	2201      	movs	r2, #1
 8000286:	701a      	strb	r2, [r3, #0]
 8000288:	e034      	b.n	80002f4 <readKeyInput+0x1a8>
			}
		}
		else if (buttonBuffer[i] == BTN_RELEASED && flagForLongPress3s[i] == 1 ){
 800028a:	4a25      	ldr	r2, [pc, #148]	; (8000320 <readKeyInput+0x1d4>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	4413      	add	r3, r2
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	2b01      	cmp	r3, #1
 8000294:	d11a      	bne.n	80002cc <readKeyInput+0x180>
 8000296:	4a25      	ldr	r2, [pc, #148]	; (800032c <readKeyInput+0x1e0>)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4413      	add	r3, r2
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d114      	bne.n	80002cc <readKeyInput+0x180>
			button_longPressed_flag[i] = 1;
 80002a2:	4a23      	ldr	r2, [pc, #140]	; (8000330 <readKeyInput+0x1e4>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2101      	movs	r1, #1
 80002a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			button_flag[i] = 0;
 80002ac:	4a1d      	ldr	r2, [pc, #116]	; (8000324 <readKeyInput+0x1d8>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	2100      	movs	r1, #0
 80002b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterLongPress3s[i] = 0;
 80002b6:	4a1c      	ldr	r2, [pc, #112]	; (8000328 <readKeyInput+0x1dc>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2100      	movs	r1, #0
 80002bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForLongPress3s[i] = 0;
 80002c0:	4a1a      	ldr	r2, [pc, #104]	; (800032c <readKeyInput+0x1e0>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4413      	add	r3, r2
 80002c6:	2200      	movs	r2, #0
 80002c8:	701a      	strb	r2, [r3, #0]
 80002ca:	e013      	b.n	80002f4 <readKeyInput+0x1a8>
		}
		else {
			button_longPressed_flag[i] = 0;
 80002cc:	4a18      	ldr	r2, [pc, #96]	; (8000330 <readKeyInput+0x1e4>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2100      	movs	r1, #0
 80002d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			button_flag[i] = 0;
 80002d6:	4a13      	ldr	r2, [pc, #76]	; (8000324 <readKeyInput+0x1d8>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2100      	movs	r1, #0
 80002dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterLongPress3s[i] = 0;
 80002e0:	4a11      	ldr	r2, [pc, #68]	; (8000328 <readKeyInput+0x1dc>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2100      	movs	r1, #0
 80002e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForLongPress3s[i] = 0;
 80002ea:	4a10      	ldr	r2, [pc, #64]	; (800032c <readKeyInput+0x1e0>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4413      	add	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < NUM_OF_BUTTONS; i++){
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	3301      	adds	r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2b03      	cmp	r3, #3
 80002fe:	f77f af2b 	ble.w	8000158 <readKeyInput+0xc>
		}
	}
}
 8000302:	bf00      	nop
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	200000a0 	.word	0x200000a0
 8000310:	200000a4 	.word	0x200000a4
 8000314:	2000009c 	.word	0x2000009c
 8000318:	40010800 	.word	0x40010800
 800031c:	40010c00 	.word	0x40010c00
 8000320:	20000098 	.word	0x20000098
 8000324:	200000dc 	.word	0x200000dc
 8000328:	200000ac 	.word	0x200000ac
 800032c:	200000a8 	.word	0x200000a8
 8000330:	200000cc 	.word	0x200000cc

08000334 <isPressedAndReleased>:
int isPressedAndReleased(int buttonIndex) {
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	if (button_flag[buttonIndex] == 1) {
 800033c:	4a09      	ldr	r2, [pc, #36]	; (8000364 <isPressedAndReleased+0x30>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d106      	bne.n	8000356 <isPressedAndReleased+0x22>
		button_flag[buttonIndex] = 0;
 8000348:	4a06      	ldr	r2, [pc, #24]	; (8000364 <isPressedAndReleased+0x30>)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	2100      	movs	r1, #0
 800034e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000352:	2301      	movs	r3, #1
 8000354:	e000      	b.n	8000358 <isPressedAndReleased+0x24>
	}
	return 0;
 8000356:	2300      	movs	r3, #0
}
 8000358:	4618      	mov	r0, r3
 800035a:	370c      	adds	r7, #12
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	200000dc 	.word	0x200000dc

08000368 <isLongPressedAndReleased>:

int isLongPressedAndReleased(int buttonIndex){
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	if (button_longPressed_flag[buttonIndex] == 1) {
 8000370:	4a09      	ldr	r2, [pc, #36]	; (8000398 <isLongPressedAndReleased+0x30>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000378:	2b01      	cmp	r3, #1
 800037a:	d106      	bne.n	800038a <isLongPressedAndReleased+0x22>
		button_longPressed_flag[buttonIndex] = 0;
 800037c:	4a06      	ldr	r2, [pc, #24]	; (8000398 <isLongPressedAndReleased+0x30>)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	2100      	movs	r1, #0
 8000382:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000386:	2301      	movs	r3, #1
 8000388:	e000      	b.n	800038c <isLongPressedAndReleased+0x24>
	}
	return 0;
 800038a:	2300      	movs	r3, #0
}
 800038c:	4618      	mov	r0, r3
 800038e:	370c      	adds	r7, #12
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	200000cc 	.word	0x200000cc

0800039c <is_button_pressed>:

unsigned char is_button_pressed (uint8_t index) {
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	71fb      	strb	r3, [r7, #7]
	if(index >= NUM_OF_BUTTONS) return 0;
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	2b03      	cmp	r3, #3
 80003aa:	d901      	bls.n	80003b0 <is_button_pressed+0x14>
 80003ac:	2300      	movs	r3, #0
 80003ae:	e007      	b.n	80003c0 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BTN_PRESSED);
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	4a06      	ldr	r2, [pc, #24]	; (80003cc <is_button_pressed+0x30>)
 80003b4:	5cd3      	ldrb	r3, [r2, r3]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	bf0c      	ite	eq
 80003ba:	2301      	moveq	r3, #1
 80003bc:	2300      	movne	r3, #0
 80003be:	b2db      	uxtb	r3, r3
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	20000098 	.word	0x20000098

080003d0 <is_button_pressed_3s>:
unsigned char is_button_pressed_3s(unsigned char index) {
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	71fb      	strb	r3, [r7, #7]
	if(index >= NUM_OF_BUTTONS) return 0xff ;
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	2b03      	cmp	r3, #3
 80003de:	d901      	bls.n	80003e4 <is_button_pressed_3s+0x14>
 80003e0:	23ff      	movs	r3, #255	; 0xff
 80003e2:	e007      	b.n	80003f4 <is_button_pressed_3s+0x24>
	return (flagForLongPress3s[index] == 1) ;
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	4a06      	ldr	r2, [pc, #24]	; (8000400 <is_button_pressed_3s+0x30>)
 80003e8:	5cd3      	ldrb	r3, [r2, r3]
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	bf0c      	ite	eq
 80003ee:	2301      	moveq	r3, #1
 80003f0:	2300      	movne	r3, #0
 80003f2:	b2db      	uxtb	r3, r3
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	370c      	adds	r7, #12
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	200000a8 	.word	0x200000a8

08000404 <trafficLight_automatic>:
#include "main.h"
#include <stdio.h>

char message[MAX_MESSAGE_LENGTH];

void trafficLight_automatic() {
 8000404:	b580      	push	{r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af00      	add	r7, sp, #0
	switch (state) {
 800040a:	4b7b      	ldr	r3, [pc, #492]	; (80005f8 <trafficLight_automatic+0x1f4>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b04      	cmp	r3, #4
 8000410:	f200 833a 	bhi.w	8000a88 <trafficLight_automatic+0x684>
 8000414:	a201      	add	r2, pc, #4	; (adr r2, 800041c <trafficLight_automatic+0x18>)
 8000416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800041a:	bf00      	nop
 800041c:	08000431 	.word	0x08000431
 8000420:	0800048b 	.word	0x0800048b
 8000424:	08000645 	.word	0x08000645
 8000428:	08000783 	.word	0x08000783
 800042c:	08000939 	.word	0x08000939
	case IDLE:
		state = AUTO_RED1_GREEN2;
 8000430:	4b71      	ldr	r3, [pc, #452]	; (80005f8 <trafficLight_automatic+0x1f4>)
 8000432:	2201      	movs	r2, #1
 8000434:	701a      	strb	r2, [r3, #0]
		clearTrafficDisplay();
 8000436:	f001 f82f 	bl	8001498 <clearTrafficDisplay>
		segment1Counter = counter_red / DIVISION_NUMBER;
 800043a:	4b70      	ldr	r3, [pc, #448]	; (80005fc <trafficLight_automatic+0x1f8>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a70      	ldr	r2, [pc, #448]	; (8000600 <trafficLight_automatic+0x1fc>)
 8000440:	fb82 1203 	smull	r1, r2, r2, r3
 8000444:	1192      	asrs	r2, r2, #6
 8000446:	17db      	asrs	r3, r3, #31
 8000448:	1ad3      	subs	r3, r2, r3
 800044a:	4a6e      	ldr	r2, [pc, #440]	; (8000604 <trafficLight_automatic+0x200>)
 800044c:	6013      	str	r3, [r2, #0]
		segment2Counter = counter_green / DIVISION_NUMBER;
 800044e:	4b6e      	ldr	r3, [pc, #440]	; (8000608 <trafficLight_automatic+0x204>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a6b      	ldr	r2, [pc, #428]	; (8000600 <trafficLight_automatic+0x1fc>)
 8000454:	fb82 1203 	smull	r1, r2, r2, r3
 8000458:	1192      	asrs	r2, r2, #6
 800045a:	17db      	asrs	r3, r3, #31
 800045c:	1ad3      	subs	r3, r2, r3
 800045e:	4a6b      	ldr	r2, [pc, #428]	; (800060c <trafficLight_automatic+0x208>)
 8000460:	6013      	str	r3, [r2, #0]
		setTimerCounter1(DURATION_1S);
 8000462:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000466:	f001 fb41 	bl	8001aec <setTimerCounter1>
		counter_pedestrian = 0;
 800046a:	4b69      	ldr	r3, [pc, #420]	; (8000610 <trafficLight_automatic+0x20c>)
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!AUTOMATIC#\r"), 1000);
 8000470:	4968      	ldr	r1, [pc, #416]	; (8000614 <trafficLight_automatic+0x210>)
 8000472:	4869      	ldr	r0, [pc, #420]	; (8000618 <trafficLight_automatic+0x214>)
 8000474:	f003 fe62 	bl	800413c <siprintf>
 8000478:	4603      	mov	r3, r0
 800047a:	b29a      	uxth	r2, r3
 800047c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000480:	4965      	ldr	r1, [pc, #404]	; (8000618 <trafficLight_automatic+0x214>)
 8000482:	4866      	ldr	r0, [pc, #408]	; (800061c <trafficLight_automatic+0x218>)
 8000484:	f003 fcbd 	bl	8003e02 <HAL_UART_Transmit>
		break;
 8000488:	e307      	b.n	8000a9a <trafficLight_automatic+0x696>
	case AUTO_RED1_GREEN2:
		displayTrafficLight(RED_LIGHT, GREEN_LIGHT);
 800048a:	2103      	movs	r1, #3
 800048c:	2001      	movs	r0, #1
 800048e:	f000 ff97 	bl	80013c0 <displayTrafficLight>
		if (isPedestrian == 1)
 8000492:	4b63      	ldr	r3, [pc, #396]	; (8000620 <trafficLight_automatic+0x21c>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	2b01      	cmp	r3, #1
 8000498:	d102      	bne.n	80004a0 <trafficLight_automatic+0x9c>
			displayPedestrianLight(PEDESTRIAN_LIGHT_GO);
 800049a:	2004      	movs	r0, #4
 800049c:	f001 f81a 	bl	80014d4 <displayPedestrianLight>
		if (isPedestrian == 0)
 80004a0:	4b5f      	ldr	r3, [pc, #380]	; (8000620 <trafficLight_automatic+0x21c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d102      	bne.n	80004ae <trafficLight_automatic+0xaa>
			displayPedestrianLight(PEDESTRIAN_LIGHT_OFF);
 80004a8:	2006      	movs	r0, #6
 80004aa:	f001 f813 	bl	80014d4 <displayPedestrianLight>
		if (isInManual == 1) {
 80004ae:	4b5d      	ldr	r3, [pc, #372]	; (8000624 <trafficLight_automatic+0x220>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	2b01      	cmp	r3, #1
 80004b4:	d10e      	bne.n	80004d4 <trafficLight_automatic+0xd0>
			state = MANUAL_RED1_GREEN2;
 80004b6:	4b50      	ldr	r3, [pc, #320]	; (80005f8 <trafficLight_automatic+0x1f4>)
 80004b8:	220d      	movs	r2, #13
 80004ba:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!MANUAL#\r"), 1000);
 80004bc:	495a      	ldr	r1, [pc, #360]	; (8000628 <trafficLight_automatic+0x224>)
 80004be:	4856      	ldr	r0, [pc, #344]	; (8000618 <trafficLight_automatic+0x214>)
 80004c0:	f003 fe3c 	bl	800413c <siprintf>
 80004c4:	4603      	mov	r3, r0
 80004c6:	b29a      	uxth	r2, r3
 80004c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004cc:	4952      	ldr	r1, [pc, #328]	; (8000618 <trafficLight_automatic+0x214>)
 80004ce:	4853      	ldr	r0, [pc, #332]	; (800061c <trafficLight_automatic+0x218>)
 80004d0:	f003 fc97 	bl	8003e02 <HAL_UART_Transmit>
		}
		if (isPressedAndReleased(BTN_SELECT_INDEX)) {
 80004d4:	2000      	movs	r0, #0
 80004d6:	f7ff ff2d 	bl	8000334 <isPressedAndReleased>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d014      	beq.n	800050a <trafficLight_automatic+0x106>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!MANUAL#\r"), 1000);
 80004e0:	4951      	ldr	r1, [pc, #324]	; (8000628 <trafficLight_automatic+0x224>)
 80004e2:	484d      	ldr	r0, [pc, #308]	; (8000618 <trafficLight_automatic+0x214>)
 80004e4:	f003 fe2a 	bl	800413c <siprintf>
 80004e8:	4603      	mov	r3, r0
 80004ea:	b29a      	uxth	r2, r3
 80004ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f0:	4949      	ldr	r1, [pc, #292]	; (8000618 <trafficLight_automatic+0x214>)
 80004f2:	484a      	ldr	r0, [pc, #296]	; (800061c <trafficLight_automatic+0x218>)
 80004f4:	f003 fc85 	bl	8003e02 <HAL_UART_Transmit>
			state = MANUAL_RED1_GREEN2;
 80004f8:	4b3f      	ldr	r3, [pc, #252]	; (80005f8 <trafficLight_automatic+0x1f4>)
 80004fa:	220d      	movs	r2, #13
 80004fc:	701a      	strb	r2, [r3, #0]
			isInManual = 1;
 80004fe:	4b49      	ldr	r3, [pc, #292]	; (8000624 <trafficLight_automatic+0x220>)
 8000500:	2201      	movs	r2, #1
 8000502:	601a      	str	r2, [r3, #0]
			isInAuto = 0;
 8000504:	4b49      	ldr	r3, [pc, #292]	; (800062c <trafficLight_automatic+0x228>)
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
		}
		if (is_button_pressed_3s(BTN_SELECT_INDEX)){
 800050a:	2000      	movs	r0, #0
 800050c:	f7ff ff60 	bl	80003d0 <is_button_pressed_3s>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d00a      	beq.n	800052c <trafficLight_automatic+0x128>
			clearTrafficDisplay();
 8000516:	f000 ffbf 	bl	8001498 <clearTrafficDisplay>
			state = CHANGE_MODE;
 800051a:	4b37      	ldr	r3, [pc, #220]	; (80005f8 <trafficLight_automatic+0x1f4>)
 800051c:	2205      	movs	r2, #5
 800051e:	701a      	strb	r2, [r3, #0]
			isInChange = 1;
 8000520:	4b43      	ldr	r3, [pc, #268]	; (8000630 <trafficLight_automatic+0x22c>)
 8000522:	2201      	movs	r2, #1
 8000524:	601a      	str	r2, [r3, #0]
			setTimerTriggerLed(DURATION_FOR_4HZ);
 8000526:	20fa      	movs	r0, #250	; 0xfa
 8000528:	f001 fac4 	bl	8001ab4 <setTimerTriggerLed>
		}
		if (isPressedAndReleased(BTN_PED_INDEX)) {
 800052c:	2003      	movs	r0, #3
 800052e:	f7ff ff01 	bl	8000334 <isPressedAndReleased>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d002      	beq.n	800053e <trafficLight_automatic+0x13a>
			isPedestrian = 1;
 8000538:	4b39      	ldr	r3, [pc, #228]	; (8000620 <trafficLight_automatic+0x21c>)
 800053a:	2201      	movs	r2, #1
 800053c:	601a      	str	r2, [r3, #0]
		}


		if (countDownTimer1_counter == 1) {
 800053e:	4b3d      	ldr	r3, [pc, #244]	; (8000634 <trafficLight_automatic+0x230>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b01      	cmp	r3, #1
 8000544:	f040 82a2 	bne.w	8000a8c <trafficLight_automatic+0x688>
			int buffer1 = segment1Counter/10;
 8000548:	4b2e      	ldr	r3, [pc, #184]	; (8000604 <trafficLight_automatic+0x200>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a3a      	ldr	r2, [pc, #232]	; (8000638 <trafficLight_automatic+0x234>)
 800054e:	fb82 1203 	smull	r1, r2, r2, r3
 8000552:	1092      	asrs	r2, r2, #2
 8000554:	17db      	asrs	r3, r3, #31
 8000556:	1ad3      	subs	r3, r2, r3
 8000558:	607b      	str	r3, [r7, #4]
			int buffer2 = segment1Counter%10;
 800055a:	4b2a      	ldr	r3, [pc, #168]	; (8000604 <trafficLight_automatic+0x200>)
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	4b36      	ldr	r3, [pc, #216]	; (8000638 <trafficLight_automatic+0x234>)
 8000560:	fb83 1302 	smull	r1, r3, r3, r2
 8000564:	1099      	asrs	r1, r3, #2
 8000566:	17d3      	asrs	r3, r2, #31
 8000568:	1ac9      	subs	r1, r1, r3
 800056a:	460b      	mov	r3, r1
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	440b      	add	r3, r1
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	1ad3      	subs	r3, r2, r3
 8000574:	603b      	str	r3, [r7, #0]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#\r", buffer1, buffer2), 1000);
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	4930      	ldr	r1, [pc, #192]	; (800063c <trafficLight_automatic+0x238>)
 800057c:	4826      	ldr	r0, [pc, #152]	; (8000618 <trafficLight_automatic+0x214>)
 800057e:	f003 fddd 	bl	800413c <siprintf>
 8000582:	4603      	mov	r3, r0
 8000584:	b29a      	uxth	r2, r3
 8000586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058a:	4923      	ldr	r1, [pc, #140]	; (8000618 <trafficLight_automatic+0x214>)
 800058c:	4823      	ldr	r0, [pc, #140]	; (800061c <trafficLight_automatic+0x218>)
 800058e:	f003 fc38 	bl	8003e02 <HAL_UART_Transmit>
			segment1Counter--;
 8000592:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <trafficLight_automatic+0x200>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	3b01      	subs	r3, #1
 8000598:	4a1a      	ldr	r2, [pc, #104]	; (8000604 <trafficLight_automatic+0x200>)
 800059a:	6013      	str	r3, [r2, #0]
			segment2Counter--;
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <trafficLight_automatic+0x208>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	3b01      	subs	r3, #1
 80005a2:	4a1a      	ldr	r2, [pc, #104]	; (800060c <trafficLight_automatic+0x208>)
 80005a4:	6013      	str	r3, [r2, #0]
			if (segment2Counter == 0) {
 80005a6:	4b19      	ldr	r3, [pc, #100]	; (800060c <trafficLight_automatic+0x208>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d11f      	bne.n	80005ee <trafficLight_automatic+0x1ea>
				segment2Counter = counter_yellow / DIVISION_NUMBER;
 80005ae:	4b24      	ldr	r3, [pc, #144]	; (8000640 <trafficLight_automatic+0x23c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a13      	ldr	r2, [pc, #76]	; (8000600 <trafficLight_automatic+0x1fc>)
 80005b4:	fb82 1203 	smull	r1, r2, r2, r3
 80005b8:	1192      	asrs	r2, r2, #6
 80005ba:	17db      	asrs	r3, r3, #31
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	4a13      	ldr	r2, [pc, #76]	; (800060c <trafficLight_automatic+0x208>)
 80005c0:	6013      	str	r3, [r2, #0]
				state = AUTO_RED1_YELLOW2;
 80005c2:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <trafficLight_automatic+0x1f4>)
 80005c4:	2202      	movs	r2, #2
 80005c6:	701a      	strb	r2, [r3, #0]
				//buzzer_warning = 0;

				if (isPedestrian == 1) {
 80005c8:	4b15      	ldr	r3, [pc, #84]	; (8000620 <trafficLight_automatic+0x21c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d10e      	bne.n	80005ee <trafficLight_automatic+0x1ea>
					counter_pedestrian++;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <trafficLight_automatic+0x20c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <trafficLight_automatic+0x20c>)
 80005d8:	6013      	str	r3, [r2, #0]
					if (counter_pedestrian == PEDESTRIAN_LIGHT_CYCLE) {
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <trafficLight_automatic+0x20c>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b08      	cmp	r3, #8
 80005e0:	d105      	bne.n	80005ee <trafficLight_automatic+0x1ea>
						counter_pedestrian = 0;
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <trafficLight_automatic+0x20c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
						isPedestrian = 0;
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <trafficLight_automatic+0x21c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
					}
				}
			}

			setTimerCounter1(DURATION_1S);
 80005ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f2:	f001 fa7b 	bl	8001aec <setTimerCounter1>
		}
		break;
 80005f6:	e249      	b.n	8000a8c <trafficLight_automatic+0x688>
 80005f8:	20000140 	.word	0x20000140
 80005fc:	20000000 	.word	0x20000000
 8000600:	10624dd3 	.word	0x10624dd3
 8000604:	20000130 	.word	0x20000130
 8000608:	20000008 	.word	0x20000008
 800060c:	20000138 	.word	0x20000138
 8000610:	20000160 	.word	0x20000160
 8000614:	080049c8 	.word	0x080049c8
 8000618:	200000ec 	.word	0x200000ec
 800061c:	200001f4 	.word	0x200001f4
 8000620:	20000134 	.word	0x20000134
 8000624:	20000120 	.word	0x20000120
 8000628:	080049d8 	.word	0x080049d8
 800062c:	20000144 	.word	0x20000144
 8000630:	20000148 	.word	0x20000148
 8000634:	20000240 	.word	0x20000240
 8000638:	66666667 	.word	0x66666667
 800063c:	080049e4 	.word	0x080049e4
 8000640:	20000004 	.word	0x20000004
	case AUTO_RED1_YELLOW2:
		displayTrafficLight(RED_LIGHT, YELLOW_LIGHT);
 8000644:	2102      	movs	r1, #2
 8000646:	2001      	movs	r0, #1
 8000648:	f000 feba 	bl	80013c0 <displayTrafficLight>
		if (isPedestrian == 1)
 800064c:	4ba8      	ldr	r3, [pc, #672]	; (80008f0 <trafficLight_automatic+0x4ec>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d102      	bne.n	800065a <trafficLight_automatic+0x256>
			displayPedestrianLight(PEDESTRIAN_LIGHT_GO);
 8000654:	2004      	movs	r0, #4
 8000656:	f000 ff3d 	bl	80014d4 <displayPedestrianLight>
		if (isPedestrian == 0)
 800065a:	4ba5      	ldr	r3, [pc, #660]	; (80008f0 <trafficLight_automatic+0x4ec>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d102      	bne.n	8000668 <trafficLight_automatic+0x264>
			displayPedestrianLight(PEDESTRIAN_LIGHT_OFF);
 8000662:	2006      	movs	r0, #6
 8000664:	f000 ff36 	bl	80014d4 <displayPedestrianLight>
		if (isPressedAndReleased(BTN_SELECT_INDEX)) {
 8000668:	2000      	movs	r0, #0
 800066a:	f7ff fe63 	bl	8000334 <isPressedAndReleased>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d005      	beq.n	8000680 <trafficLight_automatic+0x27c>
			isInManual = 1;
 8000674:	4b9f      	ldr	r3, [pc, #636]	; (80008f4 <trafficLight_automatic+0x4f0>)
 8000676:	2201      	movs	r2, #1
 8000678:	601a      	str	r2, [r3, #0]
			isInAuto = 0;
 800067a:	4b9f      	ldr	r3, [pc, #636]	; (80008f8 <trafficLight_automatic+0x4f4>)
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
		}
		if (isPressedAndReleased(BTN_PED_INDEX)) {
 8000680:	2003      	movs	r0, #3
 8000682:	f7ff fe57 	bl	8000334 <isPressedAndReleased>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d002      	beq.n	8000692 <trafficLight_automatic+0x28e>
			isPedestrian = 1;
 800068c:	4b98      	ldr	r3, [pc, #608]	; (80008f0 <trafficLight_automatic+0x4ec>)
 800068e:	2201      	movs	r2, #1
 8000690:	601a      	str	r2, [r3, #0]
		}

		if (is_button_pressed_3s(BTN_SELECT_INDEX)){
 8000692:	2000      	movs	r0, #0
 8000694:	f7ff fe9c 	bl	80003d0 <is_button_pressed_3s>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d00a      	beq.n	80006b4 <trafficLight_automatic+0x2b0>
			clearTrafficDisplay();
 800069e:	f000 fefb 	bl	8001498 <clearTrafficDisplay>
			state = CHANGE_MODE;
 80006a2:	4b96      	ldr	r3, [pc, #600]	; (80008fc <trafficLight_automatic+0x4f8>)
 80006a4:	2205      	movs	r2, #5
 80006a6:	701a      	strb	r2, [r3, #0]
			isInChange = 1;
 80006a8:	4b95      	ldr	r3, [pc, #596]	; (8000900 <trafficLight_automatic+0x4fc>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	601a      	str	r2, [r3, #0]
			setTimerTriggerLed(DURATION_FOR_4HZ);
 80006ae:	20fa      	movs	r0, #250	; 0xfa
 80006b0:	f001 fa00 	bl	8001ab4 <setTimerTriggerLed>
		}
		if (countDownTimer1_counter == 1) {
 80006b4:	4b93      	ldr	r3, [pc, #588]	; (8000904 <trafficLight_automatic+0x500>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	f040 81e9 	bne.w	8000a90 <trafficLight_automatic+0x68c>
			int buffer1 = segment1Counter/10;
 80006be:	4b92      	ldr	r3, [pc, #584]	; (8000908 <trafficLight_automatic+0x504>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a92      	ldr	r2, [pc, #584]	; (800090c <trafficLight_automatic+0x508>)
 80006c4:	fb82 1203 	smull	r1, r2, r2, r3
 80006c8:	1092      	asrs	r2, r2, #2
 80006ca:	17db      	asrs	r3, r3, #31
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	60fb      	str	r3, [r7, #12]
			int buffer2 = segment1Counter%10;
 80006d0:	4b8d      	ldr	r3, [pc, #564]	; (8000908 <trafficLight_automatic+0x504>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	4b8d      	ldr	r3, [pc, #564]	; (800090c <trafficLight_automatic+0x508>)
 80006d6:	fb83 1302 	smull	r1, r3, r3, r2
 80006da:	1099      	asrs	r1, r3, #2
 80006dc:	17d3      	asrs	r3, r2, #31
 80006de:	1ac9      	subs	r1, r1, r3
 80006e0:	460b      	mov	r3, r1
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	440b      	add	r3, r1
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	60bb      	str	r3, [r7, #8]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#\r", buffer1, buffer2), 1000);
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	68fa      	ldr	r2, [r7, #12]
 80006f0:	4987      	ldr	r1, [pc, #540]	; (8000910 <trafficLight_automatic+0x50c>)
 80006f2:	4888      	ldr	r0, [pc, #544]	; (8000914 <trafficLight_automatic+0x510>)
 80006f4:	f003 fd22 	bl	800413c <siprintf>
 80006f8:	4603      	mov	r3, r0
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000700:	4984      	ldr	r1, [pc, #528]	; (8000914 <trafficLight_automatic+0x510>)
 8000702:	4885      	ldr	r0, [pc, #532]	; (8000918 <trafficLight_automatic+0x514>)
 8000704:	f003 fb7d 	bl	8003e02 <HAL_UART_Transmit>
			segment1Counter--;
 8000708:	4b7f      	ldr	r3, [pc, #508]	; (8000908 <trafficLight_automatic+0x504>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	3b01      	subs	r3, #1
 800070e:	4a7e      	ldr	r2, [pc, #504]	; (8000908 <trafficLight_automatic+0x504>)
 8000710:	6013      	str	r3, [r2, #0]
			segment2Counter--;
 8000712:	4b82      	ldr	r3, [pc, #520]	; (800091c <trafficLight_automatic+0x518>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	3b01      	subs	r3, #1
 8000718:	4a80      	ldr	r2, [pc, #512]	; (800091c <trafficLight_automatic+0x518>)
 800071a:	6013      	str	r3, [r2, #0]
			if (segment2Counter <= 0) {
 800071c:	4b7f      	ldr	r3, [pc, #508]	; (800091c <trafficLight_automatic+0x518>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dc29      	bgt.n	8000778 <trafficLight_automatic+0x374>
				segment1Counter = counter_green / DIVISION_NUMBER;
 8000724:	4b7e      	ldr	r3, [pc, #504]	; (8000920 <trafficLight_automatic+0x51c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a7e      	ldr	r2, [pc, #504]	; (8000924 <trafficLight_automatic+0x520>)
 800072a:	fb82 1203 	smull	r1, r2, r2, r3
 800072e:	1192      	asrs	r2, r2, #6
 8000730:	17db      	asrs	r3, r3, #31
 8000732:	1ad3      	subs	r3, r2, r3
 8000734:	4a74      	ldr	r2, [pc, #464]	; (8000908 <trafficLight_automatic+0x504>)
 8000736:	6013      	str	r3, [r2, #0]
				segment2Counter = counter_red / DIVISION_NUMBER;
 8000738:	4b7b      	ldr	r3, [pc, #492]	; (8000928 <trafficLight_automatic+0x524>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a79      	ldr	r2, [pc, #484]	; (8000924 <trafficLight_automatic+0x520>)
 800073e:	fb82 1203 	smull	r1, r2, r2, r3
 8000742:	1192      	asrs	r2, r2, #6
 8000744:	17db      	asrs	r3, r3, #31
 8000746:	1ad3      	subs	r3, r2, r3
 8000748:	4a74      	ldr	r2, [pc, #464]	; (800091c <trafficLight_automatic+0x518>)
 800074a:	6013      	str	r3, [r2, #0]
				state = AUTO_GREEN1_RED2;
 800074c:	4b6b      	ldr	r3, [pc, #428]	; (80008fc <trafficLight_automatic+0x4f8>)
 800074e:	2203      	movs	r2, #3
 8000750:	701a      	strb	r2, [r3, #0]

				if (isPedestrian == 1) {
 8000752:	4b67      	ldr	r3, [pc, #412]	; (80008f0 <trafficLight_automatic+0x4ec>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d10e      	bne.n	8000778 <trafficLight_automatic+0x374>
					counter_pedestrian++;
 800075a:	4b74      	ldr	r3, [pc, #464]	; (800092c <trafficLight_automatic+0x528>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	3301      	adds	r3, #1
 8000760:	4a72      	ldr	r2, [pc, #456]	; (800092c <trafficLight_automatic+0x528>)
 8000762:	6013      	str	r3, [r2, #0]
					if (counter_pedestrian == PEDESTRIAN_LIGHT_CYCLE) {
 8000764:	4b71      	ldr	r3, [pc, #452]	; (800092c <trafficLight_automatic+0x528>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b08      	cmp	r3, #8
 800076a:	d105      	bne.n	8000778 <trafficLight_automatic+0x374>
						counter_pedestrian = 0;
 800076c:	4b6f      	ldr	r3, [pc, #444]	; (800092c <trafficLight_automatic+0x528>)
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
						isPedestrian = 0;
 8000772:	4b5f      	ldr	r3, [pc, #380]	; (80008f0 <trafficLight_automatic+0x4ec>)
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
					}
				}
			}

			setTimerCounter1(DURATION_1S);
 8000778:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800077c:	f001 f9b6 	bl	8001aec <setTimerCounter1>
		}
		break;
 8000780:	e186      	b.n	8000a90 <trafficLight_automatic+0x68c>
	case AUTO_GREEN1_RED2:
		displayTrafficLight(GREEN_LIGHT, RED_LIGHT);
 8000782:	2101      	movs	r1, #1
 8000784:	2003      	movs	r0, #3
 8000786:	f000 fe1b 	bl	80013c0 <displayTrafficLight>
		if (isPedestrian == 1)
 800078a:	4b59      	ldr	r3, [pc, #356]	; (80008f0 <trafficLight_automatic+0x4ec>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d102      	bne.n	8000798 <trafficLight_automatic+0x394>
			displayPedestrianLight(PEDESTRIAN_LIGHT_STOP);
 8000792:	2005      	movs	r0, #5
 8000794:	f000 fe9e 	bl	80014d4 <displayPedestrianLight>
		if (isPedestrian == 0)
 8000798:	4b55      	ldr	r3, [pc, #340]	; (80008f0 <trafficLight_automatic+0x4ec>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d102      	bne.n	80007a6 <trafficLight_automatic+0x3a2>
			displayPedestrianLight(PEDESTRIAN_LIGHT_OFF);
 80007a0:	2006      	movs	r0, #6
 80007a2:	f000 fe97 	bl	80014d4 <displayPedestrianLight>
		if (isInManual == 1) {
 80007a6:	4b53      	ldr	r3, [pc, #332]	; (80008f4 <trafficLight_automatic+0x4f0>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d10e      	bne.n	80007cc <trafficLight_automatic+0x3c8>
			state = MANUAL_GREEN1_RED2;
 80007ae:	4b53      	ldr	r3, [pc, #332]	; (80008fc <trafficLight_automatic+0x4f8>)
 80007b0:	220f      	movs	r2, #15
 80007b2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!MANUAL#\r"), 1000);
 80007b4:	495e      	ldr	r1, [pc, #376]	; (8000930 <trafficLight_automatic+0x52c>)
 80007b6:	4857      	ldr	r0, [pc, #348]	; (8000914 <trafficLight_automatic+0x510>)
 80007b8:	f003 fcc0 	bl	800413c <siprintf>
 80007bc:	4603      	mov	r3, r0
 80007be:	b29a      	uxth	r2, r3
 80007c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c4:	4953      	ldr	r1, [pc, #332]	; (8000914 <trafficLight_automatic+0x510>)
 80007c6:	4854      	ldr	r0, [pc, #336]	; (8000918 <trafficLight_automatic+0x514>)
 80007c8:	f003 fb1b 	bl	8003e02 <HAL_UART_Transmit>
		}
		if (isPressedAndReleased(BTN_SELECT_INDEX)) {
 80007cc:	2000      	movs	r0, #0
 80007ce:	f7ff fdb1 	bl	8000334 <isPressedAndReleased>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d014      	beq.n	8000802 <trafficLight_automatic+0x3fe>
			state = MANUAL_GREEN1_RED2;
 80007d8:	4b48      	ldr	r3, [pc, #288]	; (80008fc <trafficLight_automatic+0x4f8>)
 80007da:	220f      	movs	r2, #15
 80007dc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!MANUAL#\r"), 1000);
 80007de:	4954      	ldr	r1, [pc, #336]	; (8000930 <trafficLight_automatic+0x52c>)
 80007e0:	484c      	ldr	r0, [pc, #304]	; (8000914 <trafficLight_automatic+0x510>)
 80007e2:	f003 fcab 	bl	800413c <siprintf>
 80007e6:	4603      	mov	r3, r0
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ee:	4949      	ldr	r1, [pc, #292]	; (8000914 <trafficLight_automatic+0x510>)
 80007f0:	4849      	ldr	r0, [pc, #292]	; (8000918 <trafficLight_automatic+0x514>)
 80007f2:	f003 fb06 	bl	8003e02 <HAL_UART_Transmit>
			isInManual = 1;
 80007f6:	4b3f      	ldr	r3, [pc, #252]	; (80008f4 <trafficLight_automatic+0x4f0>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	601a      	str	r2, [r3, #0]
			isInAuto = 0;
 80007fc:	4b3e      	ldr	r3, [pc, #248]	; (80008f8 <trafficLight_automatic+0x4f4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
		}
		if (is_button_pressed_3s(BTN_SELECT_INDEX)){
 8000802:	2000      	movs	r0, #0
 8000804:	f7ff fde4 	bl	80003d0 <is_button_pressed_3s>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d00a      	beq.n	8000824 <trafficLight_automatic+0x420>
			clearTrafficDisplay();
 800080e:	f000 fe43 	bl	8001498 <clearTrafficDisplay>
			state = CHANGE_MODE;
 8000812:	4b3a      	ldr	r3, [pc, #232]	; (80008fc <trafficLight_automatic+0x4f8>)
 8000814:	2205      	movs	r2, #5
 8000816:	701a      	strb	r2, [r3, #0]
			isInChange = 1;
 8000818:	4b39      	ldr	r3, [pc, #228]	; (8000900 <trafficLight_automatic+0x4fc>)
 800081a:	2201      	movs	r2, #1
 800081c:	601a      	str	r2, [r3, #0]
			setTimerTriggerLed(DURATION_FOR_4HZ);
 800081e:	20fa      	movs	r0, #250	; 0xfa
 8000820:	f001 f948 	bl	8001ab4 <setTimerTriggerLed>
		}

		if (isPressedAndReleased(BTN_PED_INDEX)) {
 8000824:	2003      	movs	r0, #3
 8000826:	f7ff fd85 	bl	8000334 <isPressedAndReleased>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d002      	beq.n	8000836 <trafficLight_automatic+0x432>
			isPedestrian = 1;
 8000830:	4b2f      	ldr	r3, [pc, #188]	; (80008f0 <trafficLight_automatic+0x4ec>)
 8000832:	2201      	movs	r2, #1
 8000834:	601a      	str	r2, [r3, #0]
		}
		if (countDownTimer1_counter == 1) {
 8000836:	4b33      	ldr	r3, [pc, #204]	; (8000904 <trafficLight_automatic+0x500>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b01      	cmp	r3, #1
 800083c:	f040 812a 	bne.w	8000a94 <trafficLight_automatic+0x690>
			int buffer1 = segment1Counter/10;
 8000840:	4b31      	ldr	r3, [pc, #196]	; (8000908 <trafficLight_automatic+0x504>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a31      	ldr	r2, [pc, #196]	; (800090c <trafficLight_automatic+0x508>)
 8000846:	fb82 1203 	smull	r1, r2, r2, r3
 800084a:	1092      	asrs	r2, r2, #2
 800084c:	17db      	asrs	r3, r3, #31
 800084e:	1ad3      	subs	r3, r2, r3
 8000850:	617b      	str	r3, [r7, #20]
			int buffer2 = segment1Counter%10;
 8000852:	4b2d      	ldr	r3, [pc, #180]	; (8000908 <trafficLight_automatic+0x504>)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	4b2d      	ldr	r3, [pc, #180]	; (800090c <trafficLight_automatic+0x508>)
 8000858:	fb83 1302 	smull	r1, r3, r3, r2
 800085c:	1099      	asrs	r1, r3, #2
 800085e:	17d3      	asrs	r3, r2, #31
 8000860:	1ac9      	subs	r1, r1, r3
 8000862:	460b      	mov	r3, r1
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	440b      	add	r3, r1
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	1ad3      	subs	r3, r2, r3
 800086c:	613b      	str	r3, [r7, #16]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#\r", buffer1, buffer2), 1000);
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	697a      	ldr	r2, [r7, #20]
 8000872:	4927      	ldr	r1, [pc, #156]	; (8000910 <trafficLight_automatic+0x50c>)
 8000874:	4827      	ldr	r0, [pc, #156]	; (8000914 <trafficLight_automatic+0x510>)
 8000876:	f003 fc61 	bl	800413c <siprintf>
 800087a:	4603      	mov	r3, r0
 800087c:	b29a      	uxth	r2, r3
 800087e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000882:	4924      	ldr	r1, [pc, #144]	; (8000914 <trafficLight_automatic+0x510>)
 8000884:	4824      	ldr	r0, [pc, #144]	; (8000918 <trafficLight_automatic+0x514>)
 8000886:	f003 fabc 	bl	8003e02 <HAL_UART_Transmit>
			segment1Counter--;
 800088a:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <trafficLight_automatic+0x504>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	3b01      	subs	r3, #1
 8000890:	4a1d      	ldr	r2, [pc, #116]	; (8000908 <trafficLight_automatic+0x504>)
 8000892:	6013      	str	r3, [r2, #0]
			segment2Counter--;
 8000894:	4b21      	ldr	r3, [pc, #132]	; (800091c <trafficLight_automatic+0x518>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	3b01      	subs	r3, #1
 800089a:	4a20      	ldr	r2, [pc, #128]	; (800091c <trafficLight_automatic+0x518>)
 800089c:	6013      	str	r3, [r2, #0]
			if (segment1Counter <= 0) {
 800089e:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <trafficLight_automatic+0x504>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	dc1f      	bgt.n	80008e6 <trafficLight_automatic+0x4e2>
				segment1Counter = counter_yellow / DIVISION_NUMBER;
 80008a6:	4b23      	ldr	r3, [pc, #140]	; (8000934 <trafficLight_automatic+0x530>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a1e      	ldr	r2, [pc, #120]	; (8000924 <trafficLight_automatic+0x520>)
 80008ac:	fb82 1203 	smull	r1, r2, r2, r3
 80008b0:	1192      	asrs	r2, r2, #6
 80008b2:	17db      	asrs	r3, r3, #31
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	4a14      	ldr	r2, [pc, #80]	; (8000908 <trafficLight_automatic+0x504>)
 80008b8:	6013      	str	r3, [r2, #0]
				state = AUTO_YELLOW1_RED2;
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <trafficLight_automatic+0x4f8>)
 80008bc:	2204      	movs	r2, #4
 80008be:	701a      	strb	r2, [r3, #0]

				if (isPedestrian == 1) {
 80008c0:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <trafficLight_automatic+0x4ec>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d10e      	bne.n	80008e6 <trafficLight_automatic+0x4e2>
					counter_pedestrian++;
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <trafficLight_automatic+0x528>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	3301      	adds	r3, #1
 80008ce:	4a17      	ldr	r2, [pc, #92]	; (800092c <trafficLight_automatic+0x528>)
 80008d0:	6013      	str	r3, [r2, #0]
					if (counter_pedestrian == PEDESTRIAN_LIGHT_CYCLE) {
 80008d2:	4b16      	ldr	r3, [pc, #88]	; (800092c <trafficLight_automatic+0x528>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2b08      	cmp	r3, #8
 80008d8:	d105      	bne.n	80008e6 <trafficLight_automatic+0x4e2>
						counter_pedestrian = 0;
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <trafficLight_automatic+0x528>)
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
						isPedestrian = 0;
 80008e0:	4b03      	ldr	r3, [pc, #12]	; (80008f0 <trafficLight_automatic+0x4ec>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
					}
				}
			}

			setTimerCounter1(DURATION_1S);
 80008e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ea:	f001 f8ff 	bl	8001aec <setTimerCounter1>
		}
		break;
 80008ee:	e0d1      	b.n	8000a94 <trafficLight_automatic+0x690>
 80008f0:	20000134 	.word	0x20000134
 80008f4:	20000120 	.word	0x20000120
 80008f8:	20000144 	.word	0x20000144
 80008fc:	20000140 	.word	0x20000140
 8000900:	20000148 	.word	0x20000148
 8000904:	20000240 	.word	0x20000240
 8000908:	20000130 	.word	0x20000130
 800090c:	66666667 	.word	0x66666667
 8000910:	080049e4 	.word	0x080049e4
 8000914:	200000ec 	.word	0x200000ec
 8000918:	200001f4 	.word	0x200001f4
 800091c:	20000138 	.word	0x20000138
 8000920:	20000008 	.word	0x20000008
 8000924:	10624dd3 	.word	0x10624dd3
 8000928:	20000000 	.word	0x20000000
 800092c:	20000160 	.word	0x20000160
 8000930:	080049d8 	.word	0x080049d8
 8000934:	20000004 	.word	0x20000004
	case AUTO_YELLOW1_RED2:
		displayTrafficLight(YELLOW_LIGHT, RED_LIGHT);
 8000938:	2101      	movs	r1, #1
 800093a:	2002      	movs	r0, #2
 800093c:	f000 fd40 	bl	80013c0 <displayTrafficLight>
		if (isPedestrian == 1)
 8000940:	4b58      	ldr	r3, [pc, #352]	; (8000aa4 <trafficLight_automatic+0x6a0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d102      	bne.n	800094e <trafficLight_automatic+0x54a>
			displayPedestrianLight(PEDESTRIAN_LIGHT_STOP);
 8000948:	2005      	movs	r0, #5
 800094a:	f000 fdc3 	bl	80014d4 <displayPedestrianLight>
		if (isPedestrian == 0)
 800094e:	4b55      	ldr	r3, [pc, #340]	; (8000aa4 <trafficLight_automatic+0x6a0>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d102      	bne.n	800095c <trafficLight_automatic+0x558>
			displayPedestrianLight(PEDESTRIAN_LIGHT_OFF);
 8000956:	2006      	movs	r0, #6
 8000958:	f000 fdbc 	bl	80014d4 <displayPedestrianLight>
		if (isPressedAndReleased(BTN_SELECT_INDEX)) {
 800095c:	2000      	movs	r0, #0
 800095e:	f7ff fce9 	bl	8000334 <isPressedAndReleased>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d005      	beq.n	8000974 <trafficLight_automatic+0x570>
			isInManual = 1;
 8000968:	4b4f      	ldr	r3, [pc, #316]	; (8000aa8 <trafficLight_automatic+0x6a4>)
 800096a:	2201      	movs	r2, #1
 800096c:	601a      	str	r2, [r3, #0]
			isInAuto = 0;
 800096e:	4b4f      	ldr	r3, [pc, #316]	; (8000aac <trafficLight_automatic+0x6a8>)
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
		}
		if (is_button_pressed_3s(BTN_SELECT_INDEX)){
 8000974:	2000      	movs	r0, #0
 8000976:	f7ff fd2b 	bl	80003d0 <is_button_pressed_3s>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d00a      	beq.n	8000996 <trafficLight_automatic+0x592>
			clearTrafficDisplay();
 8000980:	f000 fd8a 	bl	8001498 <clearTrafficDisplay>
			state = CHANGE_MODE;
 8000984:	4b4a      	ldr	r3, [pc, #296]	; (8000ab0 <trafficLight_automatic+0x6ac>)
 8000986:	2205      	movs	r2, #5
 8000988:	701a      	strb	r2, [r3, #0]
			isInChange = 1;
 800098a:	4b4a      	ldr	r3, [pc, #296]	; (8000ab4 <trafficLight_automatic+0x6b0>)
 800098c:	2201      	movs	r2, #1
 800098e:	601a      	str	r2, [r3, #0]
			setTimerTriggerLed(DURATION_FOR_4HZ);
 8000990:	20fa      	movs	r0, #250	; 0xfa
 8000992:	f001 f88f 	bl	8001ab4 <setTimerTriggerLed>
		}

		if (isPressedAndReleased(BTN_PED_INDEX)) {
 8000996:	2003      	movs	r0, #3
 8000998:	f7ff fccc 	bl	8000334 <isPressedAndReleased>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d002      	beq.n	80009a8 <trafficLight_automatic+0x5a4>
			isPedestrian = 1;
 80009a2:	4b40      	ldr	r3, [pc, #256]	; (8000aa4 <trafficLight_automatic+0x6a0>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	601a      	str	r2, [r3, #0]
		}

		if (isPedestrian == 1) {
 80009a8:	4b3e      	ldr	r3, [pc, #248]	; (8000aa4 <trafficLight_automatic+0x6a0>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d102      	bne.n	80009b6 <trafficLight_automatic+0x5b2>
			buzzer_warning = 1;
 80009b0:	4b41      	ldr	r3, [pc, #260]	; (8000ab8 <trafficLight_automatic+0x6b4>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	601a      	str	r2, [r3, #0]
		}

		if (countDownTimer1_counter == 1) {
 80009b6:	4b41      	ldr	r3, [pc, #260]	; (8000abc <trafficLight_automatic+0x6b8>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d16c      	bne.n	8000a98 <trafficLight_automatic+0x694>
			int buffer1 = segment1Counter/10;
 80009be:	4b40      	ldr	r3, [pc, #256]	; (8000ac0 <trafficLight_automatic+0x6bc>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a40      	ldr	r2, [pc, #256]	; (8000ac4 <trafficLight_automatic+0x6c0>)
 80009c4:	fb82 1203 	smull	r1, r2, r2, r3
 80009c8:	1092      	asrs	r2, r2, #2
 80009ca:	17db      	asrs	r3, r3, #31
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	61fb      	str	r3, [r7, #28]
			int buffer2 = segment1Counter%10;
 80009d0:	4b3b      	ldr	r3, [pc, #236]	; (8000ac0 <trafficLight_automatic+0x6bc>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b3b      	ldr	r3, [pc, #236]	; (8000ac4 <trafficLight_automatic+0x6c0>)
 80009d6:	fb83 1302 	smull	r1, r3, r3, r2
 80009da:	1099      	asrs	r1, r3, #2
 80009dc:	17d3      	asrs	r3, r2, #31
 80009de:	1ac9      	subs	r1, r1, r3
 80009e0:	460b      	mov	r3, r1
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	440b      	add	r3, r1
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	61bb      	str	r3, [r7, #24]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#\r", buffer1, buffer2), 1000);
 80009ec:	69bb      	ldr	r3, [r7, #24]
 80009ee:	69fa      	ldr	r2, [r7, #28]
 80009f0:	4935      	ldr	r1, [pc, #212]	; (8000ac8 <trafficLight_automatic+0x6c4>)
 80009f2:	4836      	ldr	r0, [pc, #216]	; (8000acc <trafficLight_automatic+0x6c8>)
 80009f4:	f003 fba2 	bl	800413c <siprintf>
 80009f8:	4603      	mov	r3, r0
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a00:	4932      	ldr	r1, [pc, #200]	; (8000acc <trafficLight_automatic+0x6c8>)
 8000a02:	4833      	ldr	r0, [pc, #204]	; (8000ad0 <trafficLight_automatic+0x6cc>)
 8000a04:	f003 f9fd 	bl	8003e02 <HAL_UART_Transmit>
			segment1Counter--;
 8000a08:	4b2d      	ldr	r3, [pc, #180]	; (8000ac0 <trafficLight_automatic+0x6bc>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	4a2c      	ldr	r2, [pc, #176]	; (8000ac0 <trafficLight_automatic+0x6bc>)
 8000a10:	6013      	str	r3, [r2, #0]
			segment2Counter--;
 8000a12:	4b30      	ldr	r3, [pc, #192]	; (8000ad4 <trafficLight_automatic+0x6d0>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	4a2e      	ldr	r2, [pc, #184]	; (8000ad4 <trafficLight_automatic+0x6d0>)
 8000a1a:	6013      	str	r3, [r2, #0]
			if (segment1Counter <= 0) {
 8000a1c:	4b28      	ldr	r3, [pc, #160]	; (8000ac0 <trafficLight_automatic+0x6bc>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	dc2c      	bgt.n	8000a7e <trafficLight_automatic+0x67a>
				segment1Counter = counter_red / DIVISION_NUMBER;
 8000a24:	4b2c      	ldr	r3, [pc, #176]	; (8000ad8 <trafficLight_automatic+0x6d4>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a2c      	ldr	r2, [pc, #176]	; (8000adc <trafficLight_automatic+0x6d8>)
 8000a2a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a2e:	1192      	asrs	r2, r2, #6
 8000a30:	17db      	asrs	r3, r3, #31
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	4a22      	ldr	r2, [pc, #136]	; (8000ac0 <trafficLight_automatic+0x6bc>)
 8000a36:	6013      	str	r3, [r2, #0]
				segment2Counter = counter_green / DIVISION_NUMBER;
 8000a38:	4b29      	ldr	r3, [pc, #164]	; (8000ae0 <trafficLight_automatic+0x6dc>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a27      	ldr	r2, [pc, #156]	; (8000adc <trafficLight_automatic+0x6d8>)
 8000a3e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a42:	1192      	asrs	r2, r2, #6
 8000a44:	17db      	asrs	r3, r3, #31
 8000a46:	1ad3      	subs	r3, r2, r3
 8000a48:	4a22      	ldr	r2, [pc, #136]	; (8000ad4 <trafficLight_automatic+0x6d0>)
 8000a4a:	6013      	str	r3, [r2, #0]
				state = AUTO_RED1_GREEN2;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <trafficLight_automatic+0x6ac>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	701a      	strb	r2, [r3, #0]
				buzzer_warning = 0;
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <trafficLight_automatic+0x6b4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]

				if (isPedestrian == 1) {
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <trafficLight_automatic+0x6a0>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d10e      	bne.n	8000a7e <trafficLight_automatic+0x67a>
					counter_pedestrian++;
 8000a60:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <trafficLight_automatic+0x6e0>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	3301      	adds	r3, #1
 8000a66:	4a1f      	ldr	r2, [pc, #124]	; (8000ae4 <trafficLight_automatic+0x6e0>)
 8000a68:	6013      	str	r3, [r2, #0]
					if (counter_pedestrian == PEDESTRIAN_LIGHT_CYCLE) {
 8000a6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <trafficLight_automatic+0x6e0>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b08      	cmp	r3, #8
 8000a70:	d105      	bne.n	8000a7e <trafficLight_automatic+0x67a>
						counter_pedestrian = 0;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <trafficLight_automatic+0x6e0>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
						isPedestrian = 0;
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <trafficLight_automatic+0x6a0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
					}
				}
			}
			setTimerCounter1(DURATION_1S);
 8000a7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a82:	f001 f833 	bl	8001aec <setTimerCounter1>
		}

		break;
 8000a86:	e007      	b.n	8000a98 <trafficLight_automatic+0x694>
	default:
		break;
 8000a88:	bf00      	nop
 8000a8a:	e006      	b.n	8000a9a <trafficLight_automatic+0x696>
		break;
 8000a8c:	bf00      	nop
 8000a8e:	e004      	b.n	8000a9a <trafficLight_automatic+0x696>
		break;
 8000a90:	bf00      	nop
 8000a92:	e002      	b.n	8000a9a <trafficLight_automatic+0x696>
		break;
 8000a94:	bf00      	nop
 8000a96:	e000      	b.n	8000a9a <trafficLight_automatic+0x696>
		break;
 8000a98:	bf00      	nop
	}
}
 8000a9a:	bf00      	nop
 8000a9c:	3720      	adds	r7, #32
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000134 	.word	0x20000134
 8000aa8:	20000120 	.word	0x20000120
 8000aac:	20000144 	.word	0x20000144
 8000ab0:	20000140 	.word	0x20000140
 8000ab4:	20000148 	.word	0x20000148
 8000ab8:	200000b4 	.word	0x200000b4
 8000abc:	20000240 	.word	0x20000240
 8000ac0:	20000130 	.word	0x20000130
 8000ac4:	66666667 	.word	0x66666667
 8000ac8:	080049e4 	.word	0x080049e4
 8000acc:	200000ec 	.word	0x200000ec
 8000ad0:	200001f4 	.word	0x200001f4
 8000ad4:	20000138 	.word	0x20000138
 8000ad8:	20000000 	.word	0x20000000
 8000adc:	10624dd3 	.word	0x10624dd3
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	20000160 	.word	0x20000160

08000ae8 <trafficLight_change>:
#include "software_timer.h"
#include "led_segment_control.h"
#include <stdio.h>"

char message[MAX_MESSAGE_LENGTH];
void trafficLight_change(){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
	switch(state){
 8000aee:	4b9c      	ldr	r3, [pc, #624]	; (8000d60 <trafficLight_change+0x278>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	3b05      	subs	r3, #5
 8000af4:	2b06      	cmp	r3, #6
 8000af6:	f200 82c9 	bhi.w	800108c <trafficLight_change+0x5a4>
 8000afa:	a201      	add	r2, pc, #4	; (adr r2, 8000b00 <trafficLight_change+0x18>)
 8000afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b00:	08000b1d 	.word	0x08000b1d
 8000b04:	08000b6f 	.word	0x08000b6f
 8000b08:	08000c15 	.word	0x08000c15
 8000b0c:	08000cbb 	.word	0x08000cbb
 8000b10:	08000d91 	.word	0x08000d91
 8000b14:	08000ee9 	.word	0x08000ee9
 8000b18:	08000f77 	.word	0x08000f77
	case CHANGE_MODE:
		isRedMode = 1;
 8000b1c:	4b91      	ldr	r3, [pc, #580]	; (8000d64 <trafficLight_change+0x27c>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	601a      	str	r2, [r3, #0]
		isYellowMode = 0;
 8000b22:	4b91      	ldr	r3, [pc, #580]	; (8000d68 <trafficLight_change+0x280>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
		isGreenMode = 0;
 8000b28:	4b90      	ldr	r3, [pc, #576]	; (8000d6c <trafficLight_change+0x284>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
		if (isLongPressedAndReleased(BTN_SELECT_INDEX)) {
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f7ff fc1a 	bl	8000368 <isLongPressedAndReleased>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d00c      	beq.n	8000b54 <trafficLight_change+0x6c>
			state = CHANGE_MODE_RED;
 8000b3a:	4b89      	ldr	r3, [pc, #548]	; (8000d60 <trafficLight_change+0x278>)
 8000b3c:	2206      	movs	r2, #6
 8000b3e:	701a      	strb	r2, [r3, #0]
			tempCounter = counter_red / DIVISION_NUMBER;
 8000b40:	4b8b      	ldr	r3, [pc, #556]	; (8000d70 <trafficLight_change+0x288>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a8b      	ldr	r2, [pc, #556]	; (8000d74 <trafficLight_change+0x28c>)
 8000b46:	fb82 1203 	smull	r1, r2, r2, r3
 8000b4a:	1192      	asrs	r2, r2, #6
 8000b4c:	17db      	asrs	r3, r3, #31
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	4a89      	ldr	r2, [pc, #548]	; (8000d78 <trafficLight_change+0x290>)
 8000b52:	6013      	str	r3, [r2, #0]
		}

		HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!CHANGE#\r"), 1000);
 8000b54:	4989      	ldr	r1, [pc, #548]	; (8000d7c <trafficLight_change+0x294>)
 8000b56:	488a      	ldr	r0, [pc, #552]	; (8000d80 <trafficLight_change+0x298>)
 8000b58:	f003 faf0 	bl	800413c <siprintf>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b64:	4986      	ldr	r1, [pc, #536]	; (8000d80 <trafficLight_change+0x298>)
 8000b66:	4887      	ldr	r0, [pc, #540]	; (8000d84 <trafficLight_change+0x29c>)
 8000b68:	f003 f94b 	bl	8003e02 <HAL_UART_Transmit>
		break;
 8000b6c:	e29b      	b.n	80010a6 <trafficLight_change+0x5be>
	case CHANGE_MODE_RED:
		isRedMode = 1;
 8000b6e:	4b7d      	ldr	r3, [pc, #500]	; (8000d64 <trafficLight_change+0x27c>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	601a      	str	r2, [r3, #0]
		isYellowMode = 0;
 8000b74:	4b7c      	ldr	r3, [pc, #496]	; (8000d68 <trafficLight_change+0x280>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
		isGreenMode = 0;
 8000b7a:	4b7c      	ldr	r3, [pc, #496]	; (8000d6c <trafficLight_change+0x284>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 8000b80:	2000      	movs	r0, #0
 8000b82:	f7ff fbd7 	bl	8000334 <isPressedAndReleased>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d00c      	beq.n	8000ba6 <trafficLight_change+0xbe>
			tempCounter = counter_yellow/DIVISION_NUMBER;
 8000b8c:	4b7e      	ldr	r3, [pc, #504]	; (8000d88 <trafficLight_change+0x2a0>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a78      	ldr	r2, [pc, #480]	; (8000d74 <trafficLight_change+0x28c>)
 8000b92:	fb82 1203 	smull	r1, r2, r2, r3
 8000b96:	1192      	asrs	r2, r2, #6
 8000b98:	17db      	asrs	r3, r3, #31
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	4a76      	ldr	r2, [pc, #472]	; (8000d78 <trafficLight_change+0x290>)
 8000b9e:	6013      	str	r3, [r2, #0]
			state = CHANGE_MODE_YELLOW;
 8000ba0:	4b6f      	ldr	r3, [pc, #444]	; (8000d60 <trafficLight_change+0x278>)
 8000ba2:	2207      	movs	r2, #7
 8000ba4:	701a      	strb	r2, [r3, #0]
		}
		if(isPressedAndReleased(BTN_MODIFY_INDEX)){
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f7ff fbc4 	bl	8000334 <isPressedAndReleased>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d002      	beq.n	8000bb8 <trafficLight_change+0xd0>
			state = MODIFY_PRESSED;
 8000bb2:	4b6b      	ldr	r3, [pc, #428]	; (8000d60 <trafficLight_change+0x278>)
 8000bb4:	2209      	movs	r2, #9
 8000bb6:	701a      	strb	r2, [r3, #0]
		}
		if(is_button_pressed(BTN_MODIFY_INDEX)){
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f7ff fbef 	bl	800039c <is_button_pressed>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d018      	beq.n	8000bf6 <trafficLight_change+0x10e>
			if(is_button_pressed_3s(BTN_MODIFY_INDEX)){
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f7ff fc03 	bl	80003d0 <is_button_pressed_3s>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d012      	beq.n	8000bf6 <trafficLight_change+0x10e>
				state = MODIFY_LONGPRESSED;
 8000bd0:	4b63      	ldr	r3, [pc, #396]	; (8000d60 <trafficLight_change+0x278>)
 8000bd2:	220a      	movs	r2, #10
 8000bd4:	701a      	strb	r2, [r3, #0]
				tempCounter += 10;
 8000bd6:	4b68      	ldr	r3, [pc, #416]	; (8000d78 <trafficLight_change+0x290>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	330a      	adds	r3, #10
 8000bdc:	4a66      	ldr	r2, [pc, #408]	; (8000d78 <trafficLight_change+0x290>)
 8000bde:	6013      	str	r3, [r2, #0]
				if(tempCounter > MAX_SEGMENT_VALUE) {
 8000be0:	4b65      	ldr	r3, [pc, #404]	; (8000d78 <trafficLight_change+0x290>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b63      	cmp	r3, #99	; 0x63
 8000be6:	dd02      	ble.n	8000bee <trafficLight_change+0x106>
					tempCounter = 0;
 8000be8:	4b63      	ldr	r3, [pc, #396]	; (8000d78 <trafficLight_change+0x290>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
				}
				setTimerModify(DURATION_1S);
 8000bee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bf2:	f000 ff43 	bl	8001a7c <setTimerModify>
			}
		}
		if(isPressedAndReleased(BTN_SET_INDEX)){
 8000bf6:	2002      	movs	r0, #2
 8000bf8:	f7ff fb9c 	bl	8000334 <isPressedAndReleased>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f000 8246 	beq.w	8001090 <trafficLight_change+0x5a8>
			state = SET_PRESSED;
 8000c04:	4b56      	ldr	r3, [pc, #344]	; (8000d60 <trafficLight_change+0x278>)
 8000c06:	220b      	movs	r2, #11
 8000c08:	701a      	strb	r2, [r3, #0]
			setTimerWait(DURATION_3S);
 8000c0a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c0e:	f000 ff19 	bl	8001a44 <setTimerWait>
		}
		break;
 8000c12:	e23d      	b.n	8001090 <trafficLight_change+0x5a8>
	case CHANGE_MODE_YELLOW:
		isRedMode = 0;
 8000c14:	4b53      	ldr	r3, [pc, #332]	; (8000d64 <trafficLight_change+0x27c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
		isYellowMode = 1;
 8000c1a:	4b53      	ldr	r3, [pc, #332]	; (8000d68 <trafficLight_change+0x280>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]
		isGreenMode = 0;
 8000c20:	4b52      	ldr	r3, [pc, #328]	; (8000d6c <trafficLight_change+0x284>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]

		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 8000c26:	2000      	movs	r0, #0
 8000c28:	f7ff fb84 	bl	8000334 <isPressedAndReleased>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d00c      	beq.n	8000c4c <trafficLight_change+0x164>
			tempCounter = counter_green/DIVISION_NUMBER;
 8000c32:	4b56      	ldr	r3, [pc, #344]	; (8000d8c <trafficLight_change+0x2a4>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a4f      	ldr	r2, [pc, #316]	; (8000d74 <trafficLight_change+0x28c>)
 8000c38:	fb82 1203 	smull	r1, r2, r2, r3
 8000c3c:	1192      	asrs	r2, r2, #6
 8000c3e:	17db      	asrs	r3, r3, #31
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	4a4d      	ldr	r2, [pc, #308]	; (8000d78 <trafficLight_change+0x290>)
 8000c44:	6013      	str	r3, [r2, #0]
			state = CHANGE_MODE_GREEN;
 8000c46:	4b46      	ldr	r3, [pc, #280]	; (8000d60 <trafficLight_change+0x278>)
 8000c48:	2208      	movs	r2, #8
 8000c4a:	701a      	strb	r2, [r3, #0]
		}
		if(isPressedAndReleased(BTN_MODIFY_INDEX)){
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	f7ff fb71 	bl	8000334 <isPressedAndReleased>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d002      	beq.n	8000c5e <trafficLight_change+0x176>
			state = MODIFY_PRESSED;
 8000c58:	4b41      	ldr	r3, [pc, #260]	; (8000d60 <trafficLight_change+0x278>)
 8000c5a:	2209      	movs	r2, #9
 8000c5c:	701a      	strb	r2, [r3, #0]
		}
		if(is_button_pressed(BTN_MODIFY_INDEX)){
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f7ff fb9c 	bl	800039c <is_button_pressed>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d018      	beq.n	8000c9c <trafficLight_change+0x1b4>
			if(is_button_pressed_3s(BTN_MODIFY_INDEX)){
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f7ff fbb0 	bl	80003d0 <is_button_pressed_3s>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d012      	beq.n	8000c9c <trafficLight_change+0x1b4>
				state = MODIFY_LONGPRESSED;
 8000c76:	4b3a      	ldr	r3, [pc, #232]	; (8000d60 <trafficLight_change+0x278>)
 8000c78:	220a      	movs	r2, #10
 8000c7a:	701a      	strb	r2, [r3, #0]
				tempCounter += 10;
 8000c7c:	4b3e      	ldr	r3, [pc, #248]	; (8000d78 <trafficLight_change+0x290>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	330a      	adds	r3, #10
 8000c82:	4a3d      	ldr	r2, [pc, #244]	; (8000d78 <trafficLight_change+0x290>)
 8000c84:	6013      	str	r3, [r2, #0]
				if(tempCounter > MAX_SEGMENT_VALUE) {
 8000c86:	4b3c      	ldr	r3, [pc, #240]	; (8000d78 <trafficLight_change+0x290>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b63      	cmp	r3, #99	; 0x63
 8000c8c:	dd02      	ble.n	8000c94 <trafficLight_change+0x1ac>
					tempCounter = 0;
 8000c8e:	4b3a      	ldr	r3, [pc, #232]	; (8000d78 <trafficLight_change+0x290>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
				}
				setTimerModify(DURATION_1S);
 8000c94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c98:	f000 fef0 	bl	8001a7c <setTimerModify>
			}
		}
		if(isPressedAndReleased(BTN_SET_INDEX)){
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	f7ff fb49 	bl	8000334 <isPressedAndReleased>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f000 81f5 	beq.w	8001094 <trafficLight_change+0x5ac>
			state = SET_PRESSED;
 8000caa:	4b2d      	ldr	r3, [pc, #180]	; (8000d60 <trafficLight_change+0x278>)
 8000cac:	220b      	movs	r2, #11
 8000cae:	701a      	strb	r2, [r3, #0]
			setTimerWait(DURATION_3S);
 8000cb0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000cb4:	f000 fec6 	bl	8001a44 <setTimerWait>
		}
		break;
 8000cb8:	e1ec      	b.n	8001094 <trafficLight_change+0x5ac>
	case CHANGE_MODE_GREEN:
		isRedMode = 0;
 8000cba:	4b2a      	ldr	r3, [pc, #168]	; (8000d64 <trafficLight_change+0x27c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
		isYellowMode = 0;
 8000cc0:	4b29      	ldr	r3, [pc, #164]	; (8000d68 <trafficLight_change+0x280>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
		isGreenMode = 1;
 8000cc6:	4b29      	ldr	r3, [pc, #164]	; (8000d6c <trafficLight_change+0x284>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	601a      	str	r2, [r3, #0]

		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f7ff fb31 	bl	8000334 <isPressedAndReleased>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d00c      	beq.n	8000cf2 <trafficLight_change+0x20a>
			tempCounter = counter_red/DIVISION_NUMBER;
 8000cd8:	4b25      	ldr	r3, [pc, #148]	; (8000d70 <trafficLight_change+0x288>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a25      	ldr	r2, [pc, #148]	; (8000d74 <trafficLight_change+0x28c>)
 8000cde:	fb82 1203 	smull	r1, r2, r2, r3
 8000ce2:	1192      	asrs	r2, r2, #6
 8000ce4:	17db      	asrs	r3, r3, #31
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	4a23      	ldr	r2, [pc, #140]	; (8000d78 <trafficLight_change+0x290>)
 8000cea:	6013      	str	r3, [r2, #0]
			state = CHANGE_MODE_RED;
 8000cec:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <trafficLight_change+0x278>)
 8000cee:	2206      	movs	r2, #6
 8000cf0:	701a      	strb	r2, [r3, #0]
		}
		if(isPressedAndReleased(BTN_MODIFY_INDEX)){
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	f7ff fb1e 	bl	8000334 <isPressedAndReleased>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d002      	beq.n	8000d04 <trafficLight_change+0x21c>
			state = MODIFY_PRESSED;
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <trafficLight_change+0x278>)
 8000d00:	2209      	movs	r2, #9
 8000d02:	701a      	strb	r2, [r3, #0]
		}
		if(is_button_pressed(BTN_MODIFY_INDEX)){
 8000d04:	2001      	movs	r0, #1
 8000d06:	f7ff fb49 	bl	800039c <is_button_pressed>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d018      	beq.n	8000d42 <trafficLight_change+0x25a>
			if(is_button_pressed_3s(BTN_MODIFY_INDEX)){
 8000d10:	2001      	movs	r0, #1
 8000d12:	f7ff fb5d 	bl	80003d0 <is_button_pressed_3s>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d012      	beq.n	8000d42 <trafficLight_change+0x25a>
				state = MODIFY_LONGPRESSED;
 8000d1c:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <trafficLight_change+0x278>)
 8000d1e:	220a      	movs	r2, #10
 8000d20:	701a      	strb	r2, [r3, #0]
				tempCounter += 10;
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <trafficLight_change+0x290>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	330a      	adds	r3, #10
 8000d28:	4a13      	ldr	r2, [pc, #76]	; (8000d78 <trafficLight_change+0x290>)
 8000d2a:	6013      	str	r3, [r2, #0]
				if(tempCounter > MAX_SEGMENT_VALUE) {
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <trafficLight_change+0x290>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b63      	cmp	r3, #99	; 0x63
 8000d32:	dd02      	ble.n	8000d3a <trafficLight_change+0x252>
					tempCounter = 0;
 8000d34:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <trafficLight_change+0x290>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
				}
				setTimerModify(DURATION_1S);
 8000d3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d3e:	f000 fe9d 	bl	8001a7c <setTimerModify>
			}
		}
		if(isPressedAndReleased(BTN_SET_INDEX)){
 8000d42:	2002      	movs	r0, #2
 8000d44:	f7ff faf6 	bl	8000334 <isPressedAndReleased>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f000 81a4 	beq.w	8001098 <trafficLight_change+0x5b0>
			state = SET_PRESSED;
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <trafficLight_change+0x278>)
 8000d52:	220b      	movs	r2, #11
 8000d54:	701a      	strb	r2, [r3, #0]
			setTimerWait(DURATION_3S);
 8000d56:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d5a:	f000 fe73 	bl	8001a44 <setTimerWait>
		}
		break;
 8000d5e:	e19b      	b.n	8001098 <trafficLight_change+0x5b0>
 8000d60:	20000140 	.word	0x20000140
 8000d64:	2000012c 	.word	0x2000012c
 8000d68:	20000128 	.word	0x20000128
 8000d6c:	2000014c 	.word	0x2000014c
 8000d70:	20000000 	.word	0x20000000
 8000d74:	10624dd3 	.word	0x10624dd3
 8000d78:	2000013c 	.word	0x2000013c
 8000d7c:	080049f4 	.word	0x080049f4
 8000d80:	200000ec 	.word	0x200000ec
 8000d84:	200001f4 	.word	0x200001f4
 8000d88:	20000004 	.word	0x20000004
 8000d8c:	20000008 	.word	0x20000008
	case MODIFY_PRESSED:
		if(isRedMode == 1){
 8000d90:	4b86      	ldr	r3, [pc, #536]	; (8000fac <trafficLight_change+0x4c4>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d134      	bne.n	8000e02 <trafficLight_change+0x31a>
			tempCounter += 1;
 8000d98:	4b85      	ldr	r3, [pc, #532]	; (8000fb0 <trafficLight_change+0x4c8>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	4a84      	ldr	r2, [pc, #528]	; (8000fb0 <trafficLight_change+0x4c8>)
 8000da0:	6013      	str	r3, [r2, #0]
			int buffer1 = tempCounter/10;
 8000da2:	4b83      	ldr	r3, [pc, #524]	; (8000fb0 <trafficLight_change+0x4c8>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a83      	ldr	r2, [pc, #524]	; (8000fb4 <trafficLight_change+0x4cc>)
 8000da8:	fb82 1203 	smull	r1, r2, r2, r3
 8000dac:	1092      	asrs	r2, r2, #2
 8000dae:	17db      	asrs	r3, r3, #31
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	607b      	str	r3, [r7, #4]
			int buffer2 = tempCounter%10;
 8000db4:	4b7e      	ldr	r3, [pc, #504]	; (8000fb0 <trafficLight_change+0x4c8>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b7e      	ldr	r3, [pc, #504]	; (8000fb4 <trafficLight_change+0x4cc>)
 8000dba:	fb83 1302 	smull	r1, r3, r3, r2
 8000dbe:	1099      	asrs	r1, r3, #2
 8000dc0:	17d3      	asrs	r3, r2, #31
 8000dc2:	1ac9      	subs	r1, r1, r3
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	440b      	add	r3, r1
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	603b      	str	r3, [r7, #0]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!RED:%d%d#\r", buffer1, buffer2), 1000);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	4978      	ldr	r1, [pc, #480]	; (8000fb8 <trafficLight_change+0x4d0>)
 8000dd6:	4879      	ldr	r0, [pc, #484]	; (8000fbc <trafficLight_change+0x4d4>)
 8000dd8:	f003 f9b0 	bl	800413c <siprintf>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de4:	4975      	ldr	r1, [pc, #468]	; (8000fbc <trafficLight_change+0x4d4>)
 8000de6:	4876      	ldr	r0, [pc, #472]	; (8000fc0 <trafficLight_change+0x4d8>)
 8000de8:	f003 f80b 	bl	8003e02 <HAL_UART_Transmit>
			if(tempCounter > MAX_SEGMENT_VALUE){
 8000dec:	4b70      	ldr	r3, [pc, #448]	; (8000fb0 <trafficLight_change+0x4c8>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b63      	cmp	r3, #99	; 0x63
 8000df2:	dd02      	ble.n	8000dfa <trafficLight_change+0x312>
				tempCounter =0;
 8000df4:	4b6e      	ldr	r3, [pc, #440]	; (8000fb0 <trafficLight_change+0x4c8>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
			}
			state = CHANGE_MODE_RED;
 8000dfa:	4b72      	ldr	r3, [pc, #456]	; (8000fc4 <trafficLight_change+0x4dc>)
 8000dfc:	2206      	movs	r2, #6
 8000dfe:	701a      	strb	r2, [r3, #0]
			if(tempCounter > MAX_SEGMENT_VALUE){
				tempCounter = 0;
			}
			state = CHANGE_MODE_GREEN;
		}
		break;
 8000e00:	e14c      	b.n	800109c <trafficLight_change+0x5b4>
		else if(isYellowMode == 1){
 8000e02:	4b71      	ldr	r3, [pc, #452]	; (8000fc8 <trafficLight_change+0x4e0>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d134      	bne.n	8000e74 <trafficLight_change+0x38c>
			tempCounter += 1;
 8000e0a:	4b69      	ldr	r3, [pc, #420]	; (8000fb0 <trafficLight_change+0x4c8>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	4a67      	ldr	r2, [pc, #412]	; (8000fb0 <trafficLight_change+0x4c8>)
 8000e12:	6013      	str	r3, [r2, #0]
			int buffer1 = tempCounter/10;
 8000e14:	4b66      	ldr	r3, [pc, #408]	; (8000fb0 <trafficLight_change+0x4c8>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a66      	ldr	r2, [pc, #408]	; (8000fb4 <trafficLight_change+0x4cc>)
 8000e1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e1e:	1092      	asrs	r2, r2, #2
 8000e20:	17db      	asrs	r3, r3, #31
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	60fb      	str	r3, [r7, #12]
			int buffer2 = tempCounter%10;
 8000e26:	4b62      	ldr	r3, [pc, #392]	; (8000fb0 <trafficLight_change+0x4c8>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	4b62      	ldr	r3, [pc, #392]	; (8000fb4 <trafficLight_change+0x4cc>)
 8000e2c:	fb83 1302 	smull	r1, r3, r3, r2
 8000e30:	1099      	asrs	r1, r3, #2
 8000e32:	17d3      	asrs	r3, r2, #31
 8000e34:	1ac9      	subs	r1, r1, r3
 8000e36:	460b      	mov	r3, r1
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	60bb      	str	r3, [r7, #8]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!YEL:%d%d#\r", buffer1, buffer2), 1000);
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	4961      	ldr	r1, [pc, #388]	; (8000fcc <trafficLight_change+0x4e4>)
 8000e48:	485c      	ldr	r0, [pc, #368]	; (8000fbc <trafficLight_change+0x4d4>)
 8000e4a:	f003 f977 	bl	800413c <siprintf>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e56:	4959      	ldr	r1, [pc, #356]	; (8000fbc <trafficLight_change+0x4d4>)
 8000e58:	4859      	ldr	r0, [pc, #356]	; (8000fc0 <trafficLight_change+0x4d8>)
 8000e5a:	f002 ffd2 	bl	8003e02 <HAL_UART_Transmit>
			if(tempCounter > MAX_SEGMENT_VALUE){
 8000e5e:	4b54      	ldr	r3, [pc, #336]	; (8000fb0 <trafficLight_change+0x4c8>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2b63      	cmp	r3, #99	; 0x63
 8000e64:	dd02      	ble.n	8000e6c <trafficLight_change+0x384>
				tempCounter =0;
 8000e66:	4b52      	ldr	r3, [pc, #328]	; (8000fb0 <trafficLight_change+0x4c8>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
			state = CHANGE_MODE_YELLOW;
 8000e6c:	4b55      	ldr	r3, [pc, #340]	; (8000fc4 <trafficLight_change+0x4dc>)
 8000e6e:	2207      	movs	r2, #7
 8000e70:	701a      	strb	r2, [r3, #0]
		break;
 8000e72:	e113      	b.n	800109c <trafficLight_change+0x5b4>
		else if(isGreenMode == 1){
 8000e74:	4b56      	ldr	r3, [pc, #344]	; (8000fd0 <trafficLight_change+0x4e8>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	f040 810f 	bne.w	800109c <trafficLight_change+0x5b4>
			tempCounter += 1;
 8000e7e:	4b4c      	ldr	r3, [pc, #304]	; (8000fb0 <trafficLight_change+0x4c8>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	3301      	adds	r3, #1
 8000e84:	4a4a      	ldr	r2, [pc, #296]	; (8000fb0 <trafficLight_change+0x4c8>)
 8000e86:	6013      	str	r3, [r2, #0]
			int buffer1 = tempCounter/10;
 8000e88:	4b49      	ldr	r3, [pc, #292]	; (8000fb0 <trafficLight_change+0x4c8>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a49      	ldr	r2, [pc, #292]	; (8000fb4 <trafficLight_change+0x4cc>)
 8000e8e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e92:	1092      	asrs	r2, r2, #2
 8000e94:	17db      	asrs	r3, r3, #31
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	617b      	str	r3, [r7, #20]
			int buffer2 = tempCounter%10;
 8000e9a:	4b45      	ldr	r3, [pc, #276]	; (8000fb0 <trafficLight_change+0x4c8>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	4b45      	ldr	r3, [pc, #276]	; (8000fb4 <trafficLight_change+0x4cc>)
 8000ea0:	fb83 1302 	smull	r1, r3, r3, r2
 8000ea4:	1099      	asrs	r1, r3, #2
 8000ea6:	17d3      	asrs	r3, r2, #31
 8000ea8:	1ac9      	subs	r1, r1, r3
 8000eaa:	460b      	mov	r3, r1
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	440b      	add	r3, r1
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	613b      	str	r3, [r7, #16]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!GRE:%d%d#\r", buffer1, buffer2), 1000);
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	4946      	ldr	r1, [pc, #280]	; (8000fd4 <trafficLight_change+0x4ec>)
 8000ebc:	483f      	ldr	r0, [pc, #252]	; (8000fbc <trafficLight_change+0x4d4>)
 8000ebe:	f003 f93d 	bl	800413c <siprintf>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eca:	493c      	ldr	r1, [pc, #240]	; (8000fbc <trafficLight_change+0x4d4>)
 8000ecc:	483c      	ldr	r0, [pc, #240]	; (8000fc0 <trafficLight_change+0x4d8>)
 8000ece:	f002 ff98 	bl	8003e02 <HAL_UART_Transmit>
			if(tempCounter > MAX_SEGMENT_VALUE){
 8000ed2:	4b37      	ldr	r3, [pc, #220]	; (8000fb0 <trafficLight_change+0x4c8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b63      	cmp	r3, #99	; 0x63
 8000ed8:	dd02      	ble.n	8000ee0 <trafficLight_change+0x3f8>
				tempCounter = 0;
 8000eda:	4b35      	ldr	r3, [pc, #212]	; (8000fb0 <trafficLight_change+0x4c8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
			state = CHANGE_MODE_GREEN;
 8000ee0:	4b38      	ldr	r3, [pc, #224]	; (8000fc4 <trafficLight_change+0x4dc>)
 8000ee2:	2208      	movs	r2, #8
 8000ee4:	701a      	strb	r2, [r3, #0]
		break;
 8000ee6:	e0d9      	b.n	800109c <trafficLight_change+0x5b4>
	case MODIFY_LONGPRESSED:
		if(scanFreqTimer_flag == 1){
 8000ee8:	4b3b      	ldr	r3, [pc, #236]	; (8000fd8 <trafficLight_change+0x4f0>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d10e      	bne.n	8000f0e <trafficLight_change+0x426>
			segmentIndexManual++;
 8000ef0:	4b3a      	ldr	r3, [pc, #232]	; (8000fdc <trafficLight_change+0x4f4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	4a39      	ldr	r2, [pc, #228]	; (8000fdc <trafficLight_change+0x4f4>)
 8000ef8:	6013      	str	r3, [r2, #0]
			if(segmentIndexManual >= SEGMENT_IN_A_ROW) segmentIndexManual = 0;
 8000efa:	4b38      	ldr	r3, [pc, #224]	; (8000fdc <trafficLight_change+0x4f4>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	dd02      	ble.n	8000f08 <trafficLight_change+0x420>
 8000f02:	4b36      	ldr	r3, [pc, #216]	; (8000fdc <trafficLight_change+0x4f4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
			setTimerScanFreq(DURATION_FOR_5HZ);
 8000f08:	20c8      	movs	r0, #200	; 0xc8
 8000f0a:	f000 fe0b 	bl	8001b24 <setTimerScanFreq>
		}
		if(modifyTimer_flag == 1){
 8000f0e:	4b34      	ldr	r3, [pc, #208]	; (8000fe0 <trafficLight_change+0x4f8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d10f      	bne.n	8000f36 <trafficLight_change+0x44e>
			tempCounter += 10;
 8000f16:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <trafficLight_change+0x4c8>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	330a      	adds	r3, #10
 8000f1c:	4a24      	ldr	r2, [pc, #144]	; (8000fb0 <trafficLight_change+0x4c8>)
 8000f1e:	6013      	str	r3, [r2, #0]
			if(tempCounter > MAX_SEGMENT_VALUE) {
 8000f20:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <trafficLight_change+0x4c8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b63      	cmp	r3, #99	; 0x63
 8000f26:	dd02      	ble.n	8000f2e <trafficLight_change+0x446>
				tempCounter = 0;
 8000f28:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <trafficLight_change+0x4c8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
			}
			setTimerModify(DURATION_1S);
 8000f2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f32:	f000 fda3 	bl	8001a7c <setTimerModify>
		}
		if(!is_button_pressed(BTN_MODIFY_INDEX)){
 8000f36:	2001      	movs	r0, #1
 8000f38:	f7ff fa30 	bl	800039c <is_button_pressed>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f040 80ae 	bne.w	80010a0 <trafficLight_change+0x5b8>
			if(isRedMode == 1) state = CHANGE_MODE_RED;
 8000f44:	4b19      	ldr	r3, [pc, #100]	; (8000fac <trafficLight_change+0x4c4>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d103      	bne.n	8000f54 <trafficLight_change+0x46c>
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <trafficLight_change+0x4dc>)
 8000f4e:	2206      	movs	r2, #6
 8000f50:	701a      	strb	r2, [r3, #0]
			else if(isYellowMode == 1) state = CHANGE_MODE_YELLOW;
			else if(isGreenMode == 1) state = CHANGE_MODE_GREEN;
		}

		break;
 8000f52:	e0a5      	b.n	80010a0 <trafficLight_change+0x5b8>
			else if(isYellowMode == 1) state = CHANGE_MODE_YELLOW;
 8000f54:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <trafficLight_change+0x4e0>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d103      	bne.n	8000f64 <trafficLight_change+0x47c>
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <trafficLight_change+0x4dc>)
 8000f5e:	2207      	movs	r2, #7
 8000f60:	701a      	strb	r2, [r3, #0]
		break;
 8000f62:	e09d      	b.n	80010a0 <trafficLight_change+0x5b8>
			else if(isGreenMode == 1) state = CHANGE_MODE_GREEN;
 8000f64:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <trafficLight_change+0x4e8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	f040 8099 	bne.w	80010a0 <trafficLight_change+0x5b8>
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <trafficLight_change+0x4dc>)
 8000f70:	2208      	movs	r2, #8
 8000f72:	701a      	strb	r2, [r3, #0]
		break;
 8000f74:	e094      	b.n	80010a0 <trafficLight_change+0x5b8>
	case SET_PRESSED:
		if(isRedMode == 1) counter_red = tempCounter * DIVISION_NUMBER;
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <trafficLight_change+0x4c4>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d108      	bne.n	8000f90 <trafficLight_change+0x4a8>
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <trafficLight_change+0x4c8>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f86:	fb02 f303 	mul.w	r3, r2, r3
 8000f8a:	4a16      	ldr	r2, [pc, #88]	; (8000fe4 <trafficLight_change+0x4fc>)
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	e039      	b.n	8001004 <trafficLight_change+0x51c>
		else if (isYellowMode == 1) counter_yellow = tempCounter * DIVISION_NUMBER;
 8000f90:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <trafficLight_change+0x4e0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d129      	bne.n	8000fec <trafficLight_change+0x504>
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <trafficLight_change+0x4c8>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fa0:	fb02 f303 	mul.w	r3, r2, r3
 8000fa4:	4a10      	ldr	r2, [pc, #64]	; (8000fe8 <trafficLight_change+0x500>)
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	e02c      	b.n	8001004 <trafficLight_change+0x51c>
 8000faa:	bf00      	nop
 8000fac:	2000012c 	.word	0x2000012c
 8000fb0:	2000013c 	.word	0x2000013c
 8000fb4:	66666667 	.word	0x66666667
 8000fb8:	08004a00 	.word	0x08004a00
 8000fbc:	200000ec 	.word	0x200000ec
 8000fc0:	200001f4 	.word	0x200001f4
 8000fc4:	20000140 	.word	0x20000140
 8000fc8:	20000128 	.word	0x20000128
 8000fcc:	08004a0c 	.word	0x08004a0c
 8000fd0:	2000014c 	.word	0x2000014c
 8000fd4:	08004a18 	.word	0x08004a18
 8000fd8:	20000264 	.word	0x20000264
 8000fdc:	20000124 	.word	0x20000124
 8000fe0:	2000025c 	.word	0x2000025c
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	20000004 	.word	0x20000004
		else if (isGreenMode == 1) counter_green = tempCounter * DIVISION_NUMBER;
 8000fec:	4b30      	ldr	r3, [pc, #192]	; (80010b0 <trafficLight_change+0x5c8>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d107      	bne.n	8001004 <trafficLight_change+0x51c>
 8000ff4:	4b2f      	ldr	r3, [pc, #188]	; (80010b4 <trafficLight_change+0x5cc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ffc:	fb02 f303 	mul.w	r3, r2, r3
 8001000:	4a2d      	ldr	r2, [pc, #180]	; (80010b8 <trafficLight_change+0x5d0>)
 8001002:	6013      	str	r3, [r2, #0]
		isRedMode = 0;
 8001004:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <trafficLight_change+0x5d4>)
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
		isYellowMode = 0;
 800100a:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <trafficLight_change+0x5d8>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
		isGreenMode = 0;
 8001010:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <trafficLight_change+0x5c8>)
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
		isInChange = 0;
 8001016:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <trafficLight_change+0x5dc>)
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
		scanFreqTimer_flag = 0;
 800101c:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <trafficLight_change+0x5e0>)
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
		tempCounter = 0;
 8001022:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <trafficLight_change+0x5cc>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
		clearTrafficDisplay();
 8001028:	f000 fa36 	bl	8001498 <clearTrafficDisplay>
		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 800102c:	2000      	movs	r0, #0
 800102e:	f7ff f981 	bl	8000334 <isPressedAndReleased>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d015      	beq.n	8001064 <trafficLight_change+0x57c>
			isInChange = 1;
 8001038:	4b22      	ldr	r3, [pc, #136]	; (80010c4 <trafficLight_change+0x5dc>)
 800103a:	2201      	movs	r2, #1
 800103c:	601a      	str	r2, [r3, #0]
			setTimerTriggerLed(DURATION_FOR_4HZ);
 800103e:	20fa      	movs	r0, #250	; 0xfa
 8001040:	f000 fd38 	bl	8001ab4 <setTimerTriggerLed>
			setTimerScanFreq(DURATION_FOR_5HZ);
 8001044:	20c8      	movs	r0, #200	; 0xc8
 8001046:	f000 fd6d 	bl	8001b24 <setTimerScanFreq>
			tempCounter = counter_red/DIVISION_NUMBER;
 800104a:	4b20      	ldr	r3, [pc, #128]	; (80010cc <trafficLight_change+0x5e4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a20      	ldr	r2, [pc, #128]	; (80010d0 <trafficLight_change+0x5e8>)
 8001050:	fb82 1203 	smull	r1, r2, r2, r3
 8001054:	1192      	asrs	r2, r2, #6
 8001056:	17db      	asrs	r3, r3, #31
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	4a16      	ldr	r2, [pc, #88]	; (80010b4 <trafficLight_change+0x5cc>)
 800105c:	6013      	str	r3, [r2, #0]
			state = CHANGE_MODE_RED;
 800105e:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <trafficLight_change+0x5ec>)
 8001060:	2206      	movs	r2, #6
 8001062:	701a      	strb	r2, [r3, #0]
		}
		if(waitTimer_flag == 1){
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <trafficLight_change+0x5f0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d11b      	bne.n	80010a4 <trafficLight_change+0x5bc>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!SET#\r"), 1000);
 800106c:	491b      	ldr	r1, [pc, #108]	; (80010dc <trafficLight_change+0x5f4>)
 800106e:	481c      	ldr	r0, [pc, #112]	; (80010e0 <trafficLight_change+0x5f8>)
 8001070:	f003 f864 	bl	800413c <siprintf>
 8001074:	4603      	mov	r3, r0
 8001076:	b29a      	uxth	r2, r3
 8001078:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107c:	4918      	ldr	r1, [pc, #96]	; (80010e0 <trafficLight_change+0x5f8>)
 800107e:	4819      	ldr	r0, [pc, #100]	; (80010e4 <trafficLight_change+0x5fc>)
 8001080:	f002 febf 	bl	8003e02 <HAL_UART_Transmit>
			state = IDLE;
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <trafficLight_change+0x5ec>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
		}
		break;
 800108a:	e00b      	b.n	80010a4 <trafficLight_change+0x5bc>
	default:
		break;
 800108c:	bf00      	nop
 800108e:	e00a      	b.n	80010a6 <trafficLight_change+0x5be>
		break;
 8001090:	bf00      	nop
 8001092:	e008      	b.n	80010a6 <trafficLight_change+0x5be>
		break;
 8001094:	bf00      	nop
 8001096:	e006      	b.n	80010a6 <trafficLight_change+0x5be>
		break;
 8001098:	bf00      	nop
 800109a:	e004      	b.n	80010a6 <trafficLight_change+0x5be>
		break;
 800109c:	bf00      	nop
 800109e:	e002      	b.n	80010a6 <trafficLight_change+0x5be>
		break;
 80010a0:	bf00      	nop
 80010a2:	e000      	b.n	80010a6 <trafficLight_change+0x5be>
		break;
 80010a4:	bf00      	nop
	}
}
 80010a6:	bf00      	nop
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2000014c 	.word	0x2000014c
 80010b4:	2000013c 	.word	0x2000013c
 80010b8:	20000008 	.word	0x20000008
 80010bc:	2000012c 	.word	0x2000012c
 80010c0:	20000128 	.word	0x20000128
 80010c4:	20000148 	.word	0x20000148
 80010c8:	20000264 	.word	0x20000264
 80010cc:	20000000 	.word	0x20000000
 80010d0:	10624dd3 	.word	0x10624dd3
 80010d4:	20000140 	.word	0x20000140
 80010d8:	20000268 	.word	0x20000268
 80010dc:	08004a24 	.word	0x08004a24
 80010e0:	200000ec 	.word	0x200000ec
 80010e4:	200001f4 	.word	0x200001f4

080010e8 <triggerLed>:

void triggerLed(){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	if(timerLed_flag == 1){
 80010ec:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <triggerLed+0xc0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d157      	bne.n	80011a4 <triggerLed+0xbc>
		if (isRedMode == 1 && isInChange == 1){
 80010f4:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <triggerLed+0xc4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d119      	bne.n	8001130 <triggerLed+0x48>
 80010fc:	4b2c      	ldr	r3, [pc, #176]	; (80011b0 <triggerLed+0xc8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d115      	bne.n	8001130 <triggerLed+0x48>
			//HAL_GPIO_WritePin(D2_RED_LED1_GPIO_Port, D2_RED_LED1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(D3_GREEN_LED1_GPIO_Port, D3_GREEN_LED1_Pin, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	2108      	movs	r1, #8
 8001108:	482a      	ldr	r0, [pc, #168]	; (80011b4 <triggerLed+0xcc>)
 800110a:	f001 fa8c 	bl	8002626 <HAL_GPIO_WritePin>
			//HAL_GPIO_WritePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	2110      	movs	r1, #16
 8001112:	4828      	ldr	r0, [pc, #160]	; (80011b4 <triggerLed+0xcc>)
 8001114:	f001 fa87 	bl	8002626 <HAL_GPIO_WritePin>

			HAL_GPIO_TogglePin(D2_RED_LED1_GPIO_Port, D2_RED_LED1_Pin);
 8001118:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800111c:	4826      	ldr	r0, [pc, #152]	; (80011b8 <triggerLed+0xd0>)
 800111e:	f001 fa9a 	bl	8002656 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin);
 8001122:	2120      	movs	r1, #32
 8001124:	4823      	ldr	r0, [pc, #140]	; (80011b4 <triggerLed+0xcc>)
 8001126:	f001 fa96 	bl	8002656 <HAL_GPIO_TogglePin>

			setTimerTriggerLed(DURATION_FOR_4HZ);
 800112a:	20fa      	movs	r0, #250	; 0xfa
 800112c:	f000 fcc2 	bl	8001ab4 <setTimerTriggerLed>
		}
		if (isYellowMode == 1 && isInChange == 1){
 8001130:	4b22      	ldr	r3, [pc, #136]	; (80011bc <triggerLed+0xd4>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d117      	bne.n	8001168 <triggerLed+0x80>
 8001138:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <triggerLed+0xc8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d113      	bne.n	8001168 <triggerLed+0x80>
			//HAL_GPIO_WritePin(D2_RED_LED1_GPIO_Port, D2_RED_LED1_Pin, GPIO_PIN_RESET);
			//HAL_GPIO_WritePin(D3_GREEN_LED1_GPIO_Port, D3_GREEN_LED1_Pin, GPIO_PIN_RESET);
			//HAL_GPIO_WritePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin, GPIO_PIN_RESET);
			//HAL_GPIO_WritePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin, GPIO_PIN_RESET);

			HAL_GPIO_TogglePin(D2_RED_LED1_GPIO_Port, D2_RED_LED1_Pin);
 8001140:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001144:	481c      	ldr	r0, [pc, #112]	; (80011b8 <triggerLed+0xd0>)
 8001146:	f001 fa86 	bl	8002656 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin);
 800114a:	2120      	movs	r1, #32
 800114c:	4819      	ldr	r0, [pc, #100]	; (80011b4 <triggerLed+0xcc>)
 800114e:	f001 fa82 	bl	8002656 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(D3_GREEN_LED1_GPIO_Port, D3_GREEN_LED1_Pin);
 8001152:	2108      	movs	r1, #8
 8001154:	4817      	ldr	r0, [pc, #92]	; (80011b4 <triggerLed+0xcc>)
 8001156:	f001 fa7e 	bl	8002656 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin);
 800115a:	2110      	movs	r1, #16
 800115c:	4815      	ldr	r0, [pc, #84]	; (80011b4 <triggerLed+0xcc>)
 800115e:	f001 fa7a 	bl	8002656 <HAL_GPIO_TogglePin>

			setTimerTriggerLed(DURATION_FOR_4HZ);
 8001162:	20fa      	movs	r0, #250	; 0xfa
 8001164:	f000 fca6 	bl	8001ab4 <setTimerTriggerLed>
		}
		if (isGreenMode == 1 && isInChange == 1){
 8001168:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <triggerLed+0xd8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d119      	bne.n	80011a4 <triggerLed+0xbc>
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <triggerLed+0xc8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d115      	bne.n	80011a4 <triggerLed+0xbc>
			HAL_GPIO_WritePin(D2_RED_LED1_GPIO_Port, D2_RED_LED1_Pin, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800117e:	480e      	ldr	r0, [pc, #56]	; (80011b8 <triggerLed+0xd0>)
 8001180:	f001 fa51 	bl	8002626 <HAL_GPIO_WritePin>
			//HAL_GPIO_WritePin(D3_GREEN_LED1_GPIO_Port, D3_GREEN_LED1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	2120      	movs	r1, #32
 8001188:	480a      	ldr	r0, [pc, #40]	; (80011b4 <triggerLed+0xcc>)
 800118a:	f001 fa4c 	bl	8002626 <HAL_GPIO_WritePin>
			//HAL_GPIO_WritePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin, GPIO_PIN_RESET);

			HAL_GPIO_TogglePin(D3_GREEN_LED1_GPIO_Port, D3_GREEN_LED1_Pin);
 800118e:	2108      	movs	r1, #8
 8001190:	4808      	ldr	r0, [pc, #32]	; (80011b4 <triggerLed+0xcc>)
 8001192:	f001 fa60 	bl	8002656 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin);
 8001196:	2110      	movs	r1, #16
 8001198:	4806      	ldr	r0, [pc, #24]	; (80011b4 <triggerLed+0xcc>)
 800119a:	f001 fa5c 	bl	8002656 <HAL_GPIO_TogglePin>

			setTimerTriggerLed(DURATION_FOR_4HZ);
 800119e:	20fa      	movs	r0, #250	; 0xfa
 80011a0:	f000 fc88 	bl	8001ab4 <setTimerTriggerLed>
		}
	}
}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000250 	.word	0x20000250
 80011ac:	2000012c 	.word	0x2000012c
 80011b0:	20000148 	.word	0x20000148
 80011b4:	40010c00 	.word	0x40010c00
 80011b8:	40010800 	.word	0x40010800
 80011bc:	20000128 	.word	0x20000128
 80011c0:	2000014c 	.word	0x2000014c

080011c4 <trafficLight_manual>:
#include "global.h"
#include "button.h"
#include "software_timer.h"
#include "led_segment_control.h"

void trafficLight_manual(){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	switch(state){
 80011c8:	4b73      	ldr	r3, [pc, #460]	; (8001398 <trafficLight_manual+0x1d4>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	3b0d      	subs	r3, #13
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	f200 80d7 	bhi.w	8001382 <trafficLight_manual+0x1be>
 80011d4:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <trafficLight_manual+0x18>)
 80011d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011da:	bf00      	nop
 80011dc:	080011ed 	.word	0x080011ed
 80011e0:	08001237 	.word	0x08001237
 80011e4:	080012bb 	.word	0x080012bb
 80011e8:	08001303 	.word	0x08001303
	case MANUAL_RED1_GREEN2:
		displayTrafficLight(RED_LIGHT, GREEN_LIGHT);
 80011ec:	2103      	movs	r1, #3
 80011ee:	2001      	movs	r0, #1
 80011f0:	f000 f8e6 	bl	80013c0 <displayTrafficLight>
		if(isPressedAndReleased(BTN_MODIFY_INDEX)){
 80011f4:	2001      	movs	r0, #1
 80011f6:	f7ff f89d 	bl	8000334 <isPressedAndReleased>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d007      	beq.n	8001210 <trafficLight_manual+0x4c>
			state = MANUAL_RED1_YELLOW2;
 8001200:	4b65      	ldr	r3, [pc, #404]	; (8001398 <trafficLight_manual+0x1d4>)
 8001202:	220e      	movs	r2, #14
 8001204:	701a      	strb	r2, [r3, #0]
			setTimerTraffic1(counter_yellow);
 8001206:	4b65      	ldr	r3, [pc, #404]	; (800139c <trafficLight_manual+0x1d8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f000 fbfe 	bl	8001a0c <setTimerTraffic1>
		}
		if(isPressedAndReleased(BTN_SET_INDEX)){
 8001210:	2002      	movs	r0, #2
 8001212:	f7ff f88f 	bl	8000334 <isPressedAndReleased>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	f000 80b4 	beq.w	8001386 <trafficLight_manual+0x1c2>
			isInAuto = 1;
 800121e:	4b60      	ldr	r3, [pc, #384]	; (80013a0 <trafficLight_manual+0x1dc>)
 8001220:	2201      	movs	r2, #1
 8001222:	601a      	str	r2, [r3, #0]
			state = MANUAL_RED1_YELLOW2;
 8001224:	4b5c      	ldr	r3, [pc, #368]	; (8001398 <trafficLight_manual+0x1d4>)
 8001226:	220e      	movs	r2, #14
 8001228:	701a      	strb	r2, [r3, #0]
			setTimerTraffic1(counter_yellow);
 800122a:	4b5c      	ldr	r3, [pc, #368]	; (800139c <trafficLight_manual+0x1d8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f000 fbec 	bl	8001a0c <setTimerTraffic1>
		}
		break;
 8001234:	e0a7      	b.n	8001386 <trafficLight_manual+0x1c2>
	case MANUAL_RED1_YELLOW2:
		displayTrafficLight(RED_LIGHT, YELLOW_LIGHT);
 8001236:	2102      	movs	r1, #2
 8001238:	2001      	movs	r0, #1
 800123a:	f000 f8c1 	bl	80013c0 <displayTrafficLight>
		if(isPressedAndReleased(BTN_SET_INDEX)){
 800123e:	2002      	movs	r0, #2
 8001240:	f7ff f878 	bl	8000334 <isPressedAndReleased>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d002      	beq.n	8001250 <trafficLight_manual+0x8c>
			isInAuto = 1;
 800124a:	4b55      	ldr	r3, [pc, #340]	; (80013a0 <trafficLight_manual+0x1dc>)
 800124c:	2201      	movs	r2, #1
 800124e:	601a      	str	r2, [r3, #0]
		}
		if(trafficTimer1_flag == 1 && isInAuto == 0){
 8001250:	4b54      	ldr	r3, [pc, #336]	; (80013a4 <trafficLight_manual+0x1e0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d107      	bne.n	8001268 <trafficLight_manual+0xa4>
 8001258:	4b51      	ldr	r3, [pc, #324]	; (80013a0 <trafficLight_manual+0x1dc>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d103      	bne.n	8001268 <trafficLight_manual+0xa4>
			state = MANUAL_GREEN1_RED2;
 8001260:	4b4d      	ldr	r3, [pc, #308]	; (8001398 <trafficLight_manual+0x1d4>)
 8001262:	220f      	movs	r2, #15
 8001264:	701a      	strb	r2, [r3, #0]
			segment1Counter = counter_green / DIVISION_NUMBER;
			segment2Counter = counter_red / DIVISION_NUMBER;
			state = AUTO_GREEN1_RED2;
			setTimerCounter1(DURATION_1S);
		}
		break;
 8001266:	e090      	b.n	800138a <trafficLight_manual+0x1c6>
		else if (trafficTimer1_flag == 1 && isInAuto == 1){
 8001268:	4b4e      	ldr	r3, [pc, #312]	; (80013a4 <trafficLight_manual+0x1e0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	f040 808c 	bne.w	800138a <trafficLight_manual+0x1c6>
 8001272:	4b4b      	ldr	r3, [pc, #300]	; (80013a0 <trafficLight_manual+0x1dc>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b01      	cmp	r3, #1
 8001278:	f040 8087 	bne.w	800138a <trafficLight_manual+0x1c6>
			isInManual = 0;
 800127c:	4b4a      	ldr	r3, [pc, #296]	; (80013a8 <trafficLight_manual+0x1e4>)
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
			segment1Counter = counter_green / DIVISION_NUMBER;
 8001282:	4b4a      	ldr	r3, [pc, #296]	; (80013ac <trafficLight_manual+0x1e8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a4a      	ldr	r2, [pc, #296]	; (80013b0 <trafficLight_manual+0x1ec>)
 8001288:	fb82 1203 	smull	r1, r2, r2, r3
 800128c:	1192      	asrs	r2, r2, #6
 800128e:	17db      	asrs	r3, r3, #31
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	4a48      	ldr	r2, [pc, #288]	; (80013b4 <trafficLight_manual+0x1f0>)
 8001294:	6013      	str	r3, [r2, #0]
			segment2Counter = counter_red / DIVISION_NUMBER;
 8001296:	4b48      	ldr	r3, [pc, #288]	; (80013b8 <trafficLight_manual+0x1f4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a45      	ldr	r2, [pc, #276]	; (80013b0 <trafficLight_manual+0x1ec>)
 800129c:	fb82 1203 	smull	r1, r2, r2, r3
 80012a0:	1192      	asrs	r2, r2, #6
 80012a2:	17db      	asrs	r3, r3, #31
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	4a45      	ldr	r2, [pc, #276]	; (80013bc <trafficLight_manual+0x1f8>)
 80012a8:	6013      	str	r3, [r2, #0]
			state = AUTO_GREEN1_RED2;
 80012aa:	4b3b      	ldr	r3, [pc, #236]	; (8001398 <trafficLight_manual+0x1d4>)
 80012ac:	2203      	movs	r2, #3
 80012ae:	701a      	strb	r2, [r3, #0]
			setTimerCounter1(DURATION_1S);
 80012b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b4:	f000 fc1a 	bl	8001aec <setTimerCounter1>
		break;
 80012b8:	e067      	b.n	800138a <trafficLight_manual+0x1c6>
	case MANUAL_GREEN1_RED2:
		displayTrafficLight(GREEN_LIGHT, RED_LIGHT);
 80012ba:	2101      	movs	r1, #1
 80012bc:	2003      	movs	r0, #3
 80012be:	f000 f87f 	bl	80013c0 <displayTrafficLight>
		if(isPressedAndReleased(BTN_SET_INDEX)){
 80012c2:	2002      	movs	r0, #2
 80012c4:	f7ff f836 	bl	8000334 <isPressedAndReleased>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00a      	beq.n	80012e4 <trafficLight_manual+0x120>
			isInAuto = 1;
 80012ce:	4b34      	ldr	r3, [pc, #208]	; (80013a0 <trafficLight_manual+0x1dc>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	601a      	str	r2, [r3, #0]
			state = MANUAL_YELLOW1_RED2;
 80012d4:	4b30      	ldr	r3, [pc, #192]	; (8001398 <trafficLight_manual+0x1d4>)
 80012d6:	2210      	movs	r2, #16
 80012d8:	701a      	strb	r2, [r3, #0]
			setTimerTraffic1(counter_yellow);
 80012da:	4b30      	ldr	r3, [pc, #192]	; (800139c <trafficLight_manual+0x1d8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 fb94 	bl	8001a0c <setTimerTraffic1>
		}
		if(isPressedAndReleased(BTN_MODIFY_INDEX)){
 80012e4:	2001      	movs	r0, #1
 80012e6:	f7ff f825 	bl	8000334 <isPressedAndReleased>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d04e      	beq.n	800138e <trafficLight_manual+0x1ca>
			state = MANUAL_YELLOW1_RED2;
 80012f0:	4b29      	ldr	r3, [pc, #164]	; (8001398 <trafficLight_manual+0x1d4>)
 80012f2:	2210      	movs	r2, #16
 80012f4:	701a      	strb	r2, [r3, #0]
			setTimerTraffic1(counter_yellow);
 80012f6:	4b29      	ldr	r3, [pc, #164]	; (800139c <trafficLight_manual+0x1d8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 fb86 	bl	8001a0c <setTimerTraffic1>
		}
		break;
 8001300:	e045      	b.n	800138e <trafficLight_manual+0x1ca>
	case MANUAL_YELLOW1_RED2:
		if(isPressedAndReleased(BTN_SET_INDEX)){
 8001302:	2002      	movs	r0, #2
 8001304:	f7ff f816 	bl	8000334 <isPressedAndReleased>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d002      	beq.n	8001314 <trafficLight_manual+0x150>
			isInAuto = 1;
 800130e:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <trafficLight_manual+0x1dc>)
 8001310:	2201      	movs	r2, #1
 8001312:	601a      	str	r2, [r3, #0]
		}
		displayTrafficLight(YELLOW_LIGHT, RED_LIGHT);
 8001314:	2101      	movs	r1, #1
 8001316:	2002      	movs	r0, #2
 8001318:	f000 f852 	bl	80013c0 <displayTrafficLight>
		if(trafficTimer1_flag == 1 && isInAuto == 0){
 800131c:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <trafficLight_manual+0x1e0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d107      	bne.n	8001334 <trafficLight_manual+0x170>
 8001324:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <trafficLight_manual+0x1dc>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d103      	bne.n	8001334 <trafficLight_manual+0x170>
			state = MANUAL_RED1_GREEN2;
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <trafficLight_manual+0x1d4>)
 800132e:	220d      	movs	r2, #13
 8001330:	701a      	strb	r2, [r3, #0]
			segment1Counter = counter_red / DIVISION_NUMBER;
			segment2Counter = counter_green / DIVISION_NUMBER;
			state = AUTO_RED1_GREEN2;
			setTimerCounter1(DURATION_1S);
		}
		break;
 8001332:	e02e      	b.n	8001392 <trafficLight_manual+0x1ce>
		else if (trafficTimer1_flag == 1 && isInAuto == 1){
 8001334:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <trafficLight_manual+0x1e0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d12a      	bne.n	8001392 <trafficLight_manual+0x1ce>
 800133c:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <trafficLight_manual+0x1dc>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d126      	bne.n	8001392 <trafficLight_manual+0x1ce>
			isInManual = 0;
 8001344:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <trafficLight_manual+0x1e4>)
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
			segment1Counter = counter_red / DIVISION_NUMBER;
 800134a:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <trafficLight_manual+0x1f4>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a18      	ldr	r2, [pc, #96]	; (80013b0 <trafficLight_manual+0x1ec>)
 8001350:	fb82 1203 	smull	r1, r2, r2, r3
 8001354:	1192      	asrs	r2, r2, #6
 8001356:	17db      	asrs	r3, r3, #31
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	4a16      	ldr	r2, [pc, #88]	; (80013b4 <trafficLight_manual+0x1f0>)
 800135c:	6013      	str	r3, [r2, #0]
			segment2Counter = counter_green / DIVISION_NUMBER;
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <trafficLight_manual+0x1e8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a13      	ldr	r2, [pc, #76]	; (80013b0 <trafficLight_manual+0x1ec>)
 8001364:	fb82 1203 	smull	r1, r2, r2, r3
 8001368:	1192      	asrs	r2, r2, #6
 800136a:	17db      	asrs	r3, r3, #31
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	4a13      	ldr	r2, [pc, #76]	; (80013bc <trafficLight_manual+0x1f8>)
 8001370:	6013      	str	r3, [r2, #0]
			state = AUTO_RED1_GREEN2;
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <trafficLight_manual+0x1d4>)
 8001374:	2201      	movs	r2, #1
 8001376:	701a      	strb	r2, [r3, #0]
			setTimerCounter1(DURATION_1S);
 8001378:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800137c:	f000 fbb6 	bl	8001aec <setTimerCounter1>
		break;
 8001380:	e007      	b.n	8001392 <trafficLight_manual+0x1ce>
	default:
		break;
 8001382:	bf00      	nop
 8001384:	e006      	b.n	8001394 <trafficLight_manual+0x1d0>
		break;
 8001386:	bf00      	nop
 8001388:	e004      	b.n	8001394 <trafficLight_manual+0x1d0>
		break;
 800138a:	bf00      	nop
 800138c:	e002      	b.n	8001394 <trafficLight_manual+0x1d0>
		break;
 800138e:	bf00      	nop
 8001390:	e000      	b.n	8001394 <trafficLight_manual+0x1d0>
		break;
 8001392:	bf00      	nop
	}
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000140 	.word	0x20000140
 800139c:	20000004 	.word	0x20000004
 80013a0:	20000144 	.word	0x20000144
 80013a4:	20000274 	.word	0x20000274
 80013a8:	20000120 	.word	0x20000120
 80013ac:	20000008 	.word	0x20000008
 80013b0:	10624dd3 	.word	0x10624dd3
 80013b4:	20000130 	.word	0x20000130
 80013b8:	20000000 	.word	0x20000000
 80013bc:	20000138 	.word	0x20000138

080013c0 <displayTrafficLight>:

#include "led_segment_control.h"
#include "main.h"
#include "global.h"
#include "software_timer.h"
void displayTrafficLight(int light1, int light2){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
	switch(light1){
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	d021      	beq.n	8001414 <displayTrafficLight+0x54>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b03      	cmp	r3, #3
 80013d4:	dc2a      	bgt.n	800142c <displayTrafficLight+0x6c>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d003      	beq.n	80013e4 <displayTrafficLight+0x24>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d00c      	beq.n	80013fc <displayTrafficLight+0x3c>
 80013e2:	e023      	b.n	800142c <displayTrafficLight+0x6c>
	case RED_LIGHT:
		HAL_GPIO_WritePin(D2_RED_LED1_GPIO_Port, D2_RED_LED1_Pin, GPIO_PIN_SET);
 80013e4:	2201      	movs	r2, #1
 80013e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ea:	4829      	ldr	r0, [pc, #164]	; (8001490 <displayTrafficLight+0xd0>)
 80013ec:	f001 f91b 	bl	8002626 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GREEN_LED1_GPIO_Port, D3_GREEN_LED1_Pin, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2108      	movs	r1, #8
 80013f4:	4827      	ldr	r0, [pc, #156]	; (8001494 <displayTrafficLight+0xd4>)
 80013f6:	f001 f916 	bl	8002626 <HAL_GPIO_WritePin>
		break;
 80013fa:	e017      	b.n	800142c <displayTrafficLight+0x6c>
	case YELLOW_LIGHT:
		HAL_GPIO_WritePin(D2_RED_LED1_GPIO_Port, D2_RED_LED1_Pin, GPIO_PIN_SET);
 80013fc:	2201      	movs	r2, #1
 80013fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001402:	4823      	ldr	r0, [pc, #140]	; (8001490 <displayTrafficLight+0xd0>)
 8001404:	f001 f90f 	bl	8002626 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GREEN_LED1_GPIO_Port, D3_GREEN_LED1_Pin, GPIO_PIN_SET);
 8001408:	2201      	movs	r2, #1
 800140a:	2108      	movs	r1, #8
 800140c:	4821      	ldr	r0, [pc, #132]	; (8001494 <displayTrafficLight+0xd4>)
 800140e:	f001 f90a 	bl	8002626 <HAL_GPIO_WritePin>
		break;
 8001412:	e00b      	b.n	800142c <displayTrafficLight+0x6c>
	case GREEN_LIGHT:
		HAL_GPIO_WritePin(D2_RED_LED1_GPIO_Port, D2_RED_LED1_Pin, GPIO_PIN_RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800141a:	481d      	ldr	r0, [pc, #116]	; (8001490 <displayTrafficLight+0xd0>)
 800141c:	f001 f903 	bl	8002626 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GREEN_LED1_GPIO_Port, D3_GREEN_LED1_Pin, GPIO_PIN_SET);
 8001420:	2201      	movs	r2, #1
 8001422:	2108      	movs	r1, #8
 8001424:	481b      	ldr	r0, [pc, #108]	; (8001494 <displayTrafficLight+0xd4>)
 8001426:	f001 f8fe 	bl	8002626 <HAL_GPIO_WritePin>
		break;
 800142a:	bf00      	nop
	}
	switch(light2){
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	2b03      	cmp	r3, #3
 8001430:	d01f      	beq.n	8001472 <displayTrafficLight+0xb2>
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	2b03      	cmp	r3, #3
 8001436:	dc27      	bgt.n	8001488 <displayTrafficLight+0xc8>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d003      	beq.n	8001446 <displayTrafficLight+0x86>
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	2b02      	cmp	r3, #2
 8001442:	d00b      	beq.n	800145c <displayTrafficLight+0x9c>
	case GREEN_LIGHT:
		HAL_GPIO_WritePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin, GPIO_PIN_SET);
		break;
	}
}
 8001444:	e020      	b.n	8001488 <displayTrafficLight+0xc8>
		HAL_GPIO_WritePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin, GPIO_PIN_SET);
 8001446:	2201      	movs	r2, #1
 8001448:	2120      	movs	r1, #32
 800144a:	4812      	ldr	r0, [pc, #72]	; (8001494 <displayTrafficLight+0xd4>)
 800144c:	f001 f8eb 	bl	8002626 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	2110      	movs	r1, #16
 8001454:	480f      	ldr	r0, [pc, #60]	; (8001494 <displayTrafficLight+0xd4>)
 8001456:	f001 f8e6 	bl	8002626 <HAL_GPIO_WritePin>
		break;
 800145a:	e015      	b.n	8001488 <displayTrafficLight+0xc8>
		HAL_GPIO_WritePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin, GPIO_PIN_SET);
 800145c:	2201      	movs	r2, #1
 800145e:	2120      	movs	r1, #32
 8001460:	480c      	ldr	r0, [pc, #48]	; (8001494 <displayTrafficLight+0xd4>)
 8001462:	f001 f8e0 	bl	8002626 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin, GPIO_PIN_SET);
 8001466:	2201      	movs	r2, #1
 8001468:	2110      	movs	r1, #16
 800146a:	480a      	ldr	r0, [pc, #40]	; (8001494 <displayTrafficLight+0xd4>)
 800146c:	f001 f8db 	bl	8002626 <HAL_GPIO_WritePin>
		break;
 8001470:	e00a      	b.n	8001488 <displayTrafficLight+0xc8>
		HAL_GPIO_WritePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin, GPIO_PIN_RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	2120      	movs	r1, #32
 8001476:	4807      	ldr	r0, [pc, #28]	; (8001494 <displayTrafficLight+0xd4>)
 8001478:	f001 f8d5 	bl	8002626 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin, GPIO_PIN_SET);
 800147c:	2201      	movs	r2, #1
 800147e:	2110      	movs	r1, #16
 8001480:	4804      	ldr	r0, [pc, #16]	; (8001494 <displayTrafficLight+0xd4>)
 8001482:	f001 f8d0 	bl	8002626 <HAL_GPIO_WritePin>
		break;
 8001486:	bf00      	nop
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40010800 	.word	0x40010800
 8001494:	40010c00 	.word	0x40010c00

08001498 <clearTrafficDisplay>:

void clearTrafficDisplay(){
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_RED_LED1_GPIO_Port, D2_RED_LED1_Pin, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014a2:	480a      	ldr	r0, [pc, #40]	; (80014cc <clearTrafficDisplay+0x34>)
 80014a4:	f001 f8bf 	bl	8002626 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GREEN_LED1_GPIO_Port, D3_GREEN_LED1_Pin, GPIO_PIN_RESET);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2108      	movs	r1, #8
 80014ac:	4808      	ldr	r0, [pc, #32]	; (80014d0 <clearTrafficDisplay+0x38>)
 80014ae:	f001 f8ba 	bl	8002626 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2120      	movs	r1, #32
 80014b6:	4806      	ldr	r0, [pc, #24]	; (80014d0 <clearTrafficDisplay+0x38>)
 80014b8:	f001 f8b5 	bl	8002626 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin, GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	2110      	movs	r1, #16
 80014c0:	4803      	ldr	r0, [pc, #12]	; (80014d0 <clearTrafficDisplay+0x38>)
 80014c2:	f001 f8b0 	bl	8002626 <HAL_GPIO_WritePin>
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40010800 	.word	0x40010800
 80014d0:	40010c00 	.word	0x40010c00

080014d4 <displayPedestrianLight>:

void displayPedestrianLight(int status){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	switch(status){
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d023      	beq.n	800152a <displayPedestrianLight+0x56>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b06      	cmp	r3, #6
 80014e6:	dc2c      	bgt.n	8001542 <displayPedestrianLight+0x6e>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	d003      	beq.n	80014f6 <displayPedestrianLight+0x22>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b05      	cmp	r3, #5
 80014f2:	d00d      	beq.n	8001510 <displayPedestrianLight+0x3c>
 80014f4:	e025      	b.n	8001542 <displayPedestrianLight+0x6e>
	case PEDESTRIAN_LIGHT_GO:
		HAL_GPIO_WritePin(D6_PED_LIGHT1_GPIO_Port, D6_PED_LIGHT1_Pin, GPIO_PIN_SET);
 80014f6:	2201      	movs	r2, #1
 80014f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014fc:	4819      	ldr	r0, [pc, #100]	; (8001564 <displayPedestrianLight+0x90>)
 80014fe:	f001 f892 	bl	8002626 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_PED_LIGHT2_GPIO_Port, D7_PED_LIGHT2_Pin, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001508:	4817      	ldr	r0, [pc, #92]	; (8001568 <displayPedestrianLight+0x94>)
 800150a:	f001 f88c 	bl	8002626 <HAL_GPIO_WritePin>
		break;
 800150e:	e025      	b.n	800155c <displayPedestrianLight+0x88>
	case PEDESTRIAN_LIGHT_STOP:
		HAL_GPIO_WritePin(D6_PED_LIGHT1_GPIO_Port, D6_PED_LIGHT1_Pin, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001516:	4813      	ldr	r0, [pc, #76]	; (8001564 <displayPedestrianLight+0x90>)
 8001518:	f001 f885 	bl	8002626 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_PED_LIGHT2_GPIO_Port, D7_PED_LIGHT2_Pin, GPIO_PIN_SET);
 800151c:	2201      	movs	r2, #1
 800151e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001522:	4811      	ldr	r0, [pc, #68]	; (8001568 <displayPedestrianLight+0x94>)
 8001524:	f001 f87f 	bl	8002626 <HAL_GPIO_WritePin>
		break;
 8001528:	e018      	b.n	800155c <displayPedestrianLight+0x88>
	case PEDESTRIAN_LIGHT_OFF:
		HAL_GPIO_WritePin(D6_PED_LIGHT1_GPIO_Port, D6_PED_LIGHT1_Pin, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001530:	480c      	ldr	r0, [pc, #48]	; (8001564 <displayPedestrianLight+0x90>)
 8001532:	f001 f878 	bl	8002626 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_PED_LIGHT2_GPIO_Port, D7_PED_LIGHT2_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	f44f 7180 	mov.w	r1, #256	; 0x100
 800153c:	480a      	ldr	r0, [pc, #40]	; (8001568 <displayPedestrianLight+0x94>)
 800153e:	f001 f872 	bl	8002626 <HAL_GPIO_WritePin>
	default:
		HAL_GPIO_WritePin(D6_PED_LIGHT1_GPIO_Port, D6_PED_LIGHT1_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001548:	4806      	ldr	r0, [pc, #24]	; (8001564 <displayPedestrianLight+0x90>)
 800154a:	f001 f86c 	bl	8002626 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_PED_LIGHT2_GPIO_Port, D7_PED_LIGHT2_Pin, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001554:	4804      	ldr	r0, [pc, #16]	; (8001568 <displayPedestrianLight+0x94>)
 8001556:	f001 f866 	bl	8002626 <HAL_GPIO_WritePin>
		break;
 800155a:	bf00      	nop
	}
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40010c00 	.word	0x40010c00
 8001568:	40010800 	.word	0x40010800

0800156c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001570:	f000 fd4e 	bl	8002010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001574:	f000 f826 	bl	80015c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001578:	f000 f936 	bl	80017e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800157c:	f000 f864 	bl	8001648 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001580:	f000 f8ae 	bl	80016e0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001584:	f000 f906 	bl	8001794 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001588:	480a      	ldr	r0, [pc, #40]	; (80015b4 <main+0x48>)
 800158a:	f001 fce7 	bl	8002f5c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800158e:	2100      	movs	r1, #0
 8001590:	4809      	ldr	r0, [pc, #36]	; (80015b8 <main+0x4c>)
 8001592:	f001 fd85 	bl	80030a0 <HAL_TIM_PWM_Start>
  buzzer_init(TIM3);
 8001596:	4809      	ldr	r0, [pc, #36]	; (80015bc <main+0x50>)
 8001598:	f000 f9a8 	bl	80018ec <buzzer_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //setTimerTraffic1(10);
  state = IDLE;
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <main+0x54>)
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  trafficLight_automatic();
 80015a2:	f7fe ff2f 	bl	8000404 <trafficLight_automatic>
	  trafficLight_change();
 80015a6:	f7ff fa9f 	bl	8000ae8 <trafficLight_change>
	  trafficLight_manual();
 80015aa:	f7ff fe0b 	bl	80011c4 <trafficLight_manual>
	  triggerLed();
 80015ae:	f7ff fd9b 	bl	80010e8 <triggerLed>
	  trafficLight_automatic();
 80015b2:	e7f6      	b.n	80015a2 <main+0x36>
 80015b4:	200001ac 	.word	0x200001ac
 80015b8:	20000164 	.word	0x20000164
 80015bc:	40000400 	.word	0x40000400
 80015c0:	20000140 	.word	0x20000140

080015c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b090      	sub	sp, #64	; 0x40
 80015c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ca:	f107 0318 	add.w	r3, r7, #24
 80015ce:	2228      	movs	r2, #40	; 0x28
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f002 fdaa 	bl	800412c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015e6:	2302      	movs	r3, #2
 80015e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ea:	2301      	movs	r3, #1
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ee:	2310      	movs	r3, #16
 80015f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f2:	2302      	movs	r3, #2
 80015f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80015f6:	2300      	movs	r3, #0
 80015f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80015fa:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80015fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001600:	f107 0318 	add.w	r3, r7, #24
 8001604:	4618      	mov	r0, r3
 8001606:	f001 f83f 	bl	8002688 <HAL_RCC_OscConfig>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001610:	f000 f966 	bl	80018e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001614:	230f      	movs	r3, #15
 8001616:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001618:	2302      	movs	r3, #2
 800161a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001624:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	2102      	movs	r1, #2
 800162e:	4618      	mov	r0, r3
 8001630:	f001 faaa 	bl	8002b88 <HAL_RCC_ClockConfig>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800163a:	f000 f951 	bl	80018e0 <Error_Handler>
  }
}
 800163e:	bf00      	nop
 8001640:	3740      	adds	r7, #64	; 0x40
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164e:	f107 0308 	add.w	r3, r7, #8
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165c:	463b      	mov	r3, r7
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001664:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <MX_TIM2_Init+0x94>)
 8001666:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800166a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800166c:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <MX_TIM2_Init+0x94>)
 800166e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001672:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <MX_TIM2_Init+0x94>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 800167a:	4b18      	ldr	r3, [pc, #96]	; (80016dc <MX_TIM2_Init+0x94>)
 800167c:	224f      	movs	r2, #79	; 0x4f
 800167e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001680:	4b16      	ldr	r3, [pc, #88]	; (80016dc <MX_TIM2_Init+0x94>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <MX_TIM2_Init+0x94>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800168c:	4813      	ldr	r0, [pc, #76]	; (80016dc <MX_TIM2_Init+0x94>)
 800168e:	f001 fc15 	bl	8002ebc <HAL_TIM_Base_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001698:	f000 f922 	bl	80018e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800169c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016a2:	f107 0308 	add.w	r3, r7, #8
 80016a6:	4619      	mov	r1, r3
 80016a8:	480c      	ldr	r0, [pc, #48]	; (80016dc <MX_TIM2_Init+0x94>)
 80016aa:	f001 ff61 	bl	8003570 <HAL_TIM_ConfigClockSource>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016b4:	f000 f914 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b8:	2300      	movs	r3, #0
 80016ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016c0:	463b      	mov	r3, r7
 80016c2:	4619      	mov	r1, r3
 80016c4:	4805      	ldr	r0, [pc, #20]	; (80016dc <MX_TIM2_Init+0x94>)
 80016c6:	f002 fadf 	bl	8003c88 <HAL_TIMEx_MasterConfigSynchronization>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016d0:	f000 f906 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016d4:	bf00      	nop
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	200001ac 	.word	0x200001ac

080016e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e6:	f107 0320 	add.w	r3, r7, #32
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
 80016fc:	611a      	str	r2, [r3, #16]
 80016fe:	615a      	str	r2, [r3, #20]
 8001700:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001702:	4b22      	ldr	r3, [pc, #136]	; (800178c <MX_TIM3_Init+0xac>)
 8001704:	4a22      	ldr	r2, [pc, #136]	; (8001790 <MX_TIM3_Init+0xb0>)
 8001706:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001708:	4b20      	ldr	r3, [pc, #128]	; (800178c <MX_TIM3_Init+0xac>)
 800170a:	223f      	movs	r2, #63	; 0x3f
 800170c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170e:	4b1f      	ldr	r3, [pc, #124]	; (800178c <MX_TIM3_Init+0xac>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001714:	4b1d      	ldr	r3, [pc, #116]	; (800178c <MX_TIM3_Init+0xac>)
 8001716:	f240 32e7 	movw	r2, #999	; 0x3e7
 800171a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171c:	4b1b      	ldr	r3, [pc, #108]	; (800178c <MX_TIM3_Init+0xac>)
 800171e:	2200      	movs	r2, #0
 8001720:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001722:	4b1a      	ldr	r3, [pc, #104]	; (800178c <MX_TIM3_Init+0xac>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001728:	4818      	ldr	r0, [pc, #96]	; (800178c <MX_TIM3_Init+0xac>)
 800172a:	f001 fc69 	bl	8003000 <HAL_TIM_PWM_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001734:	f000 f8d4 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001740:	f107 0320 	add.w	r3, r7, #32
 8001744:	4619      	mov	r1, r3
 8001746:	4811      	ldr	r0, [pc, #68]	; (800178c <MX_TIM3_Init+0xac>)
 8001748:	f002 fa9e 	bl	8003c88 <HAL_TIMEx_MasterConfigSynchronization>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001752:	f000 f8c5 	bl	80018e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001756:	2360      	movs	r3, #96	; 0x60
 8001758:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	2200      	movs	r2, #0
 800176a:	4619      	mov	r1, r3
 800176c:	4807      	ldr	r0, [pc, #28]	; (800178c <MX_TIM3_Init+0xac>)
 800176e:	f001 fe41 	bl	80033f4 <HAL_TIM_PWM_ConfigChannel>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001778:	f000 f8b2 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800177c:	4803      	ldr	r0, [pc, #12]	; (800178c <MX_TIM3_Init+0xac>)
 800177e:	f000 fb37 	bl	8001df0 <HAL_TIM_MspPostInit>

}
 8001782:	bf00      	nop
 8001784:	3728      	adds	r7, #40	; 0x28
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000164 	.word	0x20000164
 8001790:	40000400 	.word	0x40000400

08001794 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 800179a:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <MX_USART2_UART_Init+0x50>)
 800179c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017ba:	220c      	movs	r2, #12
 80017bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017cc:	f002 facc 	bl	8003d68 <HAL_UART_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017d6:	f000 f883 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200001f4 	.word	0x200001f4
 80017e4:	40004400 	.word	0x40004400

080017e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ee:	f107 0308 	add.w	r3, r7, #8
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fc:	4b2e      	ldr	r3, [pc, #184]	; (80018b8 <MX_GPIO_Init+0xd0>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	4a2d      	ldr	r2, [pc, #180]	; (80018b8 <MX_GPIO_Init+0xd0>)
 8001802:	f043 0304 	orr.w	r3, r3, #4
 8001806:	6193      	str	r3, [r2, #24]
 8001808:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <MX_GPIO_Init+0xd0>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001814:	4b28      	ldr	r3, [pc, #160]	; (80018b8 <MX_GPIO_Init+0xd0>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4a27      	ldr	r2, [pc, #156]	; (80018b8 <MX_GPIO_Init+0xd0>)
 800181a:	f043 0308 	orr.w	r3, r3, #8
 800181e:	6193      	str	r3, [r2, #24]
 8001820:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <MX_GPIO_Init+0xd0>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	603b      	str	r3, [r7, #0]
 800182a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PED_LIGHT1_Pin|D3_GREEN_LED1_Pin|D5_GREEN_LED2_Pin|D4_RED_LED_2_Pin, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001832:	4822      	ldr	r0, [pc, #136]	; (80018bc <MX_GPIO_Init+0xd4>)
 8001834:	f000 fef7 	bl	8002626 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_PED_LIGHT2_Pin|D2_RED_LED1_Pin, GPIO_PIN_RESET);
 8001838:	2200      	movs	r2, #0
 800183a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800183e:	4820      	ldr	r0, [pc, #128]	; (80018c0 <MX_GPIO_Init+0xd8>)
 8001840:	f000 fef1 	bl	8002626 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_BTN_PED_Pin A1_BTN_SELECT_Pin A2_BTN_MODIFY_Pin */
  GPIO_InitStruct.Pin = A0_BTN_PED_Pin|A1_BTN_SELECT_Pin|A2_BTN_MODIFY_Pin;
 8001844:	2313      	movs	r3, #19
 8001846:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001848:	2300      	movs	r3, #0
 800184a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800184c:	2301      	movs	r3, #1
 800184e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001850:	f107 0308 	add.w	r3, r7, #8
 8001854:	4619      	mov	r1, r3
 8001856:	481a      	ldr	r0, [pc, #104]	; (80018c0 <MX_GPIO_Init+0xd8>)
 8001858:	f000 fd4a 	bl	80022f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_BTN_SET_Pin */
  GPIO_InitStruct.Pin = A3_BTN_SET_Pin;
 800185c:	2301      	movs	r3, #1
 800185e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001864:	2301      	movs	r3, #1
 8001866:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_BTN_SET_GPIO_Port, &GPIO_InitStruct);
 8001868:	f107 0308 	add.w	r3, r7, #8
 800186c:	4619      	mov	r1, r3
 800186e:	4813      	ldr	r0, [pc, #76]	; (80018bc <MX_GPIO_Init+0xd4>)
 8001870:	f000 fd3e 	bl	80022f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PED_LIGHT1_Pin D3_GREEN_LED1_Pin D5_GREEN_LED2_Pin D4_RED_LED_2_Pin */
  GPIO_InitStruct.Pin = D6_PED_LIGHT1_Pin|D3_GREEN_LED1_Pin|D5_GREEN_LED2_Pin|D4_RED_LED_2_Pin;
 8001874:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001878:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187a:	2301      	movs	r3, #1
 800187c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2302      	movs	r3, #2
 8001884:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001886:	f107 0308 	add.w	r3, r7, #8
 800188a:	4619      	mov	r1, r3
 800188c:	480b      	ldr	r0, [pc, #44]	; (80018bc <MX_GPIO_Init+0xd4>)
 800188e:	f000 fd2f 	bl	80022f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_PED_LIGHT2_Pin D2_RED_LED1_Pin */
  GPIO_InitStruct.Pin = D7_PED_LIGHT2_Pin|D2_RED_LED1_Pin;
 8001892:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001896:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2302      	movs	r3, #2
 80018a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a4:	f107 0308 	add.w	r3, r7, #8
 80018a8:	4619      	mov	r1, r3
 80018aa:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_GPIO_Init+0xd8>)
 80018ac:	f000 fd20 	bl	80022f0 <HAL_GPIO_Init>

}
 80018b0:	bf00      	nop
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40010c00 	.word	0x40010c00
 80018c0:	40010800 	.word	0x40010800

080018c4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	buzzer_run();
 80018cc:	f000 f85c 	bl	8001988 <buzzer_run>
	readKeyInput();
 80018d0:	f7fe fc3c 	bl	800014c <readKeyInput>
	timer_run();
 80018d4:	f000 f95e 	bl	8001b94 <timer_run>
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e4:	b672      	cpsid	i
}
 80018e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <Error_Handler+0x8>
	...

080018ec <buzzer_init>:
int signal = 1;
uint8_t idx = 0;
uint16_t beep[3] = {1,1,1};
uint32_t scale = 0;

void buzzer_init(TIM_TypeDef *tim){
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	scale = tim->PSC;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	4a04      	ldr	r2, [pc, #16]	; (800190c <buzzer_init+0x20>)
 80018fa:	6013      	str	r3, [r2, #0]
	setTimerBuzzer(10);
 80018fc:	200a      	movs	r0, #10
 80018fe:	f000 f92d 	bl	8001b5c <setTimerBuzzer>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200000bc 	.word	0x200000bc

08001910 <buzzer_sound>:
		NOTE_B5,NOTE_B5,0,NOTE_B5, //4
		NOTE_CS6,NOTE_D6,0, NOTE_G5, //4
		NOTE_FS5, NOTE_F5, NOTE_D6 , NOTE_AS5, NOTE_B5, NOTE_B5//6
};

void buzzer_sound(TIM_HandleTypeDef htim ,int volume){
 8001910:	b084      	sub	sp, #16
 8001912:	b580      	push	{r7, lr}
 8001914:	af00      	add	r7, sp, #0
 8001916:	f107 0c08 	add.w	ip, r7, #8
 800191a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		TIM_CCxChannelCmd(TIM3, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800191e:	2201      	movs	r2, #1
 8001920:	2100      	movs	r1, #0
 8001922:	4816      	ldr	r0, [pc, #88]	; (800197c <buzzer_sound+0x6c>)
 8001924:	f002 f98c 	bl	8003c40 <TIM_CCxChannelCmd>
		__HAL_TIM_SET_COMPARE(&htim,TIM_CHANNEL_1,volume + 20*idx);
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <buzzer_sound+0x70>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	461a      	mov	r2, r3
 8001938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800193a:	441a      	add	r2, r3
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	635a      	str	r2, [r3, #52]	; 0x34
		// TIM3->PSC = 64000/dio[i%72];// melody[i%3];
		TIM3->PSC = (TIM3->PSC + 1)%63 + 20;// melody[i%3];
 8001940:	4b0e      	ldr	r3, [pc, #56]	; (800197c <buzzer_sound+0x6c>)
 8001942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001944:	1c59      	adds	r1, r3, #1
 8001946:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <buzzer_sound+0x74>)
 8001948:	fba3 2301 	umull	r2, r3, r3, r1
 800194c:	1aca      	subs	r2, r1, r3
 800194e:	0852      	lsrs	r2, r2, #1
 8001950:	4413      	add	r3, r2
 8001952:	095a      	lsrs	r2, r3, #5
 8001954:	4613      	mov	r3, r2
 8001956:	019b      	lsls	r3, r3, #6
 8001958:	1a9b      	subs	r3, r3, r2
 800195a:	1aca      	subs	r2, r1, r3
 800195c:	4907      	ldr	r1, [pc, #28]	; (800197c <buzzer_sound+0x6c>)
 800195e:	f102 0314 	add.w	r3, r2, #20
 8001962:	628b      	str	r3, [r1, #40]	; 0x28
		idx++;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <buzzer_sound+0x70>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	3301      	adds	r3, #1
 800196a:	b2da      	uxtb	r2, r3
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <buzzer_sound+0x70>)
 800196e:	701a      	strb	r2, [r3, #0]
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001978:	b004      	add	sp, #16
 800197a:	4770      	bx	lr
 800197c:	40000400 	.word	0x40000400
 8001980:	200000b8 	.word	0x200000b8
 8001984:	04104105 	.word	0x04104105

08001988 <buzzer_run>:

void buzzer_run(){
 8001988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198a:	b091      	sub	sp, #68	; 0x44
 800198c:	af10      	add	r7, sp, #64	; 0x40
	if(buzzerTimer_flag == 1){
 800198e:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <buzzer_run+0x6c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d12a      	bne.n	80019ec <buzzer_run+0x64>
		if (buzzer_warning == 1) buzzer_sound(htim3, 40);
 8001996:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <buzzer_run+0x70>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d113      	bne.n	80019c6 <buzzer_run+0x3e>
 800199e:	4e17      	ldr	r6, [pc, #92]	; (80019fc <buzzer_run+0x74>)
 80019a0:	2328      	movs	r3, #40	; 0x28
 80019a2:	930e      	str	r3, [sp, #56]	; 0x38
 80019a4:	466d      	mov	r5, sp
 80019a6:	f106 0410 	add.w	r4, r6, #16
 80019aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80019be:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80019c2:	f7ff ffa5 	bl	8001910 <buzzer_sound>
		if (buzzer_warning == 0){
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <buzzer_run+0x70>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10b      	bne.n	80019e6 <buzzer_run+0x5e>
			TIM_CCxChannelCmd(TIM3, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	480b      	ldr	r0, [pc, #44]	; (8001a00 <buzzer_run+0x78>)
 80019d4:	f002 f934 	bl	8003c40 <TIM_CCxChannelCmd>
			idx = 0;
 80019d8:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <buzzer_run+0x7c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
			TIM3->PSC = scale;
 80019de:	4a08      	ldr	r2, [pc, #32]	; (8001a00 <buzzer_run+0x78>)
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <buzzer_run+0x80>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6293      	str	r3, [r2, #40]	; 0x28
		}
		setTimerBuzzer(170);
 80019e6:	20aa      	movs	r0, #170	; 0xaa
 80019e8:	f000 f8b8 	bl	8001b5c <setTimerBuzzer>
	}
}
 80019ec:	bf00      	nop
 80019ee:	3704      	adds	r7, #4
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019f4:	20000278 	.word	0x20000278
 80019f8:	200000b4 	.word	0x200000b4
 80019fc:	20000164 	.word	0x20000164
 8001a00:	40000400 	.word	0x40000400
 8001a04:	200000b8 	.word	0x200000b8
 8001a08:	200000bc 	.word	0x200000bc

08001a0c <setTimerTraffic1>:
int countDownTimer1_counter;
int countDownTimer2_counter;
int scanFreqTimer_counter;
int buzzerTimer_counter;

void setTimerTraffic1(int duration){
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	trafficTimer1_counter = duration/TIMER_CYCLE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a08      	ldr	r2, [pc, #32]	; (8001a38 <setTimerTraffic1+0x2c>)
 8001a18:	fb82 1203 	smull	r1, r2, r2, r3
 8001a1c:	1092      	asrs	r2, r2, #2
 8001a1e:	17db      	asrs	r3, r3, #31
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	4a06      	ldr	r2, [pc, #24]	; (8001a3c <setTimerTraffic1+0x30>)
 8001a24:	6013      	str	r3, [r2, #0]
	trafficTimer1_flag = 0;
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <setTimerTraffic1+0x34>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	66666667 	.word	0x66666667
 8001a3c:	20000258 	.word	0x20000258
 8001a40:	20000274 	.word	0x20000274

08001a44 <setTimerWait>:
void setTimerTraffic2(int duration){
	trafficTimer2_counter = duration/TIMER_CYCLE;
	trafficTimer2_flag = 0;
}

void setTimerWait(int duration){
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	waitTimer_counter = duration/TIMER_CYCLE;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a08      	ldr	r2, [pc, #32]	; (8001a70 <setTimerWait+0x2c>)
 8001a50:	fb82 1203 	smull	r1, r2, r2, r3
 8001a54:	1092      	asrs	r2, r2, #2
 8001a56:	17db      	asrs	r3, r3, #31
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	4a06      	ldr	r2, [pc, #24]	; (8001a74 <setTimerWait+0x30>)
 8001a5c:	6013      	str	r3, [r2, #0]
	waitTimer_flag = 0;
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <setTimerWait+0x34>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	66666667 	.word	0x66666667
 8001a74:	2000024c 	.word	0x2000024c
 8001a78:	20000268 	.word	0x20000268

08001a7c <setTimerModify>:

void setTimerModify(int duration){
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	modifyTimer_counter = duration/TIMER_CYCLE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a08      	ldr	r2, [pc, #32]	; (8001aa8 <setTimerModify+0x2c>)
 8001a88:	fb82 1203 	smull	r1, r2, r2, r3
 8001a8c:	1092      	asrs	r2, r2, #2
 8001a8e:	17db      	asrs	r3, r3, #31
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	4a06      	ldr	r2, [pc, #24]	; (8001aac <setTimerModify+0x30>)
 8001a94:	6013      	str	r3, [r2, #0]
	modifyTimer_flag = 0;
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <setTimerModify+0x34>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	66666667 	.word	0x66666667
 8001aac:	2000027c 	.word	0x2000027c
 8001ab0:	2000025c 	.word	0x2000025c

08001ab4 <setTimerTriggerLed>:

void setTimerTriggerLed(int duration){
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	timerLed_counter = duration/TIMER_CYCLE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a08      	ldr	r2, [pc, #32]	; (8001ae0 <setTimerTriggerLed+0x2c>)
 8001ac0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ac4:	1092      	asrs	r2, r2, #2
 8001ac6:	17db      	asrs	r3, r3, #31
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	4a06      	ldr	r2, [pc, #24]	; (8001ae4 <setTimerTriggerLed+0x30>)
 8001acc:	6013      	str	r3, [r2, #0]
	timerLed_flag = 0;
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <setTimerTriggerLed+0x34>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	66666667 	.word	0x66666667
 8001ae4:	20000244 	.word	0x20000244
 8001ae8:	20000250 	.word	0x20000250

08001aec <setTimerCounter1>:

void setTimerCounter1(int duration){
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	countDownTimer1_counter = duration/TIMER_CYCLE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a08      	ldr	r2, [pc, #32]	; (8001b18 <setTimerCounter1+0x2c>)
 8001af8:	fb82 1203 	smull	r1, r2, r2, r3
 8001afc:	1092      	asrs	r2, r2, #2
 8001afe:	17db      	asrs	r3, r3, #31
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	4a06      	ldr	r2, [pc, #24]	; (8001b1c <setTimerCounter1+0x30>)
 8001b04:	6013      	str	r3, [r2, #0]
	countDownTimer1_flag = 0;
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <setTimerCounter1+0x34>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	66666667 	.word	0x66666667
 8001b1c:	20000240 	.word	0x20000240
 8001b20:	2000023c 	.word	0x2000023c

08001b24 <setTimerScanFreq>:
void setTimerCounter2(int duration){
	countDownTimer2_counter = duration/TIMER_CYCLE;
	countDownTimer2_flag = 0;
}

void setTimerScanFreq(int duration){
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
	scanFreqTimer_counter = duration/TIMER_CYCLE;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a08      	ldr	r2, [pc, #32]	; (8001b50 <setTimerScanFreq+0x2c>)
 8001b30:	fb82 1203 	smull	r1, r2, r2, r3
 8001b34:	1092      	asrs	r2, r2, #2
 8001b36:	17db      	asrs	r3, r3, #31
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	4a06      	ldr	r2, [pc, #24]	; (8001b54 <setTimerScanFreq+0x30>)
 8001b3c:	6013      	str	r3, [r2, #0]
	scanFreqTimer_flag = 0;
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <setTimerScanFreq+0x34>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	66666667 	.word	0x66666667
 8001b54:	2000026c 	.word	0x2000026c
 8001b58:	20000264 	.word	0x20000264

08001b5c <setTimerBuzzer>:

void setTimerBuzzer(int duration){
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
	buzzerTimer_counter = duration/TIMER_CYCLE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a08      	ldr	r2, [pc, #32]	; (8001b88 <setTimerBuzzer+0x2c>)
 8001b68:	fb82 1203 	smull	r1, r2, r2, r3
 8001b6c:	1092      	asrs	r2, r2, #2
 8001b6e:	17db      	asrs	r3, r3, #31
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	4a06      	ldr	r2, [pc, #24]	; (8001b8c <setTimerBuzzer+0x30>)
 8001b74:	6013      	str	r3, [r2, #0]
	buzzerTimer_flag = 0;
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <setTimerBuzzer+0x34>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	66666667 	.word	0x66666667
 8001b8c:	20000270 	.word	0x20000270
 8001b90:	20000278 	.word	0x20000278

08001b94 <timer_run>:

void timer_run(){
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
	if(trafficTimer1_counter >= 0){
 8001b98:	4b49      	ldr	r3, [pc, #292]	; (8001cc0 <timer_run+0x12c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	db0b      	blt.n	8001bb8 <timer_run+0x24>
		trafficTimer1_counter --;
 8001ba0:	4b47      	ldr	r3, [pc, #284]	; (8001cc0 <timer_run+0x12c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	4a46      	ldr	r2, [pc, #280]	; (8001cc0 <timer_run+0x12c>)
 8001ba8:	6013      	str	r3, [r2, #0]
		if(trafficTimer1_counter == 0) trafficTimer1_flag = 1;
 8001baa:	4b45      	ldr	r3, [pc, #276]	; (8001cc0 <timer_run+0x12c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d102      	bne.n	8001bb8 <timer_run+0x24>
 8001bb2:	4b44      	ldr	r3, [pc, #272]	; (8001cc4 <timer_run+0x130>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]
	}
	if(trafficTimer2_counter >= 0){
 8001bb8:	4b43      	ldr	r3, [pc, #268]	; (8001cc8 <timer_run+0x134>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	db0b      	blt.n	8001bd8 <timer_run+0x44>
		trafficTimer2_counter --;
 8001bc0:	4b41      	ldr	r3, [pc, #260]	; (8001cc8 <timer_run+0x134>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	4a40      	ldr	r2, [pc, #256]	; (8001cc8 <timer_run+0x134>)
 8001bc8:	6013      	str	r3, [r2, #0]
		if(trafficTimer2_counter == 0) trafficTimer2_flag = 1;
 8001bca:	4b3f      	ldr	r3, [pc, #252]	; (8001cc8 <timer_run+0x134>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d102      	bne.n	8001bd8 <timer_run+0x44>
 8001bd2:	4b3e      	ldr	r3, [pc, #248]	; (8001ccc <timer_run+0x138>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]
	}
	if(waitTimer_counter >= 0){
 8001bd8:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <timer_run+0x13c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	db0b      	blt.n	8001bf8 <timer_run+0x64>
		waitTimer_counter --;
 8001be0:	4b3b      	ldr	r3, [pc, #236]	; (8001cd0 <timer_run+0x13c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	3b01      	subs	r3, #1
 8001be6:	4a3a      	ldr	r2, [pc, #232]	; (8001cd0 <timer_run+0x13c>)
 8001be8:	6013      	str	r3, [r2, #0]
		if(waitTimer_counter == 0) waitTimer_flag = 1;
 8001bea:	4b39      	ldr	r3, [pc, #228]	; (8001cd0 <timer_run+0x13c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d102      	bne.n	8001bf8 <timer_run+0x64>
 8001bf2:	4b38      	ldr	r3, [pc, #224]	; (8001cd4 <timer_run+0x140>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
	}
	if(modifyTimer_counter >= 0){
 8001bf8:	4b37      	ldr	r3, [pc, #220]	; (8001cd8 <timer_run+0x144>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	db0b      	blt.n	8001c18 <timer_run+0x84>
		modifyTimer_counter --;
 8001c00:	4b35      	ldr	r3, [pc, #212]	; (8001cd8 <timer_run+0x144>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	4a34      	ldr	r2, [pc, #208]	; (8001cd8 <timer_run+0x144>)
 8001c08:	6013      	str	r3, [r2, #0]
		if(modifyTimer_counter == 0) modifyTimer_flag = 1;
 8001c0a:	4b33      	ldr	r3, [pc, #204]	; (8001cd8 <timer_run+0x144>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d102      	bne.n	8001c18 <timer_run+0x84>
 8001c12:	4b32      	ldr	r3, [pc, #200]	; (8001cdc <timer_run+0x148>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
	}
	if(timerLed_counter >= 0){
 8001c18:	4b31      	ldr	r3, [pc, #196]	; (8001ce0 <timer_run+0x14c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	db0b      	blt.n	8001c38 <timer_run+0xa4>
		timerLed_counter --;
 8001c20:	4b2f      	ldr	r3, [pc, #188]	; (8001ce0 <timer_run+0x14c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	4a2e      	ldr	r2, [pc, #184]	; (8001ce0 <timer_run+0x14c>)
 8001c28:	6013      	str	r3, [r2, #0]
		if(timerLed_counter == 0) timerLed_flag = 1;
 8001c2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ce0 <timer_run+0x14c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d102      	bne.n	8001c38 <timer_run+0xa4>
 8001c32:	4b2c      	ldr	r3, [pc, #176]	; (8001ce4 <timer_run+0x150>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	601a      	str	r2, [r3, #0]
	}
	if(countDownTimer1_counter >= 0){
 8001c38:	4b2b      	ldr	r3, [pc, #172]	; (8001ce8 <timer_run+0x154>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	db0b      	blt.n	8001c58 <timer_run+0xc4>
		countDownTimer1_counter --;
 8001c40:	4b29      	ldr	r3, [pc, #164]	; (8001ce8 <timer_run+0x154>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	4a28      	ldr	r2, [pc, #160]	; (8001ce8 <timer_run+0x154>)
 8001c48:	6013      	str	r3, [r2, #0]
		if(countDownTimer1_counter == 0) countDownTimer1_flag = 1;
 8001c4a:	4b27      	ldr	r3, [pc, #156]	; (8001ce8 <timer_run+0x154>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d102      	bne.n	8001c58 <timer_run+0xc4>
 8001c52:	4b26      	ldr	r3, [pc, #152]	; (8001cec <timer_run+0x158>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
	}
	if(countDownTimer2_counter >= 0){
 8001c58:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <timer_run+0x15c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	db0b      	blt.n	8001c78 <timer_run+0xe4>
		countDownTimer2_counter --;
 8001c60:	4b23      	ldr	r3, [pc, #140]	; (8001cf0 <timer_run+0x15c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	3b01      	subs	r3, #1
 8001c66:	4a22      	ldr	r2, [pc, #136]	; (8001cf0 <timer_run+0x15c>)
 8001c68:	6013      	str	r3, [r2, #0]
		if(countDownTimer2_counter == 0) countDownTimer2_flag = 1;
 8001c6a:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <timer_run+0x15c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d102      	bne.n	8001c78 <timer_run+0xe4>
 8001c72:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <timer_run+0x160>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
	}
	if(scanFreqTimer_counter >= 0){
 8001c78:	4b1f      	ldr	r3, [pc, #124]	; (8001cf8 <timer_run+0x164>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	db0b      	blt.n	8001c98 <timer_run+0x104>
		scanFreqTimer_counter --;
 8001c80:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <timer_run+0x164>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	4a1c      	ldr	r2, [pc, #112]	; (8001cf8 <timer_run+0x164>)
 8001c88:	6013      	str	r3, [r2, #0]
		if(scanFreqTimer_counter == 0) scanFreqTimer_flag = 1;
 8001c8a:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <timer_run+0x164>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d102      	bne.n	8001c98 <timer_run+0x104>
 8001c92:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <timer_run+0x168>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
	}
	if(buzzerTimer_counter >= 0){
 8001c98:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <timer_run+0x16c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	db0b      	blt.n	8001cb8 <timer_run+0x124>
		buzzerTimer_counter --;
 8001ca0:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <timer_run+0x16c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	4a16      	ldr	r2, [pc, #88]	; (8001d00 <timer_run+0x16c>)
 8001ca8:	6013      	str	r3, [r2, #0]
			if(buzzerTimer_counter == 0) buzzerTimer_flag = 1;
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <timer_run+0x16c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d102      	bne.n	8001cb8 <timer_run+0x124>
 8001cb2:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <timer_run+0x170>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]
		}
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	20000258 	.word	0x20000258
 8001cc4:	20000274 	.word	0x20000274
 8001cc8:	20000248 	.word	0x20000248
 8001ccc:	20000238 	.word	0x20000238
 8001cd0:	2000024c 	.word	0x2000024c
 8001cd4:	20000268 	.word	0x20000268
 8001cd8:	2000027c 	.word	0x2000027c
 8001cdc:	2000025c 	.word	0x2000025c
 8001ce0:	20000244 	.word	0x20000244
 8001ce4:	20000250 	.word	0x20000250
 8001ce8:	20000240 	.word	0x20000240
 8001cec:	2000023c 	.word	0x2000023c
 8001cf0:	20000260 	.word	0x20000260
 8001cf4:	20000254 	.word	0x20000254
 8001cf8:	2000026c 	.word	0x2000026c
 8001cfc:	20000264 	.word	0x20000264
 8001d00:	20000270 	.word	0x20000270
 8001d04:	20000278 	.word	0x20000278

08001d08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <HAL_MspInit+0x5c>)
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	4a14      	ldr	r2, [pc, #80]	; (8001d64 <HAL_MspInit+0x5c>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6193      	str	r3, [r2, #24]
 8001d1a:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <HAL_MspInit+0x5c>)
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <HAL_MspInit+0x5c>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	4a0e      	ldr	r2, [pc, #56]	; (8001d64 <HAL_MspInit+0x5c>)
 8001d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d30:	61d3      	str	r3, [r2, #28]
 8001d32:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <HAL_MspInit+0x5c>)
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <HAL_MspInit+0x60>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <HAL_MspInit+0x60>)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40010000 	.word	0x40010000

08001d6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d7c:	d113      	bne.n	8001da6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d7e:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <HAL_TIM_Base_MspInit+0x44>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	4a0b      	ldr	r2, [pc, #44]	; (8001db0 <HAL_TIM_Base_MspInit+0x44>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	61d3      	str	r3, [r2, #28]
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <HAL_TIM_Base_MspInit+0x44>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2100      	movs	r1, #0
 8001d9a:	201c      	movs	r0, #28
 8001d9c:	f000 fa71 	bl	8002282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001da0:	201c      	movs	r0, #28
 8001da2:	f000 fa8a 	bl	80022ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001da6:	bf00      	nop
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000

08001db4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a09      	ldr	r2, [pc, #36]	; (8001de8 <HAL_TIM_PWM_MspInit+0x34>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d10b      	bne.n	8001dde <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <HAL_TIM_PWM_MspInit+0x38>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	4a08      	ldr	r2, [pc, #32]	; (8001dec <HAL_TIM_PWM_MspInit+0x38>)
 8001dcc:	f043 0302 	orr.w	r3, r3, #2
 8001dd0:	61d3      	str	r3, [r2, #28]
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_TIM_PWM_MspInit+0x38>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001dde:	bf00      	nop
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	40000400 	.word	0x40000400
 8001dec:	40021000 	.word	0x40021000

08001df0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0310 	add.w	r3, r7, #16
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a0f      	ldr	r2, [pc, #60]	; (8001e48 <HAL_TIM_MspPostInit+0x58>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d117      	bne.n	8001e40 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e10:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <HAL_TIM_MspPostInit+0x5c>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4a0d      	ldr	r2, [pc, #52]	; (8001e4c <HAL_TIM_MspPostInit+0x5c>)
 8001e16:	f043 0304 	orr.w	r3, r3, #4
 8001e1a:	6193      	str	r3, [r2, #24]
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_TIM_MspPostInit+0x5c>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e28:	2340      	movs	r3, #64	; 0x40
 8001e2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e30:	2302      	movs	r3, #2
 8001e32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e34:	f107 0310 	add.w	r3, r7, #16
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4805      	ldr	r0, [pc, #20]	; (8001e50 <HAL_TIM_MspPostInit+0x60>)
 8001e3c:	f000 fa58 	bl	80022f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e40:	bf00      	nop
 8001e42:	3720      	adds	r7, #32
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40000400 	.word	0x40000400
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40010800 	.word	0x40010800

08001e54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 0310 	add.w	r3, r7, #16
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a1b      	ldr	r2, [pc, #108]	; (8001edc <HAL_UART_MspInit+0x88>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d12f      	bne.n	8001ed4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e74:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <HAL_UART_MspInit+0x8c>)
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	4a19      	ldr	r2, [pc, #100]	; (8001ee0 <HAL_UART_MspInit+0x8c>)
 8001e7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e7e:	61d3      	str	r3, [r2, #28]
 8001e80:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <HAL_UART_MspInit+0x8c>)
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8c:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <HAL_UART_MspInit+0x8c>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	4a13      	ldr	r2, [pc, #76]	; (8001ee0 <HAL_UART_MspInit+0x8c>)
 8001e92:	f043 0304 	orr.w	r3, r3, #4
 8001e96:	6193      	str	r3, [r2, #24]
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <HAL_UART_MspInit+0x8c>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ea4:	2304      	movs	r3, #4
 8001ea6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eac:	2303      	movs	r3, #3
 8001eae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb0:	f107 0310 	add.w	r3, r7, #16
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	480b      	ldr	r0, [pc, #44]	; (8001ee4 <HAL_UART_MspInit+0x90>)
 8001eb8:	f000 fa1a 	bl	80022f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ebc:	2308      	movs	r3, #8
 8001ebe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec8:	f107 0310 	add.w	r3, r7, #16
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <HAL_UART_MspInit+0x90>)
 8001ed0:	f000 fa0e 	bl	80022f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ed4:	bf00      	nop
 8001ed6:	3720      	adds	r7, #32
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40004400 	.word	0x40004400
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40010800 	.word	0x40010800

08001ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eec:	e7fe      	b.n	8001eec <NMI_Handler+0x4>

08001eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef2:	e7fe      	b.n	8001ef2 <HardFault_Handler+0x4>

08001ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <MemManage_Handler+0x4>

08001efa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001efe:	e7fe      	b.n	8001efe <BusFault_Handler+0x4>

08001f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <UsageFault_Handler+0x4>

08001f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr

08001f12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr

08001f1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr

08001f2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f2e:	f000 f8b5 	bl	800209c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f3c:	4802      	ldr	r0, [pc, #8]	; (8001f48 <TIM2_IRQHandler+0x10>)
 8001f3e:	f001 f951 	bl	80031e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	200001ac 	.word	0x200001ac

08001f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f54:	4a14      	ldr	r2, [pc, #80]	; (8001fa8 <_sbrk+0x5c>)
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <_sbrk+0x60>)
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f60:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <_sbrk+0x64>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d102      	bne.n	8001f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <_sbrk+0x64>)
 8001f6a:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <_sbrk+0x68>)
 8001f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <_sbrk+0x64>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d207      	bcs.n	8001f8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f7c:	f002 f8ac 	bl	80040d8 <__errno>
 8001f80:	4603      	mov	r3, r0
 8001f82:	220c      	movs	r2, #12
 8001f84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f86:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8a:	e009      	b.n	8001fa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f8c:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <_sbrk+0x64>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f92:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <_sbrk+0x64>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	4a05      	ldr	r2, [pc, #20]	; (8001fb0 <_sbrk+0x64>)
 8001f9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20005000 	.word	0x20005000
 8001fac:	00000400 	.word	0x00000400
 8001fb0:	200000c0 	.word	0x200000c0
 8001fb4:	20000298 	.word	0x20000298

08001fb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fc4:	480c      	ldr	r0, [pc, #48]	; (8001ff8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fc6:	490d      	ldr	r1, [pc, #52]	; (8001ffc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fc8:	4a0d      	ldr	r2, [pc, #52]	; (8002000 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fcc:	e002      	b.n	8001fd4 <LoopCopyDataInit>

08001fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fd2:	3304      	adds	r3, #4

08001fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd8:	d3f9      	bcc.n	8001fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fda:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fdc:	4c0a      	ldr	r4, [pc, #40]	; (8002008 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe0:	e001      	b.n	8001fe6 <LoopFillZerobss>

08001fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe4:	3204      	adds	r2, #4

08001fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe8:	d3fb      	bcc.n	8001fe2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fea:	f7ff ffe5 	bl	8001fb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fee:	f002 f879 	bl	80040e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ff2:	f7ff fabb 	bl	800156c <main>
  bx lr
 8001ff6:	4770      	bx	lr
  ldr r0, =_sdata
 8001ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ffc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002000:	08004a90 	.word	0x08004a90
  ldr r2, =_sbss
 8002004:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002008:	20000294 	.word	0x20000294

0800200c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800200c:	e7fe      	b.n	800200c <ADC1_2_IRQHandler>
	...

08002010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002014:	4b08      	ldr	r3, [pc, #32]	; (8002038 <HAL_Init+0x28>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a07      	ldr	r2, [pc, #28]	; (8002038 <HAL_Init+0x28>)
 800201a:	f043 0310 	orr.w	r3, r3, #16
 800201e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002020:	2003      	movs	r0, #3
 8002022:	f000 f923 	bl	800226c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002026:	200f      	movs	r0, #15
 8002028:	f000 f808 	bl	800203c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800202c:	f7ff fe6c 	bl	8001d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40022000 	.word	0x40022000

0800203c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002044:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_InitTick+0x54>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_InitTick+0x58>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	4619      	mov	r1, r3
 800204e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002052:	fbb3 f3f1 	udiv	r3, r3, r1
 8002056:	fbb2 f3f3 	udiv	r3, r2, r3
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f93b 	bl	80022d6 <HAL_SYSTICK_Config>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e00e      	b.n	8002088 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b0f      	cmp	r3, #15
 800206e:	d80a      	bhi.n	8002086 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002070:	2200      	movs	r2, #0
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	f04f 30ff 	mov.w	r0, #4294967295
 8002078:	f000 f903 	bl	8002282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800207c:	4a06      	ldr	r2, [pc, #24]	; (8002098 <HAL_InitTick+0x5c>)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	e000      	b.n	8002088 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	2000000c 	.word	0x2000000c
 8002094:	20000014 	.word	0x20000014
 8002098:	20000010 	.word	0x20000010

0800209c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <HAL_IncTick+0x1c>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b05      	ldr	r3, [pc, #20]	; (80020bc <HAL_IncTick+0x20>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	4a03      	ldr	r2, [pc, #12]	; (80020bc <HAL_IncTick+0x20>)
 80020ae:	6013      	str	r3, [r2, #0]
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	20000014 	.word	0x20000014
 80020bc:	20000280 	.word	0x20000280

080020c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return uwTick;
 80020c4:	4b02      	ldr	r3, [pc, #8]	; (80020d0 <HAL_GetTick+0x10>)
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr
 80020d0:	20000280 	.word	0x20000280

080020d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f0:	4013      	ands	r3, r2
 80020f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002106:	4a04      	ldr	r2, [pc, #16]	; (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	60d3      	str	r3, [r2, #12]
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002120:	4b04      	ldr	r3, [pc, #16]	; (8002134 <__NVIC_GetPriorityGrouping+0x18>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	f003 0307 	and.w	r3, r3, #7
}
 800212a:	4618      	mov	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	2b00      	cmp	r3, #0
 8002148:	db0b      	blt.n	8002162 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	f003 021f 	and.w	r2, r3, #31
 8002150:	4906      	ldr	r1, [pc, #24]	; (800216c <__NVIC_EnableIRQ+0x34>)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	2001      	movs	r0, #1
 800215a:	fa00 f202 	lsl.w	r2, r0, r2
 800215e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr
 800216c:	e000e100 	.word	0xe000e100

08002170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	6039      	str	r1, [r7, #0]
 800217a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002180:	2b00      	cmp	r3, #0
 8002182:	db0a      	blt.n	800219a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	b2da      	uxtb	r2, r3
 8002188:	490c      	ldr	r1, [pc, #48]	; (80021bc <__NVIC_SetPriority+0x4c>)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	440b      	add	r3, r1
 8002194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002198:	e00a      	b.n	80021b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4908      	ldr	r1, [pc, #32]	; (80021c0 <__NVIC_SetPriority+0x50>)
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	3b04      	subs	r3, #4
 80021a8:	0112      	lsls	r2, r2, #4
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	440b      	add	r3, r1
 80021ae:	761a      	strb	r2, [r3, #24]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	e000e100 	.word	0xe000e100
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	; 0x24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f1c3 0307 	rsb	r3, r3, #7
 80021de:	2b04      	cmp	r3, #4
 80021e0:	bf28      	it	cs
 80021e2:	2304      	movcs	r3, #4
 80021e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3304      	adds	r3, #4
 80021ea:	2b06      	cmp	r3, #6
 80021ec:	d902      	bls.n	80021f4 <NVIC_EncodePriority+0x30>
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3b03      	subs	r3, #3
 80021f2:	e000      	b.n	80021f6 <NVIC_EncodePriority+0x32>
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	f04f 32ff 	mov.w	r2, #4294967295
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43da      	mvns	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	401a      	ands	r2, r3
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800220c:	f04f 31ff 	mov.w	r1, #4294967295
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	43d9      	mvns	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	4313      	orrs	r3, r2
         );
}
 800221e:	4618      	mov	r0, r3
 8002220:	3724      	adds	r7, #36	; 0x24
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr

08002228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3b01      	subs	r3, #1
 8002234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002238:	d301      	bcc.n	800223e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800223a:	2301      	movs	r3, #1
 800223c:	e00f      	b.n	800225e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800223e:	4a0a      	ldr	r2, [pc, #40]	; (8002268 <SysTick_Config+0x40>)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3b01      	subs	r3, #1
 8002244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002246:	210f      	movs	r1, #15
 8002248:	f04f 30ff 	mov.w	r0, #4294967295
 800224c:	f7ff ff90 	bl	8002170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <SysTick_Config+0x40>)
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002256:	4b04      	ldr	r3, [pc, #16]	; (8002268 <SysTick_Config+0x40>)
 8002258:	2207      	movs	r2, #7
 800225a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	e000e010 	.word	0xe000e010

0800226c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7ff ff2d 	bl	80020d4 <__NVIC_SetPriorityGrouping>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002282:	b580      	push	{r7, lr}
 8002284:	b086      	sub	sp, #24
 8002286:	af00      	add	r7, sp, #0
 8002288:	4603      	mov	r3, r0
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	607a      	str	r2, [r7, #4]
 800228e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002294:	f7ff ff42 	bl	800211c <__NVIC_GetPriorityGrouping>
 8002298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68b9      	ldr	r1, [r7, #8]
 800229e:	6978      	ldr	r0, [r7, #20]
 80022a0:	f7ff ff90 	bl	80021c4 <NVIC_EncodePriority>
 80022a4:	4602      	mov	r2, r0
 80022a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022aa:	4611      	mov	r1, r2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff ff5f 	bl	8002170 <__NVIC_SetPriority>
}
 80022b2:	bf00      	nop
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	4603      	mov	r3, r0
 80022c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff ff35 	bl	8002138 <__NVIC_EnableIRQ>
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff ffa2 	bl	8002228 <SysTick_Config>
 80022e4:	4603      	mov	r3, r0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b08b      	sub	sp, #44	; 0x2c
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022fe:	2300      	movs	r3, #0
 8002300:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002302:	e169      	b.n	80025d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002304:	2201      	movs	r2, #1
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	429a      	cmp	r2, r3
 800231e:	f040 8158 	bne.w	80025d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4a9a      	ldr	r2, [pc, #616]	; (8002590 <HAL_GPIO_Init+0x2a0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d05e      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
 800232c:	4a98      	ldr	r2, [pc, #608]	; (8002590 <HAL_GPIO_Init+0x2a0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d875      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 8002332:	4a98      	ldr	r2, [pc, #608]	; (8002594 <HAL_GPIO_Init+0x2a4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d058      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
 8002338:	4a96      	ldr	r2, [pc, #600]	; (8002594 <HAL_GPIO_Init+0x2a4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d86f      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 800233e:	4a96      	ldr	r2, [pc, #600]	; (8002598 <HAL_GPIO_Init+0x2a8>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d052      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
 8002344:	4a94      	ldr	r2, [pc, #592]	; (8002598 <HAL_GPIO_Init+0x2a8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d869      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 800234a:	4a94      	ldr	r2, [pc, #592]	; (800259c <HAL_GPIO_Init+0x2ac>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d04c      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
 8002350:	4a92      	ldr	r2, [pc, #584]	; (800259c <HAL_GPIO_Init+0x2ac>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d863      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 8002356:	4a92      	ldr	r2, [pc, #584]	; (80025a0 <HAL_GPIO_Init+0x2b0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d046      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
 800235c:	4a90      	ldr	r2, [pc, #576]	; (80025a0 <HAL_GPIO_Init+0x2b0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d85d      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 8002362:	2b12      	cmp	r3, #18
 8002364:	d82a      	bhi.n	80023bc <HAL_GPIO_Init+0xcc>
 8002366:	2b12      	cmp	r3, #18
 8002368:	d859      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 800236a:	a201      	add	r2, pc, #4	; (adr r2, 8002370 <HAL_GPIO_Init+0x80>)
 800236c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002370:	080023eb 	.word	0x080023eb
 8002374:	080023c5 	.word	0x080023c5
 8002378:	080023d7 	.word	0x080023d7
 800237c:	08002419 	.word	0x08002419
 8002380:	0800241f 	.word	0x0800241f
 8002384:	0800241f 	.word	0x0800241f
 8002388:	0800241f 	.word	0x0800241f
 800238c:	0800241f 	.word	0x0800241f
 8002390:	0800241f 	.word	0x0800241f
 8002394:	0800241f 	.word	0x0800241f
 8002398:	0800241f 	.word	0x0800241f
 800239c:	0800241f 	.word	0x0800241f
 80023a0:	0800241f 	.word	0x0800241f
 80023a4:	0800241f 	.word	0x0800241f
 80023a8:	0800241f 	.word	0x0800241f
 80023ac:	0800241f 	.word	0x0800241f
 80023b0:	0800241f 	.word	0x0800241f
 80023b4:	080023cd 	.word	0x080023cd
 80023b8:	080023e1 	.word	0x080023e1
 80023bc:	4a79      	ldr	r2, [pc, #484]	; (80025a4 <HAL_GPIO_Init+0x2b4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d013      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023c2:	e02c      	b.n	800241e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	623b      	str	r3, [r7, #32]
          break;
 80023ca:	e029      	b.n	8002420 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	3304      	adds	r3, #4
 80023d2:	623b      	str	r3, [r7, #32]
          break;
 80023d4:	e024      	b.n	8002420 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	3308      	adds	r3, #8
 80023dc:	623b      	str	r3, [r7, #32]
          break;
 80023de:	e01f      	b.n	8002420 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	330c      	adds	r3, #12
 80023e6:	623b      	str	r3, [r7, #32]
          break;
 80023e8:	e01a      	b.n	8002420 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d102      	bne.n	80023f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023f2:	2304      	movs	r3, #4
 80023f4:	623b      	str	r3, [r7, #32]
          break;
 80023f6:	e013      	b.n	8002420 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d105      	bne.n	800240c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002400:	2308      	movs	r3, #8
 8002402:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	611a      	str	r2, [r3, #16]
          break;
 800240a:	e009      	b.n	8002420 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800240c:	2308      	movs	r3, #8
 800240e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69fa      	ldr	r2, [r7, #28]
 8002414:	615a      	str	r2, [r3, #20]
          break;
 8002416:	e003      	b.n	8002420 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002418:	2300      	movs	r3, #0
 800241a:	623b      	str	r3, [r7, #32]
          break;
 800241c:	e000      	b.n	8002420 <HAL_GPIO_Init+0x130>
          break;
 800241e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	2bff      	cmp	r3, #255	; 0xff
 8002424:	d801      	bhi.n	800242a <HAL_GPIO_Init+0x13a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	e001      	b.n	800242e <HAL_GPIO_Init+0x13e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3304      	adds	r3, #4
 800242e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2bff      	cmp	r3, #255	; 0xff
 8002434:	d802      	bhi.n	800243c <HAL_GPIO_Init+0x14c>
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	e002      	b.n	8002442 <HAL_GPIO_Init+0x152>
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	3b08      	subs	r3, #8
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	210f      	movs	r1, #15
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	fa01 f303 	lsl.w	r3, r1, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	401a      	ands	r2, r3
 8002454:	6a39      	ldr	r1, [r7, #32]
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	fa01 f303 	lsl.w	r3, r1, r3
 800245c:	431a      	orrs	r2, r3
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 80b1 	beq.w	80025d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002470:	4b4d      	ldr	r3, [pc, #308]	; (80025a8 <HAL_GPIO_Init+0x2b8>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	4a4c      	ldr	r2, [pc, #304]	; (80025a8 <HAL_GPIO_Init+0x2b8>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6193      	str	r3, [r2, #24]
 800247c:	4b4a      	ldr	r3, [pc, #296]	; (80025a8 <HAL_GPIO_Init+0x2b8>)
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002488:	4a48      	ldr	r2, [pc, #288]	; (80025ac <HAL_GPIO_Init+0x2bc>)
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	089b      	lsrs	r3, r3, #2
 800248e:	3302      	adds	r3, #2
 8002490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002494:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	220f      	movs	r2, #15
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4013      	ands	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a40      	ldr	r2, [pc, #256]	; (80025b0 <HAL_GPIO_Init+0x2c0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d013      	beq.n	80024dc <HAL_GPIO_Init+0x1ec>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a3f      	ldr	r2, [pc, #252]	; (80025b4 <HAL_GPIO_Init+0x2c4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d00d      	beq.n	80024d8 <HAL_GPIO_Init+0x1e8>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a3e      	ldr	r2, [pc, #248]	; (80025b8 <HAL_GPIO_Init+0x2c8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d007      	beq.n	80024d4 <HAL_GPIO_Init+0x1e4>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a3d      	ldr	r2, [pc, #244]	; (80025bc <HAL_GPIO_Init+0x2cc>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d101      	bne.n	80024d0 <HAL_GPIO_Init+0x1e0>
 80024cc:	2303      	movs	r3, #3
 80024ce:	e006      	b.n	80024de <HAL_GPIO_Init+0x1ee>
 80024d0:	2304      	movs	r3, #4
 80024d2:	e004      	b.n	80024de <HAL_GPIO_Init+0x1ee>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e002      	b.n	80024de <HAL_GPIO_Init+0x1ee>
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <HAL_GPIO_Init+0x1ee>
 80024dc:	2300      	movs	r3, #0
 80024de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e0:	f002 0203 	and.w	r2, r2, #3
 80024e4:	0092      	lsls	r2, r2, #2
 80024e6:	4093      	lsls	r3, r2
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024ee:	492f      	ldr	r1, [pc, #188]	; (80025ac <HAL_GPIO_Init+0x2bc>)
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	089b      	lsrs	r3, r3, #2
 80024f4:	3302      	adds	r3, #2
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d006      	beq.n	8002516 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002508:	4b2d      	ldr	r3, [pc, #180]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	492c      	ldr	r1, [pc, #176]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	4313      	orrs	r3, r2
 8002512:	600b      	str	r3, [r1, #0]
 8002514:	e006      	b.n	8002524 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002516:	4b2a      	ldr	r3, [pc, #168]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	43db      	mvns	r3, r3
 800251e:	4928      	ldr	r1, [pc, #160]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002520:	4013      	ands	r3, r2
 8002522:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d006      	beq.n	800253e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002530:	4b23      	ldr	r3, [pc, #140]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	4922      	ldr	r1, [pc, #136]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
 800253c:	e006      	b.n	800254c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800253e:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	43db      	mvns	r3, r3
 8002546:	491e      	ldr	r1, [pc, #120]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002548:	4013      	ands	r3, r2
 800254a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d006      	beq.n	8002566 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002558:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	4918      	ldr	r1, [pc, #96]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	4313      	orrs	r3, r2
 8002562:	608b      	str	r3, [r1, #8]
 8002564:	e006      	b.n	8002574 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002566:	4b16      	ldr	r3, [pc, #88]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	43db      	mvns	r3, r3
 800256e:	4914      	ldr	r1, [pc, #80]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002570:	4013      	ands	r3, r2
 8002572:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d021      	beq.n	80025c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002580:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	490e      	ldr	r1, [pc, #56]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	60cb      	str	r3, [r1, #12]
 800258c:	e021      	b.n	80025d2 <HAL_GPIO_Init+0x2e2>
 800258e:	bf00      	nop
 8002590:	10320000 	.word	0x10320000
 8002594:	10310000 	.word	0x10310000
 8002598:	10220000 	.word	0x10220000
 800259c:	10210000 	.word	0x10210000
 80025a0:	10120000 	.word	0x10120000
 80025a4:	10110000 	.word	0x10110000
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40010000 	.word	0x40010000
 80025b0:	40010800 	.word	0x40010800
 80025b4:	40010c00 	.word	0x40010c00
 80025b8:	40011000 	.word	0x40011000
 80025bc:	40011400 	.word	0x40011400
 80025c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025c4:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_GPIO_Init+0x304>)
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	4909      	ldr	r1, [pc, #36]	; (80025f4 <HAL_GPIO_Init+0x304>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	3301      	adds	r3, #1
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	fa22 f303 	lsr.w	r3, r2, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f47f ae8e 	bne.w	8002304 <HAL_GPIO_Init+0x14>
  }
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	372c      	adds	r7, #44	; 0x2c
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	40010400 	.word	0x40010400

080025f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	887b      	ldrh	r3, [r7, #2]
 800260a:	4013      	ands	r3, r2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d002      	beq.n	8002616 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002610:	2301      	movs	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]
 8002614:	e001      	b.n	800261a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002616:	2300      	movs	r3, #0
 8002618:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800261a:	7bfb      	ldrb	r3, [r7, #15]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr

08002626 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	460b      	mov	r3, r1
 8002630:	807b      	strh	r3, [r7, #2]
 8002632:	4613      	mov	r3, r2
 8002634:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002636:	787b      	ldrb	r3, [r7, #1]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800263c:	887a      	ldrh	r2, [r7, #2]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002642:	e003      	b.n	800264c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002644:	887b      	ldrh	r3, [r7, #2]
 8002646:	041a      	lsls	r2, r3, #16
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	611a      	str	r2, [r3, #16]
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr

08002656 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002656:	b480      	push	{r7}
 8002658:	b085      	sub	sp, #20
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	460b      	mov	r3, r1
 8002660:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002668:	887a      	ldrh	r2, [r7, #2]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	4013      	ands	r3, r2
 800266e:	041a      	lsls	r2, r3, #16
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	43d9      	mvns	r1, r3
 8002674:	887b      	ldrh	r3, [r7, #2]
 8002676:	400b      	ands	r3, r1
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	611a      	str	r2, [r3, #16]
}
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr

08002688 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e26c      	b.n	8002b74 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 8087 	beq.w	80027b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026a8:	4b92      	ldr	r3, [pc, #584]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 030c 	and.w	r3, r3, #12
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d00c      	beq.n	80026ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026b4:	4b8f      	ldr	r3, [pc, #572]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 030c 	and.w	r3, r3, #12
 80026bc:	2b08      	cmp	r3, #8
 80026be:	d112      	bne.n	80026e6 <HAL_RCC_OscConfig+0x5e>
 80026c0:	4b8c      	ldr	r3, [pc, #560]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026cc:	d10b      	bne.n	80026e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ce:	4b89      	ldr	r3, [pc, #548]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d06c      	beq.n	80027b4 <HAL_RCC_OscConfig+0x12c>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d168      	bne.n	80027b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e246      	b.n	8002b74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ee:	d106      	bne.n	80026fe <HAL_RCC_OscConfig+0x76>
 80026f0:	4b80      	ldr	r3, [pc, #512]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a7f      	ldr	r2, [pc, #508]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 80026f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	e02e      	b.n	800275c <HAL_RCC_OscConfig+0xd4>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10c      	bne.n	8002720 <HAL_RCC_OscConfig+0x98>
 8002706:	4b7b      	ldr	r3, [pc, #492]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a7a      	ldr	r2, [pc, #488]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 800270c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	4b78      	ldr	r3, [pc, #480]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a77      	ldr	r2, [pc, #476]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 8002718:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	e01d      	b.n	800275c <HAL_RCC_OscConfig+0xd4>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002728:	d10c      	bne.n	8002744 <HAL_RCC_OscConfig+0xbc>
 800272a:	4b72      	ldr	r3, [pc, #456]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a71      	ldr	r2, [pc, #452]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 8002730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	4b6f      	ldr	r3, [pc, #444]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a6e      	ldr	r2, [pc, #440]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 800273c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	e00b      	b.n	800275c <HAL_RCC_OscConfig+0xd4>
 8002744:	4b6b      	ldr	r3, [pc, #428]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a6a      	ldr	r2, [pc, #424]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 800274a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274e:	6013      	str	r3, [r2, #0]
 8002750:	4b68      	ldr	r3, [pc, #416]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a67      	ldr	r2, [pc, #412]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 8002756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800275a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d013      	beq.n	800278c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7ff fcac 	bl	80020c0 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800276c:	f7ff fca8 	bl	80020c0 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	; 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e1fa      	b.n	8002b74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277e:	4b5d      	ldr	r3, [pc, #372]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0xe4>
 800278a:	e014      	b.n	80027b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278c:	f7ff fc98 	bl	80020c0 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002794:	f7ff fc94 	bl	80020c0 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b64      	cmp	r3, #100	; 0x64
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e1e6      	b.n	8002b74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a6:	4b53      	ldr	r3, [pc, #332]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f0      	bne.n	8002794 <HAL_RCC_OscConfig+0x10c>
 80027b2:	e000      	b.n	80027b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d063      	beq.n	800288a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027c2:	4b4c      	ldr	r3, [pc, #304]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00b      	beq.n	80027e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027ce:	4b49      	ldr	r3, [pc, #292]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d11c      	bne.n	8002814 <HAL_RCC_OscConfig+0x18c>
 80027da:	4b46      	ldr	r3, [pc, #280]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d116      	bne.n	8002814 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e6:	4b43      	ldr	r3, [pc, #268]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d005      	beq.n	80027fe <HAL_RCC_OscConfig+0x176>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d001      	beq.n	80027fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e1ba      	b.n	8002b74 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fe:	4b3d      	ldr	r3, [pc, #244]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	4939      	ldr	r1, [pc, #228]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 800280e:	4313      	orrs	r3, r2
 8002810:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002812:	e03a      	b.n	800288a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d020      	beq.n	800285e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800281c:	4b36      	ldr	r3, [pc, #216]	; (80028f8 <HAL_RCC_OscConfig+0x270>)
 800281e:	2201      	movs	r2, #1
 8002820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002822:	f7ff fc4d 	bl	80020c0 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800282a:	f7ff fc49 	bl	80020c0 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e19b      	b.n	8002b74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283c:	4b2d      	ldr	r3, [pc, #180]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0f0      	beq.n	800282a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002848:	4b2a      	ldr	r3, [pc, #168]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	4927      	ldr	r1, [pc, #156]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 8002858:	4313      	orrs	r3, r2
 800285a:	600b      	str	r3, [r1, #0]
 800285c:	e015      	b.n	800288a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800285e:	4b26      	ldr	r3, [pc, #152]	; (80028f8 <HAL_RCC_OscConfig+0x270>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002864:	f7ff fc2c 	bl	80020c0 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800286c:	f7ff fc28 	bl	80020c0 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e17a      	b.n	8002b74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287e:	4b1d      	ldr	r3, [pc, #116]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b00      	cmp	r3, #0
 8002894:	d03a      	beq.n	800290c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d019      	beq.n	80028d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800289e:	4b17      	ldr	r3, [pc, #92]	; (80028fc <HAL_RCC_OscConfig+0x274>)
 80028a0:	2201      	movs	r2, #1
 80028a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a4:	f7ff fc0c 	bl	80020c0 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ac:	f7ff fc08 	bl	80020c0 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e15a      	b.n	8002b74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028be:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028ca:	2001      	movs	r0, #1
 80028cc:	f000 fad8 	bl	8002e80 <RCC_Delay>
 80028d0:	e01c      	b.n	800290c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d2:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <HAL_RCC_OscConfig+0x274>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d8:	f7ff fbf2 	bl	80020c0 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028de:	e00f      	b.n	8002900 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e0:	f7ff fbee 	bl	80020c0 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d908      	bls.n	8002900 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e140      	b.n	8002b74 <HAL_RCC_OscConfig+0x4ec>
 80028f2:	bf00      	nop
 80028f4:	40021000 	.word	0x40021000
 80028f8:	42420000 	.word	0x42420000
 80028fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002900:	4b9e      	ldr	r3, [pc, #632]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1e9      	bne.n	80028e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 80a6 	beq.w	8002a66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800291a:	2300      	movs	r3, #0
 800291c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800291e:	4b97      	ldr	r3, [pc, #604]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10d      	bne.n	8002946 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800292a:	4b94      	ldr	r3, [pc, #592]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	4a93      	ldr	r2, [pc, #588]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 8002930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002934:	61d3      	str	r3, [r2, #28]
 8002936:	4b91      	ldr	r3, [pc, #580]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002942:	2301      	movs	r3, #1
 8002944:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002946:	4b8e      	ldr	r3, [pc, #568]	; (8002b80 <HAL_RCC_OscConfig+0x4f8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294e:	2b00      	cmp	r3, #0
 8002950:	d118      	bne.n	8002984 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002952:	4b8b      	ldr	r3, [pc, #556]	; (8002b80 <HAL_RCC_OscConfig+0x4f8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a8a      	ldr	r2, [pc, #552]	; (8002b80 <HAL_RCC_OscConfig+0x4f8>)
 8002958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800295e:	f7ff fbaf 	bl	80020c0 <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002966:	f7ff fbab 	bl	80020c0 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b64      	cmp	r3, #100	; 0x64
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e0fd      	b.n	8002b74 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002978:	4b81      	ldr	r3, [pc, #516]	; (8002b80 <HAL_RCC_OscConfig+0x4f8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0f0      	beq.n	8002966 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d106      	bne.n	800299a <HAL_RCC_OscConfig+0x312>
 800298c:	4b7b      	ldr	r3, [pc, #492]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	4a7a      	ldr	r2, [pc, #488]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	6213      	str	r3, [r2, #32]
 8002998:	e02d      	b.n	80029f6 <HAL_RCC_OscConfig+0x36e>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10c      	bne.n	80029bc <HAL_RCC_OscConfig+0x334>
 80029a2:	4b76      	ldr	r3, [pc, #472]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	4a75      	ldr	r2, [pc, #468]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 80029a8:	f023 0301 	bic.w	r3, r3, #1
 80029ac:	6213      	str	r3, [r2, #32]
 80029ae:	4b73      	ldr	r3, [pc, #460]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	4a72      	ldr	r2, [pc, #456]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 80029b4:	f023 0304 	bic.w	r3, r3, #4
 80029b8:	6213      	str	r3, [r2, #32]
 80029ba:	e01c      	b.n	80029f6 <HAL_RCC_OscConfig+0x36e>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	2b05      	cmp	r3, #5
 80029c2:	d10c      	bne.n	80029de <HAL_RCC_OscConfig+0x356>
 80029c4:	4b6d      	ldr	r3, [pc, #436]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	4a6c      	ldr	r2, [pc, #432]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 80029ca:	f043 0304 	orr.w	r3, r3, #4
 80029ce:	6213      	str	r3, [r2, #32]
 80029d0:	4b6a      	ldr	r3, [pc, #424]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	4a69      	ldr	r2, [pc, #420]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	6213      	str	r3, [r2, #32]
 80029dc:	e00b      	b.n	80029f6 <HAL_RCC_OscConfig+0x36e>
 80029de:	4b67      	ldr	r3, [pc, #412]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	4a66      	ldr	r2, [pc, #408]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 80029e4:	f023 0301 	bic.w	r3, r3, #1
 80029e8:	6213      	str	r3, [r2, #32]
 80029ea:	4b64      	ldr	r3, [pc, #400]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	4a63      	ldr	r2, [pc, #396]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 80029f0:	f023 0304 	bic.w	r3, r3, #4
 80029f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d015      	beq.n	8002a2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fe:	f7ff fb5f 	bl	80020c0 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a04:	e00a      	b.n	8002a1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a06:	f7ff fb5b 	bl	80020c0 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e0ab      	b.n	8002b74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1c:	4b57      	ldr	r3, [pc, #348]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0ee      	beq.n	8002a06 <HAL_RCC_OscConfig+0x37e>
 8002a28:	e014      	b.n	8002a54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2a:	f7ff fb49 	bl	80020c0 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a30:	e00a      	b.n	8002a48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a32:	f7ff fb45 	bl	80020c0 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e095      	b.n	8002b74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a48:	4b4c      	ldr	r3, [pc, #304]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1ee      	bne.n	8002a32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a54:	7dfb      	ldrb	r3, [r7, #23]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d105      	bne.n	8002a66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a5a:	4b48      	ldr	r3, [pc, #288]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	4a47      	ldr	r2, [pc, #284]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 8002a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 8081 	beq.w	8002b72 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a70:	4b42      	ldr	r3, [pc, #264]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 030c 	and.w	r3, r3, #12
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d061      	beq.n	8002b40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d146      	bne.n	8002b12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a84:	4b3f      	ldr	r3, [pc, #252]	; (8002b84 <HAL_RCC_OscConfig+0x4fc>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8a:	f7ff fb19 	bl	80020c0 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a92:	f7ff fb15 	bl	80020c0 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e067      	b.n	8002b74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aa4:	4b35      	ldr	r3, [pc, #212]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1f0      	bne.n	8002a92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab8:	d108      	bne.n	8002acc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002aba:	4b30      	ldr	r3, [pc, #192]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	492d      	ldr	r1, [pc, #180]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002acc:	4b2b      	ldr	r3, [pc, #172]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a19      	ldr	r1, [r3, #32]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	430b      	orrs	r3, r1
 8002ade:	4927      	ldr	r1, [pc, #156]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ae4:	4b27      	ldr	r3, [pc, #156]	; (8002b84 <HAL_RCC_OscConfig+0x4fc>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aea:	f7ff fae9 	bl	80020c0 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af2:	f7ff fae5 	bl	80020c0 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e037      	b.n	8002b74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b04:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0x46a>
 8002b10:	e02f      	b.n	8002b72 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b12:	4b1c      	ldr	r3, [pc, #112]	; (8002b84 <HAL_RCC_OscConfig+0x4fc>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b18:	f7ff fad2 	bl	80020c0 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b20:	f7ff face 	bl	80020c0 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e020      	b.n	8002b74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b32:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x498>
 8002b3e:	e018      	b.n	8002b72 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e013      	b.n	8002b74 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_RCC_OscConfig+0x4f4>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d106      	bne.n	8002b6e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d001      	beq.n	8002b72 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40007000 	.word	0x40007000
 8002b84:	42420060 	.word	0x42420060

08002b88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0d0      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b9c:	4b6a      	ldr	r3, [pc, #424]	; (8002d48 <HAL_RCC_ClockConfig+0x1c0>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d910      	bls.n	8002bcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002baa:	4b67      	ldr	r3, [pc, #412]	; (8002d48 <HAL_RCC_ClockConfig+0x1c0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f023 0207 	bic.w	r2, r3, #7
 8002bb2:	4965      	ldr	r1, [pc, #404]	; (8002d48 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bba:	4b63      	ldr	r3, [pc, #396]	; (8002d48 <HAL_RCC_ClockConfig+0x1c0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d001      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0b8      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d020      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002be4:	4b59      	ldr	r3, [pc, #356]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	4a58      	ldr	r2, [pc, #352]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002bea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0308 	and.w	r3, r3, #8
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bfc:	4b53      	ldr	r3, [pc, #332]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	4a52      	ldr	r2, [pc, #328]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002c02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c08:	4b50      	ldr	r3, [pc, #320]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	494d      	ldr	r1, [pc, #308]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d040      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d107      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2e:	4b47      	ldr	r3, [pc, #284]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d115      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e07f      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d107      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c46:	4b41      	ldr	r3, [pc, #260]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d109      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e073      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c56:	4b3d      	ldr	r3, [pc, #244]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e06b      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c66:	4b39      	ldr	r3, [pc, #228]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f023 0203 	bic.w	r2, r3, #3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	4936      	ldr	r1, [pc, #216]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c78:	f7ff fa22 	bl	80020c0 <HAL_GetTick>
 8002c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7e:	e00a      	b.n	8002c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c80:	f7ff fa1e 	bl	80020c0 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e053      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c96:	4b2d      	ldr	r3, [pc, #180]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 020c 	and.w	r2, r3, #12
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d1eb      	bne.n	8002c80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ca8:	4b27      	ldr	r3, [pc, #156]	; (8002d48 <HAL_RCC_ClockConfig+0x1c0>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d210      	bcs.n	8002cd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb6:	4b24      	ldr	r3, [pc, #144]	; (8002d48 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f023 0207 	bic.w	r2, r3, #7
 8002cbe:	4922      	ldr	r1, [pc, #136]	; (8002d48 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc6:	4b20      	ldr	r3, [pc, #128]	; (8002d48 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e032      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ce4:	4b19      	ldr	r3, [pc, #100]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4916      	ldr	r1, [pc, #88]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d009      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d02:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	490e      	ldr	r1, [pc, #56]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d16:	f000 f821 	bl	8002d5c <HAL_RCC_GetSysClockFreq>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	490a      	ldr	r1, [pc, #40]	; (8002d50 <HAL_RCC_ClockConfig+0x1c8>)
 8002d28:	5ccb      	ldrb	r3, [r1, r3]
 8002d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2e:	4a09      	ldr	r2, [pc, #36]	; (8002d54 <HAL_RCC_ClockConfig+0x1cc>)
 8002d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d32:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <HAL_RCC_ClockConfig+0x1d0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff f980 	bl	800203c <HAL_InitTick>

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40022000 	.word	0x40022000
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	08004a3c 	.word	0x08004a3c
 8002d54:	2000000c 	.word	0x2000000c
 8002d58:	20000010 	.word	0x20000010

08002d5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d5c:	b490      	push	{r4, r7}
 8002d5e:	b08a      	sub	sp, #40	; 0x28
 8002d60:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d62:	4b2a      	ldr	r3, [pc, #168]	; (8002e0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d64:	1d3c      	adds	r4, r7, #4
 8002d66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d6c:	f240 2301 	movw	r3, #513	; 0x201
 8002d70:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	61fb      	str	r3, [r7, #28]
 8002d76:	2300      	movs	r3, #0
 8002d78:	61bb      	str	r3, [r7, #24]
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d86:	4b22      	ldr	r3, [pc, #136]	; (8002e10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d002      	beq.n	8002d9c <HAL_RCC_GetSysClockFreq+0x40>
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d003      	beq.n	8002da2 <HAL_RCC_GetSysClockFreq+0x46>
 8002d9a:	e02d      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d9c:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d9e:	623b      	str	r3, [r7, #32]
      break;
 8002da0:	e02d      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	0c9b      	lsrs	r3, r3, #18
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002dae:	4413      	add	r3, r2
 8002db0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002db4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d013      	beq.n	8002de8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002dc0:	4b13      	ldr	r3, [pc, #76]	; (8002e10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	0c5b      	lsrs	r3, r3, #17
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002dce:	4413      	add	r3, r2
 8002dd0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002dd4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	4a0e      	ldr	r2, [pc, #56]	; (8002e14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dda:	fb02 f203 	mul.w	r2, r2, r3
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
 8002de6:	e004      	b.n	8002df2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	4a0b      	ldr	r2, [pc, #44]	; (8002e18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dec:	fb02 f303 	mul.w	r3, r2, r3
 8002df0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	623b      	str	r3, [r7, #32]
      break;
 8002df6:	e002      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002df8:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dfa:	623b      	str	r3, [r7, #32]
      break;
 8002dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3728      	adds	r7, #40	; 0x28
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc90      	pop	{r4, r7}
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	08004a2c 	.word	0x08004a2c
 8002e10:	40021000 	.word	0x40021000
 8002e14:	007a1200 	.word	0x007a1200
 8002e18:	003d0900 	.word	0x003d0900

08002e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e20:	4b02      	ldr	r3, [pc, #8]	; (8002e2c <HAL_RCC_GetHCLKFreq+0x10>)
 8002e22:	681b      	ldr	r3, [r3, #0]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr
 8002e2c:	2000000c 	.word	0x2000000c

08002e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e34:	f7ff fff2 	bl	8002e1c <HAL_RCC_GetHCLKFreq>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	0a1b      	lsrs	r3, r3, #8
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	4903      	ldr	r1, [pc, #12]	; (8002e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e46:	5ccb      	ldrb	r3, [r1, r3]
 8002e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40021000 	.word	0x40021000
 8002e54:	08004a4c 	.word	0x08004a4c

08002e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e5c:	f7ff ffde 	bl	8002e1c <HAL_RCC_GetHCLKFreq>
 8002e60:	4602      	mov	r2, r0
 8002e62:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	0adb      	lsrs	r3, r3, #11
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	4903      	ldr	r1, [pc, #12]	; (8002e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e6e:	5ccb      	ldrb	r3, [r1, r3]
 8002e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	08004a4c 	.word	0x08004a4c

08002e80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e88:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <RCC_Delay+0x34>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a0a      	ldr	r2, [pc, #40]	; (8002eb8 <RCC_Delay+0x38>)
 8002e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e92:	0a5b      	lsrs	r3, r3, #9
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	fb02 f303 	mul.w	r3, r2, r3
 8002e9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e9c:	bf00      	nop
  }
  while (Delay --);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1e5a      	subs	r2, r3, #1
 8002ea2:	60fa      	str	r2, [r7, #12]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1f9      	bne.n	8002e9c <RCC_Delay+0x1c>
}
 8002ea8:	bf00      	nop
 8002eaa:	bf00      	nop
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr
 8002eb4:	2000000c 	.word	0x2000000c
 8002eb8:	10624dd3 	.word	0x10624dd3

08002ebc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e041      	b.n	8002f52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fe ff42 	bl	8001d6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4610      	mov	r0, r2
 8002efc:	f000 fc20 	bl	8003740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d001      	beq.n	8002f74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e03a      	b.n	8002fea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a18      	ldr	r2, [pc, #96]	; (8002ff4 <HAL_TIM_Base_Start_IT+0x98>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d00e      	beq.n	8002fb4 <HAL_TIM_Base_Start_IT+0x58>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f9e:	d009      	beq.n	8002fb4 <HAL_TIM_Base_Start_IT+0x58>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a14      	ldr	r2, [pc, #80]	; (8002ff8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d004      	beq.n	8002fb4 <HAL_TIM_Base_Start_IT+0x58>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a13      	ldr	r2, [pc, #76]	; (8002ffc <HAL_TIM_Base_Start_IT+0xa0>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d111      	bne.n	8002fd8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b06      	cmp	r3, #6
 8002fc4:	d010      	beq.n	8002fe8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f042 0201 	orr.w	r2, r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd6:	e007      	b.n	8002fe8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0201 	orr.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr
 8002ff4:	40012c00 	.word	0x40012c00
 8002ff8:	40000400 	.word	0x40000400
 8002ffc:	40000800 	.word	0x40000800

08003000 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e041      	b.n	8003096 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fe fec4 	bl	8001db4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3304      	adds	r3, #4
 800303c:	4619      	mov	r1, r3
 800303e:	4610      	mov	r0, r2
 8003040:	f000 fb7e 	bl	8003740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d109      	bne.n	80030c4 <HAL_TIM_PWM_Start+0x24>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	bf14      	ite	ne
 80030bc:	2301      	movne	r3, #1
 80030be:	2300      	moveq	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	e022      	b.n	800310a <HAL_TIM_PWM_Start+0x6a>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d109      	bne.n	80030de <HAL_TIM_PWM_Start+0x3e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	bf14      	ite	ne
 80030d6:	2301      	movne	r3, #1
 80030d8:	2300      	moveq	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	e015      	b.n	800310a <HAL_TIM_PWM_Start+0x6a>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d109      	bne.n	80030f8 <HAL_TIM_PWM_Start+0x58>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	bf14      	ite	ne
 80030f0:	2301      	movne	r3, #1
 80030f2:	2300      	moveq	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	e008      	b.n	800310a <HAL_TIM_PWM_Start+0x6a>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b01      	cmp	r3, #1
 8003102:	bf14      	ite	ne
 8003104:	2301      	movne	r3, #1
 8003106:	2300      	moveq	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e05e      	b.n	80031d0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d104      	bne.n	8003122 <HAL_TIM_PWM_Start+0x82>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003120:	e013      	b.n	800314a <HAL_TIM_PWM_Start+0xaa>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b04      	cmp	r3, #4
 8003126:	d104      	bne.n	8003132 <HAL_TIM_PWM_Start+0x92>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003130:	e00b      	b.n	800314a <HAL_TIM_PWM_Start+0xaa>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b08      	cmp	r3, #8
 8003136:	d104      	bne.n	8003142 <HAL_TIM_PWM_Start+0xa2>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003140:	e003      	b.n	800314a <HAL_TIM_PWM_Start+0xaa>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2202      	movs	r2, #2
 8003146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2201      	movs	r2, #1
 8003150:	6839      	ldr	r1, [r7, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fd74 	bl	8003c40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a1e      	ldr	r2, [pc, #120]	; (80031d8 <HAL_TIM_PWM_Start+0x138>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d107      	bne.n	8003172 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003170:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a18      	ldr	r2, [pc, #96]	; (80031d8 <HAL_TIM_PWM_Start+0x138>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d00e      	beq.n	800319a <HAL_TIM_PWM_Start+0xfa>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003184:	d009      	beq.n	800319a <HAL_TIM_PWM_Start+0xfa>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a14      	ldr	r2, [pc, #80]	; (80031dc <HAL_TIM_PWM_Start+0x13c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d004      	beq.n	800319a <HAL_TIM_PWM_Start+0xfa>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a12      	ldr	r2, [pc, #72]	; (80031e0 <HAL_TIM_PWM_Start+0x140>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d111      	bne.n	80031be <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2b06      	cmp	r3, #6
 80031aa:	d010      	beq.n	80031ce <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0201 	orr.w	r2, r2, #1
 80031ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031bc:	e007      	b.n	80031ce <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f042 0201 	orr.w	r2, r2, #1
 80031cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40012c00 	.word	0x40012c00
 80031dc:	40000400 	.word	0x40000400
 80031e0:	40000800 	.word	0x40000800

080031e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d122      	bne.n	8003240 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b02      	cmp	r3, #2
 8003206:	d11b      	bne.n	8003240 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f06f 0202 	mvn.w	r2, #2
 8003210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 fa6f 	bl	800370a <HAL_TIM_IC_CaptureCallback>
 800322c:	e005      	b.n	800323a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 fa62 	bl	80036f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 fa71 	bl	800371c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b04      	cmp	r3, #4
 800324c:	d122      	bne.n	8003294 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b04      	cmp	r3, #4
 800325a:	d11b      	bne.n	8003294 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f06f 0204 	mvn.w	r2, #4
 8003264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2202      	movs	r2, #2
 800326a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fa45 	bl	800370a <HAL_TIM_IC_CaptureCallback>
 8003280:	e005      	b.n	800328e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 fa38 	bl	80036f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 fa47 	bl	800371c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d122      	bne.n	80032e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d11b      	bne.n	80032e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0208 	mvn.w	r2, #8
 80032b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2204      	movs	r2, #4
 80032be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 fa1b 	bl	800370a <HAL_TIM_IC_CaptureCallback>
 80032d4:	e005      	b.n	80032e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fa0e 	bl	80036f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 fa1d 	bl	800371c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	2b10      	cmp	r3, #16
 80032f4:	d122      	bne.n	800333c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f003 0310 	and.w	r3, r3, #16
 8003300:	2b10      	cmp	r3, #16
 8003302:	d11b      	bne.n	800333c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f06f 0210 	mvn.w	r2, #16
 800330c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2208      	movs	r2, #8
 8003312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f9f1 	bl	800370a <HAL_TIM_IC_CaptureCallback>
 8003328:	e005      	b.n	8003336 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f9e4 	bl	80036f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f9f3 	bl	800371c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b01      	cmp	r3, #1
 8003348:	d10e      	bne.n	8003368 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b01      	cmp	r3, #1
 8003356:	d107      	bne.n	8003368 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f06f 0201 	mvn.w	r2, #1
 8003360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fe faae 	bl	80018c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003372:	2b80      	cmp	r3, #128	; 0x80
 8003374:	d10e      	bne.n	8003394 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003380:	2b80      	cmp	r3, #128	; 0x80
 8003382:	d107      	bne.n	8003394 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800338c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 fce1 	bl	8003d56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339e:	2b40      	cmp	r3, #64	; 0x40
 80033a0:	d10e      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ac:	2b40      	cmp	r3, #64	; 0x40
 80033ae:	d107      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f9b7 	bl	800372e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	f003 0320 	and.w	r3, r3, #32
 80033ca:	2b20      	cmp	r3, #32
 80033cc:	d10e      	bne.n	80033ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d107      	bne.n	80033ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 0220 	mvn.w	r2, #32
 80033e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fcac 	bl	8003d44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800340a:	2302      	movs	r3, #2
 800340c:	e0ac      	b.n	8003568 <HAL_TIM_PWM_ConfigChannel+0x174>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b0c      	cmp	r3, #12
 800341a:	f200 809f 	bhi.w	800355c <HAL_TIM_PWM_ConfigChannel+0x168>
 800341e:	a201      	add	r2, pc, #4	; (adr r2, 8003424 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003424:	08003459 	.word	0x08003459
 8003428:	0800355d 	.word	0x0800355d
 800342c:	0800355d 	.word	0x0800355d
 8003430:	0800355d 	.word	0x0800355d
 8003434:	08003499 	.word	0x08003499
 8003438:	0800355d 	.word	0x0800355d
 800343c:	0800355d 	.word	0x0800355d
 8003440:	0800355d 	.word	0x0800355d
 8003444:	080034db 	.word	0x080034db
 8003448:	0800355d 	.word	0x0800355d
 800344c:	0800355d 	.word	0x0800355d
 8003450:	0800355d 	.word	0x0800355d
 8003454:	0800351b 	.word	0x0800351b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	4618      	mov	r0, r3
 8003460:	f000 f9d0 	bl	8003804 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0208 	orr.w	r2, r2, #8
 8003472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699a      	ldr	r2, [r3, #24]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0204 	bic.w	r2, r2, #4
 8003482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6999      	ldr	r1, [r3, #24]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	691a      	ldr	r2, [r3, #16]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	619a      	str	r2, [r3, #24]
      break;
 8003496:	e062      	b.n	800355e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68b9      	ldr	r1, [r7, #8]
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fa16 	bl	80038d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699a      	ldr	r2, [r3, #24]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699a      	ldr	r2, [r3, #24]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6999      	ldr	r1, [r3, #24]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	021a      	lsls	r2, r3, #8
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	619a      	str	r2, [r3, #24]
      break;
 80034d8:	e041      	b.n	800355e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68b9      	ldr	r1, [r7, #8]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fa5f 	bl	80039a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	69da      	ldr	r2, [r3, #28]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f042 0208 	orr.w	r2, r2, #8
 80034f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	69da      	ldr	r2, [r3, #28]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0204 	bic.w	r2, r2, #4
 8003504:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69d9      	ldr	r1, [r3, #28]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	691a      	ldr	r2, [r3, #16]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	61da      	str	r2, [r3, #28]
      break;
 8003518:	e021      	b.n	800355e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	4618      	mov	r0, r3
 8003522:	f000 faa9 	bl	8003a78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	69da      	ldr	r2, [r3, #28]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003534:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69da      	ldr	r2, [r3, #28]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003544:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	69d9      	ldr	r1, [r3, #28]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	021a      	lsls	r2, r3, #8
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	61da      	str	r2, [r3, #28]
      break;
 800355a:	e000      	b.n	800355e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800355c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_TIM_ConfigClockSource+0x18>
 8003584:	2302      	movs	r3, #2
 8003586:	e0b3      	b.n	80036f0 <HAL_TIM_ConfigClockSource+0x180>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035c0:	d03e      	beq.n	8003640 <HAL_TIM_ConfigClockSource+0xd0>
 80035c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035c6:	f200 8087 	bhi.w	80036d8 <HAL_TIM_ConfigClockSource+0x168>
 80035ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ce:	f000 8085 	beq.w	80036dc <HAL_TIM_ConfigClockSource+0x16c>
 80035d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d6:	d87f      	bhi.n	80036d8 <HAL_TIM_ConfigClockSource+0x168>
 80035d8:	2b70      	cmp	r3, #112	; 0x70
 80035da:	d01a      	beq.n	8003612 <HAL_TIM_ConfigClockSource+0xa2>
 80035dc:	2b70      	cmp	r3, #112	; 0x70
 80035de:	d87b      	bhi.n	80036d8 <HAL_TIM_ConfigClockSource+0x168>
 80035e0:	2b60      	cmp	r3, #96	; 0x60
 80035e2:	d050      	beq.n	8003686 <HAL_TIM_ConfigClockSource+0x116>
 80035e4:	2b60      	cmp	r3, #96	; 0x60
 80035e6:	d877      	bhi.n	80036d8 <HAL_TIM_ConfigClockSource+0x168>
 80035e8:	2b50      	cmp	r3, #80	; 0x50
 80035ea:	d03c      	beq.n	8003666 <HAL_TIM_ConfigClockSource+0xf6>
 80035ec:	2b50      	cmp	r3, #80	; 0x50
 80035ee:	d873      	bhi.n	80036d8 <HAL_TIM_ConfigClockSource+0x168>
 80035f0:	2b40      	cmp	r3, #64	; 0x40
 80035f2:	d058      	beq.n	80036a6 <HAL_TIM_ConfigClockSource+0x136>
 80035f4:	2b40      	cmp	r3, #64	; 0x40
 80035f6:	d86f      	bhi.n	80036d8 <HAL_TIM_ConfigClockSource+0x168>
 80035f8:	2b30      	cmp	r3, #48	; 0x30
 80035fa:	d064      	beq.n	80036c6 <HAL_TIM_ConfigClockSource+0x156>
 80035fc:	2b30      	cmp	r3, #48	; 0x30
 80035fe:	d86b      	bhi.n	80036d8 <HAL_TIM_ConfigClockSource+0x168>
 8003600:	2b20      	cmp	r3, #32
 8003602:	d060      	beq.n	80036c6 <HAL_TIM_ConfigClockSource+0x156>
 8003604:	2b20      	cmp	r3, #32
 8003606:	d867      	bhi.n	80036d8 <HAL_TIM_ConfigClockSource+0x168>
 8003608:	2b00      	cmp	r3, #0
 800360a:	d05c      	beq.n	80036c6 <HAL_TIM_ConfigClockSource+0x156>
 800360c:	2b10      	cmp	r3, #16
 800360e:	d05a      	beq.n	80036c6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003610:	e062      	b.n	80036d8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	6899      	ldr	r1, [r3, #8]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f000 faee 	bl	8003c02 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003634:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	609a      	str	r2, [r3, #8]
      break;
 800363e:	e04e      	b.n	80036de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6818      	ldr	r0, [r3, #0]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	6899      	ldr	r1, [r3, #8]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f000 fad7 	bl	8003c02 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003662:	609a      	str	r2, [r3, #8]
      break;
 8003664:	e03b      	b.n	80036de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6818      	ldr	r0, [r3, #0]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	6859      	ldr	r1, [r3, #4]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	461a      	mov	r2, r3
 8003674:	f000 fa4e 	bl	8003b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2150      	movs	r1, #80	; 0x50
 800367e:	4618      	mov	r0, r3
 8003680:	f000 faa5 	bl	8003bce <TIM_ITRx_SetConfig>
      break;
 8003684:	e02b      	b.n	80036de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6818      	ldr	r0, [r3, #0]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	6859      	ldr	r1, [r3, #4]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	461a      	mov	r2, r3
 8003694:	f000 fa6c 	bl	8003b70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2160      	movs	r1, #96	; 0x60
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 fa95 	bl	8003bce <TIM_ITRx_SetConfig>
      break;
 80036a4:	e01b      	b.n	80036de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6818      	ldr	r0, [r3, #0]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	6859      	ldr	r1, [r3, #4]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	461a      	mov	r2, r3
 80036b4:	f000 fa2e 	bl	8003b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2140      	movs	r1, #64	; 0x40
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 fa85 	bl	8003bce <TIM_ITRx_SetConfig>
      break;
 80036c4:	e00b      	b.n	80036de <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4619      	mov	r1, r3
 80036d0:	4610      	mov	r0, r2
 80036d2:	f000 fa7c 	bl	8003bce <TIM_ITRx_SetConfig>
        break;
 80036d6:	e002      	b.n	80036de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80036d8:	bf00      	nop
 80036da:	e000      	b.n	80036de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80036dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr

0800370a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr

0800371c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr

0800372e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr

08003740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a29      	ldr	r2, [pc, #164]	; (80037f8 <TIM_Base_SetConfig+0xb8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d00b      	beq.n	8003770 <TIM_Base_SetConfig+0x30>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800375e:	d007      	beq.n	8003770 <TIM_Base_SetConfig+0x30>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a26      	ldr	r2, [pc, #152]	; (80037fc <TIM_Base_SetConfig+0xbc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d003      	beq.n	8003770 <TIM_Base_SetConfig+0x30>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a25      	ldr	r2, [pc, #148]	; (8003800 <TIM_Base_SetConfig+0xc0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d108      	bne.n	8003782 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a1c      	ldr	r2, [pc, #112]	; (80037f8 <TIM_Base_SetConfig+0xb8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00b      	beq.n	80037a2 <TIM_Base_SetConfig+0x62>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003790:	d007      	beq.n	80037a2 <TIM_Base_SetConfig+0x62>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a19      	ldr	r2, [pc, #100]	; (80037fc <TIM_Base_SetConfig+0xbc>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d003      	beq.n	80037a2 <TIM_Base_SetConfig+0x62>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a18      	ldr	r2, [pc, #96]	; (8003800 <TIM_Base_SetConfig+0xc0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d108      	bne.n	80037b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a07      	ldr	r2, [pc, #28]	; (80037f8 <TIM_Base_SetConfig+0xb8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d103      	bne.n	80037e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	615a      	str	r2, [r3, #20]
}
 80037ee:	bf00      	nop
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr
 80037f8:	40012c00 	.word	0x40012c00
 80037fc:	40000400 	.word	0x40000400
 8003800:	40000800 	.word	0x40000800

08003804 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	f023 0201 	bic.w	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f023 0303 	bic.w	r3, r3, #3
 800383a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f023 0302 	bic.w	r3, r3, #2
 800384c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a1c      	ldr	r2, [pc, #112]	; (80038cc <TIM_OC1_SetConfig+0xc8>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d10c      	bne.n	800387a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f023 0308 	bic.w	r3, r3, #8
 8003866:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	4313      	orrs	r3, r2
 8003870:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f023 0304 	bic.w	r3, r3, #4
 8003878:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a13      	ldr	r2, [pc, #76]	; (80038cc <TIM_OC1_SetConfig+0xc8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d111      	bne.n	80038a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	621a      	str	r2, [r3, #32]
}
 80038c0:	bf00      	nop
 80038c2:	371c      	adds	r7, #28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40012c00 	.word	0x40012c00

080038d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	f023 0210 	bic.w	r2, r3, #16
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	021b      	lsls	r3, r3, #8
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4313      	orrs	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f023 0320 	bic.w	r3, r3, #32
 800391a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	4313      	orrs	r3, r2
 8003926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a1d      	ldr	r2, [pc, #116]	; (80039a0 <TIM_OC2_SetConfig+0xd0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d10d      	bne.n	800394c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800394a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a14      	ldr	r2, [pc, #80]	; (80039a0 <TIM_OC2_SetConfig+0xd0>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d113      	bne.n	800397c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800395a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003962:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	621a      	str	r2, [r3, #32]
}
 8003996:	bf00      	nop
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr
 80039a0:	40012c00 	.word	0x40012c00

080039a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0303 	bic.w	r3, r3, #3
 80039da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	021b      	lsls	r3, r3, #8
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a1d      	ldr	r2, [pc, #116]	; (8003a74 <TIM_OC3_SetConfig+0xd0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d10d      	bne.n	8003a1e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a14      	ldr	r2, [pc, #80]	; (8003a74 <TIM_OC3_SetConfig+0xd0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d113      	bne.n	8003a4e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	621a      	str	r2, [r3, #32]
}
 8003a68:	bf00      	nop
 8003a6a:	371c      	adds	r7, #28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40012c00 	.word	0x40012c00

08003a78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	021b      	lsls	r3, r3, #8
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ac2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	031b      	lsls	r3, r3, #12
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a0f      	ldr	r2, [pc, #60]	; (8003b10 <TIM_OC4_SetConfig+0x98>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d109      	bne.n	8003aec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ade:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	019b      	lsls	r3, r3, #6
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	621a      	str	r2, [r3, #32]
}
 8003b06:	bf00      	nop
 8003b08:	371c      	adds	r7, #28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr
 8003b10:	40012c00 	.word	0x40012c00

08003b14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	f023 0201 	bic.w	r2, r3, #1
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f023 030a 	bic.w	r3, r3, #10
 8003b50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	621a      	str	r2, [r3, #32]
}
 8003b66:	bf00      	nop
 8003b68:	371c      	adds	r7, #28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	f023 0210 	bic.w	r2, r3, #16
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	031b      	lsls	r3, r3, #12
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	621a      	str	r2, [r3, #32]
}
 8003bc4:	bf00      	nop
 8003bc6:	371c      	adds	r7, #28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr

08003bce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b085      	sub	sp, #20
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f043 0307 	orr.w	r3, r3, #7
 8003bf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	609a      	str	r2, [r3, #8]
}
 8003bf8:	bf00      	nop
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr

08003c02 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b087      	sub	sp, #28
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
 8003c0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c1c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	021a      	lsls	r2, r3, #8
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	431a      	orrs	r2, r3
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	609a      	str	r2, [r3, #8]
}
 8003c36:	bf00      	nop
 8003c38:	371c      	adds	r7, #28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr

08003c40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f003 031f 	and.w	r3, r3, #31
 8003c52:	2201      	movs	r2, #1
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a1a      	ldr	r2, [r3, #32]
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	43db      	mvns	r3, r3
 8003c62:	401a      	ands	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a1a      	ldr	r2, [r3, #32]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f003 031f 	and.w	r3, r3, #31
 8003c72:	6879      	ldr	r1, [r7, #4]
 8003c74:	fa01 f303 	lsl.w	r3, r1, r3
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	621a      	str	r2, [r3, #32]
}
 8003c7e:	bf00      	nop
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr

08003c88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	e046      	b.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a16      	ldr	r2, [pc, #88]	; (8003d38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d00e      	beq.n	8003d02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cec:	d009      	beq.n	8003d02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a12      	ldr	r2, [pc, #72]	; (8003d3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d004      	beq.n	8003d02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a10      	ldr	r2, [pc, #64]	; (8003d40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d10c      	bne.n	8003d1c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr
 8003d38:	40012c00 	.word	0x40012c00
 8003d3c:	40000400 	.word	0x40000400
 8003d40:	40000800 	.word	0x40000800

08003d44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc80      	pop	{r7}
 8003d54:	4770      	bx	lr

08003d56 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bc80      	pop	{r7}
 8003d66:	4770      	bx	lr

08003d68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e03f      	b.n	8003dfa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d106      	bne.n	8003d94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7fe f860 	bl	8001e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2224      	movs	r2, #36	; 0x24
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003daa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f905 	bl	8003fbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695a      	ldr	r2, [r3, #20]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003de0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b08a      	sub	sp, #40	; 0x28
 8003e06:	af02      	add	r7, sp, #8
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	603b      	str	r3, [r7, #0]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b20      	cmp	r3, #32
 8003e20:	d17c      	bne.n	8003f1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <HAL_UART_Transmit+0x2c>
 8003e28:	88fb      	ldrh	r3, [r7, #6]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e075      	b.n	8003f1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <HAL_UART_Transmit+0x3e>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e06e      	b.n	8003f1e <HAL_UART_Transmit+0x11c>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2221      	movs	r2, #33	; 0x21
 8003e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e56:	f7fe f933 	bl	80020c0 <HAL_GetTick>
 8003e5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	88fa      	ldrh	r2, [r7, #6]
 8003e60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	88fa      	ldrh	r2, [r7, #6]
 8003e66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e70:	d108      	bne.n	8003e84 <HAL_UART_Transmit+0x82>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d104      	bne.n	8003e84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	61bb      	str	r3, [r7, #24]
 8003e82:	e003      	b.n	8003e8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e94:	e02a      	b.n	8003eec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2180      	movs	r1, #128	; 0x80
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 f840 	bl	8003f26 <UART_WaitOnFlagUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e036      	b.n	8003f1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10b      	bne.n	8003ece <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ec4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	3302      	adds	r3, #2
 8003eca:	61bb      	str	r3, [r7, #24]
 8003ecc:	e007      	b.n	8003ede <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	781a      	ldrb	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	3301      	adds	r3, #1
 8003edc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1cf      	bne.n	8003e96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2200      	movs	r2, #0
 8003efe:	2140      	movs	r1, #64	; 0x40
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f810 	bl	8003f26 <UART_WaitOnFlagUntilTimeout>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e006      	b.n	8003f1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	e000      	b.n	8003f1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f1c:	2302      	movs	r3, #2
  }
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3720      	adds	r7, #32
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b084      	sub	sp, #16
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	603b      	str	r3, [r7, #0]
 8003f32:	4613      	mov	r3, r2
 8003f34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f36:	e02c      	b.n	8003f92 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3e:	d028      	beq.n	8003f92 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d007      	beq.n	8003f56 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f46:	f7fe f8bb 	bl	80020c0 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d21d      	bcs.n	8003f92 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f64:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695a      	ldr	r2, [r3, #20]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0201 	bic.w	r2, r2, #1
 8003f74:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2220      	movs	r2, #32
 8003f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e00f      	b.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	bf0c      	ite	eq
 8003fa2:	2301      	moveq	r3, #1
 8003fa4:	2300      	movne	r3, #0
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	461a      	mov	r2, r3
 8003faa:	79fb      	ldrb	r3, [r7, #7]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d0c3      	beq.n	8003f38 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
	...

08003fbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ff6:	f023 030c 	bic.w	r3, r3, #12
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6812      	ldr	r2, [r2, #0]
 8003ffe:	68b9      	ldr	r1, [r7, #8]
 8004000:	430b      	orrs	r3, r1
 8004002:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699a      	ldr	r2, [r3, #24]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a2c      	ldr	r2, [pc, #176]	; (80040d0 <UART_SetConfig+0x114>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d103      	bne.n	800402c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004024:	f7fe ff18 	bl	8002e58 <HAL_RCC_GetPCLK2Freq>
 8004028:	60f8      	str	r0, [r7, #12]
 800402a:	e002      	b.n	8004032 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800402c:	f7fe ff00 	bl	8002e30 <HAL_RCC_GetPCLK1Freq>
 8004030:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4613      	mov	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	009a      	lsls	r2, r3, #2
 800403c:	441a      	add	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	fbb2 f3f3 	udiv	r3, r2, r3
 8004048:	4a22      	ldr	r2, [pc, #136]	; (80040d4 <UART_SetConfig+0x118>)
 800404a:	fba2 2303 	umull	r2, r3, r2, r3
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	0119      	lsls	r1, r3, #4
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	009a      	lsls	r2, r3, #2
 800405c:	441a      	add	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	fbb2 f2f3 	udiv	r2, r2, r3
 8004068:	4b1a      	ldr	r3, [pc, #104]	; (80040d4 <UART_SetConfig+0x118>)
 800406a:	fba3 0302 	umull	r0, r3, r3, r2
 800406e:	095b      	lsrs	r3, r3, #5
 8004070:	2064      	movs	r0, #100	; 0x64
 8004072:	fb00 f303 	mul.w	r3, r0, r3
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	3332      	adds	r3, #50	; 0x32
 800407c:	4a15      	ldr	r2, [pc, #84]	; (80040d4 <UART_SetConfig+0x118>)
 800407e:	fba2 2303 	umull	r2, r3, r2, r3
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004088:	4419      	add	r1, r3
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4613      	mov	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	009a      	lsls	r2, r3, #2
 8004094:	441a      	add	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	fbb2 f2f3 	udiv	r2, r2, r3
 80040a0:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <UART_SetConfig+0x118>)
 80040a2:	fba3 0302 	umull	r0, r3, r3, r2
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	2064      	movs	r0, #100	; 0x64
 80040aa:	fb00 f303 	mul.w	r3, r0, r3
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	3332      	adds	r3, #50	; 0x32
 80040b4:	4a07      	ldr	r2, [pc, #28]	; (80040d4 <UART_SetConfig+0x118>)
 80040b6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	f003 020f 	and.w	r2, r3, #15
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	440a      	add	r2, r1
 80040c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040c8:	bf00      	nop
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40013800 	.word	0x40013800
 80040d4:	51eb851f 	.word	0x51eb851f

080040d8 <__errno>:
 80040d8:	4b01      	ldr	r3, [pc, #4]	; (80040e0 <__errno+0x8>)
 80040da:	6818      	ldr	r0, [r3, #0]
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20000018 	.word	0x20000018

080040e4 <__libc_init_array>:
 80040e4:	b570      	push	{r4, r5, r6, lr}
 80040e6:	2600      	movs	r6, #0
 80040e8:	4d0c      	ldr	r5, [pc, #48]	; (800411c <__libc_init_array+0x38>)
 80040ea:	4c0d      	ldr	r4, [pc, #52]	; (8004120 <__libc_init_array+0x3c>)
 80040ec:	1b64      	subs	r4, r4, r5
 80040ee:	10a4      	asrs	r4, r4, #2
 80040f0:	42a6      	cmp	r6, r4
 80040f2:	d109      	bne.n	8004108 <__libc_init_array+0x24>
 80040f4:	f000 fc5c 	bl	80049b0 <_init>
 80040f8:	2600      	movs	r6, #0
 80040fa:	4d0a      	ldr	r5, [pc, #40]	; (8004124 <__libc_init_array+0x40>)
 80040fc:	4c0a      	ldr	r4, [pc, #40]	; (8004128 <__libc_init_array+0x44>)
 80040fe:	1b64      	subs	r4, r4, r5
 8004100:	10a4      	asrs	r4, r4, #2
 8004102:	42a6      	cmp	r6, r4
 8004104:	d105      	bne.n	8004112 <__libc_init_array+0x2e>
 8004106:	bd70      	pop	{r4, r5, r6, pc}
 8004108:	f855 3b04 	ldr.w	r3, [r5], #4
 800410c:	4798      	blx	r3
 800410e:	3601      	adds	r6, #1
 8004110:	e7ee      	b.n	80040f0 <__libc_init_array+0xc>
 8004112:	f855 3b04 	ldr.w	r3, [r5], #4
 8004116:	4798      	blx	r3
 8004118:	3601      	adds	r6, #1
 800411a:	e7f2      	b.n	8004102 <__libc_init_array+0x1e>
 800411c:	08004a88 	.word	0x08004a88
 8004120:	08004a88 	.word	0x08004a88
 8004124:	08004a88 	.word	0x08004a88
 8004128:	08004a8c 	.word	0x08004a8c

0800412c <memset>:
 800412c:	4603      	mov	r3, r0
 800412e:	4402      	add	r2, r0
 8004130:	4293      	cmp	r3, r2
 8004132:	d100      	bne.n	8004136 <memset+0xa>
 8004134:	4770      	bx	lr
 8004136:	f803 1b01 	strb.w	r1, [r3], #1
 800413a:	e7f9      	b.n	8004130 <memset+0x4>

0800413c <siprintf>:
 800413c:	b40e      	push	{r1, r2, r3}
 800413e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004142:	b500      	push	{lr}
 8004144:	b09c      	sub	sp, #112	; 0x70
 8004146:	ab1d      	add	r3, sp, #116	; 0x74
 8004148:	9002      	str	r0, [sp, #8]
 800414a:	9006      	str	r0, [sp, #24]
 800414c:	9107      	str	r1, [sp, #28]
 800414e:	9104      	str	r1, [sp, #16]
 8004150:	4808      	ldr	r0, [pc, #32]	; (8004174 <siprintf+0x38>)
 8004152:	4909      	ldr	r1, [pc, #36]	; (8004178 <siprintf+0x3c>)
 8004154:	f853 2b04 	ldr.w	r2, [r3], #4
 8004158:	9105      	str	r1, [sp, #20]
 800415a:	6800      	ldr	r0, [r0, #0]
 800415c:	a902      	add	r1, sp, #8
 800415e:	9301      	str	r3, [sp, #4]
 8004160:	f000 f868 	bl	8004234 <_svfiprintf_r>
 8004164:	2200      	movs	r2, #0
 8004166:	9b02      	ldr	r3, [sp, #8]
 8004168:	701a      	strb	r2, [r3, #0]
 800416a:	b01c      	add	sp, #112	; 0x70
 800416c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004170:	b003      	add	sp, #12
 8004172:	4770      	bx	lr
 8004174:	20000018 	.word	0x20000018
 8004178:	ffff0208 	.word	0xffff0208

0800417c <__ssputs_r>:
 800417c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004180:	688e      	ldr	r6, [r1, #8]
 8004182:	4682      	mov	sl, r0
 8004184:	429e      	cmp	r6, r3
 8004186:	460c      	mov	r4, r1
 8004188:	4690      	mov	r8, r2
 800418a:	461f      	mov	r7, r3
 800418c:	d838      	bhi.n	8004200 <__ssputs_r+0x84>
 800418e:	898a      	ldrh	r2, [r1, #12]
 8004190:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004194:	d032      	beq.n	80041fc <__ssputs_r+0x80>
 8004196:	6825      	ldr	r5, [r4, #0]
 8004198:	6909      	ldr	r1, [r1, #16]
 800419a:	3301      	adds	r3, #1
 800419c:	eba5 0901 	sub.w	r9, r5, r1
 80041a0:	6965      	ldr	r5, [r4, #20]
 80041a2:	444b      	add	r3, r9
 80041a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041ac:	106d      	asrs	r5, r5, #1
 80041ae:	429d      	cmp	r5, r3
 80041b0:	bf38      	it	cc
 80041b2:	461d      	movcc	r5, r3
 80041b4:	0553      	lsls	r3, r2, #21
 80041b6:	d531      	bpl.n	800421c <__ssputs_r+0xa0>
 80041b8:	4629      	mov	r1, r5
 80041ba:	f000 fb53 	bl	8004864 <_malloc_r>
 80041be:	4606      	mov	r6, r0
 80041c0:	b950      	cbnz	r0, 80041d8 <__ssputs_r+0x5c>
 80041c2:	230c      	movs	r3, #12
 80041c4:	f04f 30ff 	mov.w	r0, #4294967295
 80041c8:	f8ca 3000 	str.w	r3, [sl]
 80041cc:	89a3      	ldrh	r3, [r4, #12]
 80041ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041d2:	81a3      	strh	r3, [r4, #12]
 80041d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041d8:	464a      	mov	r2, r9
 80041da:	6921      	ldr	r1, [r4, #16]
 80041dc:	f000 face 	bl	800477c <memcpy>
 80041e0:	89a3      	ldrh	r3, [r4, #12]
 80041e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ea:	81a3      	strh	r3, [r4, #12]
 80041ec:	6126      	str	r6, [r4, #16]
 80041ee:	444e      	add	r6, r9
 80041f0:	6026      	str	r6, [r4, #0]
 80041f2:	463e      	mov	r6, r7
 80041f4:	6165      	str	r5, [r4, #20]
 80041f6:	eba5 0509 	sub.w	r5, r5, r9
 80041fa:	60a5      	str	r5, [r4, #8]
 80041fc:	42be      	cmp	r6, r7
 80041fe:	d900      	bls.n	8004202 <__ssputs_r+0x86>
 8004200:	463e      	mov	r6, r7
 8004202:	4632      	mov	r2, r6
 8004204:	4641      	mov	r1, r8
 8004206:	6820      	ldr	r0, [r4, #0]
 8004208:	f000 fac6 	bl	8004798 <memmove>
 800420c:	68a3      	ldr	r3, [r4, #8]
 800420e:	6822      	ldr	r2, [r4, #0]
 8004210:	1b9b      	subs	r3, r3, r6
 8004212:	4432      	add	r2, r6
 8004214:	2000      	movs	r0, #0
 8004216:	60a3      	str	r3, [r4, #8]
 8004218:	6022      	str	r2, [r4, #0]
 800421a:	e7db      	b.n	80041d4 <__ssputs_r+0x58>
 800421c:	462a      	mov	r2, r5
 800421e:	f000 fb7b 	bl	8004918 <_realloc_r>
 8004222:	4606      	mov	r6, r0
 8004224:	2800      	cmp	r0, #0
 8004226:	d1e1      	bne.n	80041ec <__ssputs_r+0x70>
 8004228:	4650      	mov	r0, sl
 800422a:	6921      	ldr	r1, [r4, #16]
 800422c:	f000 face 	bl	80047cc <_free_r>
 8004230:	e7c7      	b.n	80041c2 <__ssputs_r+0x46>
	...

08004234 <_svfiprintf_r>:
 8004234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004238:	4698      	mov	r8, r3
 800423a:	898b      	ldrh	r3, [r1, #12]
 800423c:	4607      	mov	r7, r0
 800423e:	061b      	lsls	r3, r3, #24
 8004240:	460d      	mov	r5, r1
 8004242:	4614      	mov	r4, r2
 8004244:	b09d      	sub	sp, #116	; 0x74
 8004246:	d50e      	bpl.n	8004266 <_svfiprintf_r+0x32>
 8004248:	690b      	ldr	r3, [r1, #16]
 800424a:	b963      	cbnz	r3, 8004266 <_svfiprintf_r+0x32>
 800424c:	2140      	movs	r1, #64	; 0x40
 800424e:	f000 fb09 	bl	8004864 <_malloc_r>
 8004252:	6028      	str	r0, [r5, #0]
 8004254:	6128      	str	r0, [r5, #16]
 8004256:	b920      	cbnz	r0, 8004262 <_svfiprintf_r+0x2e>
 8004258:	230c      	movs	r3, #12
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	f04f 30ff 	mov.w	r0, #4294967295
 8004260:	e0d1      	b.n	8004406 <_svfiprintf_r+0x1d2>
 8004262:	2340      	movs	r3, #64	; 0x40
 8004264:	616b      	str	r3, [r5, #20]
 8004266:	2300      	movs	r3, #0
 8004268:	9309      	str	r3, [sp, #36]	; 0x24
 800426a:	2320      	movs	r3, #32
 800426c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004270:	2330      	movs	r3, #48	; 0x30
 8004272:	f04f 0901 	mov.w	r9, #1
 8004276:	f8cd 800c 	str.w	r8, [sp, #12]
 800427a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004420 <_svfiprintf_r+0x1ec>
 800427e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004282:	4623      	mov	r3, r4
 8004284:	469a      	mov	sl, r3
 8004286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800428a:	b10a      	cbz	r2, 8004290 <_svfiprintf_r+0x5c>
 800428c:	2a25      	cmp	r2, #37	; 0x25
 800428e:	d1f9      	bne.n	8004284 <_svfiprintf_r+0x50>
 8004290:	ebba 0b04 	subs.w	fp, sl, r4
 8004294:	d00b      	beq.n	80042ae <_svfiprintf_r+0x7a>
 8004296:	465b      	mov	r3, fp
 8004298:	4622      	mov	r2, r4
 800429a:	4629      	mov	r1, r5
 800429c:	4638      	mov	r0, r7
 800429e:	f7ff ff6d 	bl	800417c <__ssputs_r>
 80042a2:	3001      	adds	r0, #1
 80042a4:	f000 80aa 	beq.w	80043fc <_svfiprintf_r+0x1c8>
 80042a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042aa:	445a      	add	r2, fp
 80042ac:	9209      	str	r2, [sp, #36]	; 0x24
 80042ae:	f89a 3000 	ldrb.w	r3, [sl]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 80a2 	beq.w	80043fc <_svfiprintf_r+0x1c8>
 80042b8:	2300      	movs	r3, #0
 80042ba:	f04f 32ff 	mov.w	r2, #4294967295
 80042be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042c2:	f10a 0a01 	add.w	sl, sl, #1
 80042c6:	9304      	str	r3, [sp, #16]
 80042c8:	9307      	str	r3, [sp, #28]
 80042ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042ce:	931a      	str	r3, [sp, #104]	; 0x68
 80042d0:	4654      	mov	r4, sl
 80042d2:	2205      	movs	r2, #5
 80042d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042d8:	4851      	ldr	r0, [pc, #324]	; (8004420 <_svfiprintf_r+0x1ec>)
 80042da:	f000 fa41 	bl	8004760 <memchr>
 80042de:	9a04      	ldr	r2, [sp, #16]
 80042e0:	b9d8      	cbnz	r0, 800431a <_svfiprintf_r+0xe6>
 80042e2:	06d0      	lsls	r0, r2, #27
 80042e4:	bf44      	itt	mi
 80042e6:	2320      	movmi	r3, #32
 80042e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042ec:	0711      	lsls	r1, r2, #28
 80042ee:	bf44      	itt	mi
 80042f0:	232b      	movmi	r3, #43	; 0x2b
 80042f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042f6:	f89a 3000 	ldrb.w	r3, [sl]
 80042fa:	2b2a      	cmp	r3, #42	; 0x2a
 80042fc:	d015      	beq.n	800432a <_svfiprintf_r+0xf6>
 80042fe:	4654      	mov	r4, sl
 8004300:	2000      	movs	r0, #0
 8004302:	f04f 0c0a 	mov.w	ip, #10
 8004306:	9a07      	ldr	r2, [sp, #28]
 8004308:	4621      	mov	r1, r4
 800430a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800430e:	3b30      	subs	r3, #48	; 0x30
 8004310:	2b09      	cmp	r3, #9
 8004312:	d94e      	bls.n	80043b2 <_svfiprintf_r+0x17e>
 8004314:	b1b0      	cbz	r0, 8004344 <_svfiprintf_r+0x110>
 8004316:	9207      	str	r2, [sp, #28]
 8004318:	e014      	b.n	8004344 <_svfiprintf_r+0x110>
 800431a:	eba0 0308 	sub.w	r3, r0, r8
 800431e:	fa09 f303 	lsl.w	r3, r9, r3
 8004322:	4313      	orrs	r3, r2
 8004324:	46a2      	mov	sl, r4
 8004326:	9304      	str	r3, [sp, #16]
 8004328:	e7d2      	b.n	80042d0 <_svfiprintf_r+0x9c>
 800432a:	9b03      	ldr	r3, [sp, #12]
 800432c:	1d19      	adds	r1, r3, #4
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	9103      	str	r1, [sp, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	bfbb      	ittet	lt
 8004336:	425b      	neglt	r3, r3
 8004338:	f042 0202 	orrlt.w	r2, r2, #2
 800433c:	9307      	strge	r3, [sp, #28]
 800433e:	9307      	strlt	r3, [sp, #28]
 8004340:	bfb8      	it	lt
 8004342:	9204      	strlt	r2, [sp, #16]
 8004344:	7823      	ldrb	r3, [r4, #0]
 8004346:	2b2e      	cmp	r3, #46	; 0x2e
 8004348:	d10c      	bne.n	8004364 <_svfiprintf_r+0x130>
 800434a:	7863      	ldrb	r3, [r4, #1]
 800434c:	2b2a      	cmp	r3, #42	; 0x2a
 800434e:	d135      	bne.n	80043bc <_svfiprintf_r+0x188>
 8004350:	9b03      	ldr	r3, [sp, #12]
 8004352:	3402      	adds	r4, #2
 8004354:	1d1a      	adds	r2, r3, #4
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	9203      	str	r2, [sp, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	bfb8      	it	lt
 800435e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004362:	9305      	str	r3, [sp, #20]
 8004364:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004430 <_svfiprintf_r+0x1fc>
 8004368:	2203      	movs	r2, #3
 800436a:	4650      	mov	r0, sl
 800436c:	7821      	ldrb	r1, [r4, #0]
 800436e:	f000 f9f7 	bl	8004760 <memchr>
 8004372:	b140      	cbz	r0, 8004386 <_svfiprintf_r+0x152>
 8004374:	2340      	movs	r3, #64	; 0x40
 8004376:	eba0 000a 	sub.w	r0, r0, sl
 800437a:	fa03 f000 	lsl.w	r0, r3, r0
 800437e:	9b04      	ldr	r3, [sp, #16]
 8004380:	3401      	adds	r4, #1
 8004382:	4303      	orrs	r3, r0
 8004384:	9304      	str	r3, [sp, #16]
 8004386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800438a:	2206      	movs	r2, #6
 800438c:	4825      	ldr	r0, [pc, #148]	; (8004424 <_svfiprintf_r+0x1f0>)
 800438e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004392:	f000 f9e5 	bl	8004760 <memchr>
 8004396:	2800      	cmp	r0, #0
 8004398:	d038      	beq.n	800440c <_svfiprintf_r+0x1d8>
 800439a:	4b23      	ldr	r3, [pc, #140]	; (8004428 <_svfiprintf_r+0x1f4>)
 800439c:	bb1b      	cbnz	r3, 80043e6 <_svfiprintf_r+0x1b2>
 800439e:	9b03      	ldr	r3, [sp, #12]
 80043a0:	3307      	adds	r3, #7
 80043a2:	f023 0307 	bic.w	r3, r3, #7
 80043a6:	3308      	adds	r3, #8
 80043a8:	9303      	str	r3, [sp, #12]
 80043aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043ac:	4433      	add	r3, r6
 80043ae:	9309      	str	r3, [sp, #36]	; 0x24
 80043b0:	e767      	b.n	8004282 <_svfiprintf_r+0x4e>
 80043b2:	460c      	mov	r4, r1
 80043b4:	2001      	movs	r0, #1
 80043b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80043ba:	e7a5      	b.n	8004308 <_svfiprintf_r+0xd4>
 80043bc:	2300      	movs	r3, #0
 80043be:	f04f 0c0a 	mov.w	ip, #10
 80043c2:	4619      	mov	r1, r3
 80043c4:	3401      	adds	r4, #1
 80043c6:	9305      	str	r3, [sp, #20]
 80043c8:	4620      	mov	r0, r4
 80043ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043ce:	3a30      	subs	r2, #48	; 0x30
 80043d0:	2a09      	cmp	r2, #9
 80043d2:	d903      	bls.n	80043dc <_svfiprintf_r+0x1a8>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0c5      	beq.n	8004364 <_svfiprintf_r+0x130>
 80043d8:	9105      	str	r1, [sp, #20]
 80043da:	e7c3      	b.n	8004364 <_svfiprintf_r+0x130>
 80043dc:	4604      	mov	r4, r0
 80043de:	2301      	movs	r3, #1
 80043e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80043e4:	e7f0      	b.n	80043c8 <_svfiprintf_r+0x194>
 80043e6:	ab03      	add	r3, sp, #12
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	462a      	mov	r2, r5
 80043ec:	4638      	mov	r0, r7
 80043ee:	4b0f      	ldr	r3, [pc, #60]	; (800442c <_svfiprintf_r+0x1f8>)
 80043f0:	a904      	add	r1, sp, #16
 80043f2:	f3af 8000 	nop.w
 80043f6:	1c42      	adds	r2, r0, #1
 80043f8:	4606      	mov	r6, r0
 80043fa:	d1d6      	bne.n	80043aa <_svfiprintf_r+0x176>
 80043fc:	89ab      	ldrh	r3, [r5, #12]
 80043fe:	065b      	lsls	r3, r3, #25
 8004400:	f53f af2c 	bmi.w	800425c <_svfiprintf_r+0x28>
 8004404:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004406:	b01d      	add	sp, #116	; 0x74
 8004408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800440c:	ab03      	add	r3, sp, #12
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	462a      	mov	r2, r5
 8004412:	4638      	mov	r0, r7
 8004414:	4b05      	ldr	r3, [pc, #20]	; (800442c <_svfiprintf_r+0x1f8>)
 8004416:	a904      	add	r1, sp, #16
 8004418:	f000 f87c 	bl	8004514 <_printf_i>
 800441c:	e7eb      	b.n	80043f6 <_svfiprintf_r+0x1c2>
 800441e:	bf00      	nop
 8004420:	08004a54 	.word	0x08004a54
 8004424:	08004a5e 	.word	0x08004a5e
 8004428:	00000000 	.word	0x00000000
 800442c:	0800417d 	.word	0x0800417d
 8004430:	08004a5a 	.word	0x08004a5a

08004434 <_printf_common>:
 8004434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004438:	4616      	mov	r6, r2
 800443a:	4699      	mov	r9, r3
 800443c:	688a      	ldr	r2, [r1, #8]
 800443e:	690b      	ldr	r3, [r1, #16]
 8004440:	4607      	mov	r7, r0
 8004442:	4293      	cmp	r3, r2
 8004444:	bfb8      	it	lt
 8004446:	4613      	movlt	r3, r2
 8004448:	6033      	str	r3, [r6, #0]
 800444a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800444e:	460c      	mov	r4, r1
 8004450:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004454:	b10a      	cbz	r2, 800445a <_printf_common+0x26>
 8004456:	3301      	adds	r3, #1
 8004458:	6033      	str	r3, [r6, #0]
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	0699      	lsls	r1, r3, #26
 800445e:	bf42      	ittt	mi
 8004460:	6833      	ldrmi	r3, [r6, #0]
 8004462:	3302      	addmi	r3, #2
 8004464:	6033      	strmi	r3, [r6, #0]
 8004466:	6825      	ldr	r5, [r4, #0]
 8004468:	f015 0506 	ands.w	r5, r5, #6
 800446c:	d106      	bne.n	800447c <_printf_common+0x48>
 800446e:	f104 0a19 	add.w	sl, r4, #25
 8004472:	68e3      	ldr	r3, [r4, #12]
 8004474:	6832      	ldr	r2, [r6, #0]
 8004476:	1a9b      	subs	r3, r3, r2
 8004478:	42ab      	cmp	r3, r5
 800447a:	dc28      	bgt.n	80044ce <_printf_common+0x9a>
 800447c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004480:	1e13      	subs	r3, r2, #0
 8004482:	6822      	ldr	r2, [r4, #0]
 8004484:	bf18      	it	ne
 8004486:	2301      	movne	r3, #1
 8004488:	0692      	lsls	r2, r2, #26
 800448a:	d42d      	bmi.n	80044e8 <_printf_common+0xb4>
 800448c:	4649      	mov	r1, r9
 800448e:	4638      	mov	r0, r7
 8004490:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004494:	47c0      	blx	r8
 8004496:	3001      	adds	r0, #1
 8004498:	d020      	beq.n	80044dc <_printf_common+0xa8>
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	68e5      	ldr	r5, [r4, #12]
 800449e:	f003 0306 	and.w	r3, r3, #6
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	bf18      	it	ne
 80044a6:	2500      	movne	r5, #0
 80044a8:	6832      	ldr	r2, [r6, #0]
 80044aa:	f04f 0600 	mov.w	r6, #0
 80044ae:	68a3      	ldr	r3, [r4, #8]
 80044b0:	bf08      	it	eq
 80044b2:	1aad      	subeq	r5, r5, r2
 80044b4:	6922      	ldr	r2, [r4, #16]
 80044b6:	bf08      	it	eq
 80044b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044bc:	4293      	cmp	r3, r2
 80044be:	bfc4      	itt	gt
 80044c0:	1a9b      	subgt	r3, r3, r2
 80044c2:	18ed      	addgt	r5, r5, r3
 80044c4:	341a      	adds	r4, #26
 80044c6:	42b5      	cmp	r5, r6
 80044c8:	d11a      	bne.n	8004500 <_printf_common+0xcc>
 80044ca:	2000      	movs	r0, #0
 80044cc:	e008      	b.n	80044e0 <_printf_common+0xac>
 80044ce:	2301      	movs	r3, #1
 80044d0:	4652      	mov	r2, sl
 80044d2:	4649      	mov	r1, r9
 80044d4:	4638      	mov	r0, r7
 80044d6:	47c0      	blx	r8
 80044d8:	3001      	adds	r0, #1
 80044da:	d103      	bne.n	80044e4 <_printf_common+0xb0>
 80044dc:	f04f 30ff 	mov.w	r0, #4294967295
 80044e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044e4:	3501      	adds	r5, #1
 80044e6:	e7c4      	b.n	8004472 <_printf_common+0x3e>
 80044e8:	2030      	movs	r0, #48	; 0x30
 80044ea:	18e1      	adds	r1, r4, r3
 80044ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044f6:	4422      	add	r2, r4
 80044f8:	3302      	adds	r3, #2
 80044fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044fe:	e7c5      	b.n	800448c <_printf_common+0x58>
 8004500:	2301      	movs	r3, #1
 8004502:	4622      	mov	r2, r4
 8004504:	4649      	mov	r1, r9
 8004506:	4638      	mov	r0, r7
 8004508:	47c0      	blx	r8
 800450a:	3001      	adds	r0, #1
 800450c:	d0e6      	beq.n	80044dc <_printf_common+0xa8>
 800450e:	3601      	adds	r6, #1
 8004510:	e7d9      	b.n	80044c6 <_printf_common+0x92>
	...

08004514 <_printf_i>:
 8004514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004518:	460c      	mov	r4, r1
 800451a:	7e27      	ldrb	r7, [r4, #24]
 800451c:	4691      	mov	r9, r2
 800451e:	2f78      	cmp	r7, #120	; 0x78
 8004520:	4680      	mov	r8, r0
 8004522:	469a      	mov	sl, r3
 8004524:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004526:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800452a:	d807      	bhi.n	800453c <_printf_i+0x28>
 800452c:	2f62      	cmp	r7, #98	; 0x62
 800452e:	d80a      	bhi.n	8004546 <_printf_i+0x32>
 8004530:	2f00      	cmp	r7, #0
 8004532:	f000 80d9 	beq.w	80046e8 <_printf_i+0x1d4>
 8004536:	2f58      	cmp	r7, #88	; 0x58
 8004538:	f000 80a4 	beq.w	8004684 <_printf_i+0x170>
 800453c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004540:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004544:	e03a      	b.n	80045bc <_printf_i+0xa8>
 8004546:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800454a:	2b15      	cmp	r3, #21
 800454c:	d8f6      	bhi.n	800453c <_printf_i+0x28>
 800454e:	a001      	add	r0, pc, #4	; (adr r0, 8004554 <_printf_i+0x40>)
 8004550:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004554:	080045ad 	.word	0x080045ad
 8004558:	080045c1 	.word	0x080045c1
 800455c:	0800453d 	.word	0x0800453d
 8004560:	0800453d 	.word	0x0800453d
 8004564:	0800453d 	.word	0x0800453d
 8004568:	0800453d 	.word	0x0800453d
 800456c:	080045c1 	.word	0x080045c1
 8004570:	0800453d 	.word	0x0800453d
 8004574:	0800453d 	.word	0x0800453d
 8004578:	0800453d 	.word	0x0800453d
 800457c:	0800453d 	.word	0x0800453d
 8004580:	080046cf 	.word	0x080046cf
 8004584:	080045f1 	.word	0x080045f1
 8004588:	080046b1 	.word	0x080046b1
 800458c:	0800453d 	.word	0x0800453d
 8004590:	0800453d 	.word	0x0800453d
 8004594:	080046f1 	.word	0x080046f1
 8004598:	0800453d 	.word	0x0800453d
 800459c:	080045f1 	.word	0x080045f1
 80045a0:	0800453d 	.word	0x0800453d
 80045a4:	0800453d 	.word	0x0800453d
 80045a8:	080046b9 	.word	0x080046b9
 80045ac:	680b      	ldr	r3, [r1, #0]
 80045ae:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80045b2:	1d1a      	adds	r2, r3, #4
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	600a      	str	r2, [r1, #0]
 80045b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045bc:	2301      	movs	r3, #1
 80045be:	e0a4      	b.n	800470a <_printf_i+0x1f6>
 80045c0:	6825      	ldr	r5, [r4, #0]
 80045c2:	6808      	ldr	r0, [r1, #0]
 80045c4:	062e      	lsls	r6, r5, #24
 80045c6:	f100 0304 	add.w	r3, r0, #4
 80045ca:	d50a      	bpl.n	80045e2 <_printf_i+0xce>
 80045cc:	6805      	ldr	r5, [r0, #0]
 80045ce:	600b      	str	r3, [r1, #0]
 80045d0:	2d00      	cmp	r5, #0
 80045d2:	da03      	bge.n	80045dc <_printf_i+0xc8>
 80045d4:	232d      	movs	r3, #45	; 0x2d
 80045d6:	426d      	negs	r5, r5
 80045d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045dc:	230a      	movs	r3, #10
 80045de:	485e      	ldr	r0, [pc, #376]	; (8004758 <_printf_i+0x244>)
 80045e0:	e019      	b.n	8004616 <_printf_i+0x102>
 80045e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80045e6:	6805      	ldr	r5, [r0, #0]
 80045e8:	600b      	str	r3, [r1, #0]
 80045ea:	bf18      	it	ne
 80045ec:	b22d      	sxthne	r5, r5
 80045ee:	e7ef      	b.n	80045d0 <_printf_i+0xbc>
 80045f0:	680b      	ldr	r3, [r1, #0]
 80045f2:	6825      	ldr	r5, [r4, #0]
 80045f4:	1d18      	adds	r0, r3, #4
 80045f6:	6008      	str	r0, [r1, #0]
 80045f8:	0628      	lsls	r0, r5, #24
 80045fa:	d501      	bpl.n	8004600 <_printf_i+0xec>
 80045fc:	681d      	ldr	r5, [r3, #0]
 80045fe:	e002      	b.n	8004606 <_printf_i+0xf2>
 8004600:	0669      	lsls	r1, r5, #25
 8004602:	d5fb      	bpl.n	80045fc <_printf_i+0xe8>
 8004604:	881d      	ldrh	r5, [r3, #0]
 8004606:	2f6f      	cmp	r7, #111	; 0x6f
 8004608:	bf0c      	ite	eq
 800460a:	2308      	moveq	r3, #8
 800460c:	230a      	movne	r3, #10
 800460e:	4852      	ldr	r0, [pc, #328]	; (8004758 <_printf_i+0x244>)
 8004610:	2100      	movs	r1, #0
 8004612:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004616:	6866      	ldr	r6, [r4, #4]
 8004618:	2e00      	cmp	r6, #0
 800461a:	bfa8      	it	ge
 800461c:	6821      	ldrge	r1, [r4, #0]
 800461e:	60a6      	str	r6, [r4, #8]
 8004620:	bfa4      	itt	ge
 8004622:	f021 0104 	bicge.w	r1, r1, #4
 8004626:	6021      	strge	r1, [r4, #0]
 8004628:	b90d      	cbnz	r5, 800462e <_printf_i+0x11a>
 800462a:	2e00      	cmp	r6, #0
 800462c:	d04d      	beq.n	80046ca <_printf_i+0x1b6>
 800462e:	4616      	mov	r6, r2
 8004630:	fbb5 f1f3 	udiv	r1, r5, r3
 8004634:	fb03 5711 	mls	r7, r3, r1, r5
 8004638:	5dc7      	ldrb	r7, [r0, r7]
 800463a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800463e:	462f      	mov	r7, r5
 8004640:	42bb      	cmp	r3, r7
 8004642:	460d      	mov	r5, r1
 8004644:	d9f4      	bls.n	8004630 <_printf_i+0x11c>
 8004646:	2b08      	cmp	r3, #8
 8004648:	d10b      	bne.n	8004662 <_printf_i+0x14e>
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	07df      	lsls	r7, r3, #31
 800464e:	d508      	bpl.n	8004662 <_printf_i+0x14e>
 8004650:	6923      	ldr	r3, [r4, #16]
 8004652:	6861      	ldr	r1, [r4, #4]
 8004654:	4299      	cmp	r1, r3
 8004656:	bfde      	ittt	le
 8004658:	2330      	movle	r3, #48	; 0x30
 800465a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800465e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004662:	1b92      	subs	r2, r2, r6
 8004664:	6122      	str	r2, [r4, #16]
 8004666:	464b      	mov	r3, r9
 8004668:	4621      	mov	r1, r4
 800466a:	4640      	mov	r0, r8
 800466c:	f8cd a000 	str.w	sl, [sp]
 8004670:	aa03      	add	r2, sp, #12
 8004672:	f7ff fedf 	bl	8004434 <_printf_common>
 8004676:	3001      	adds	r0, #1
 8004678:	d14c      	bne.n	8004714 <_printf_i+0x200>
 800467a:	f04f 30ff 	mov.w	r0, #4294967295
 800467e:	b004      	add	sp, #16
 8004680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004684:	4834      	ldr	r0, [pc, #208]	; (8004758 <_printf_i+0x244>)
 8004686:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800468a:	680e      	ldr	r6, [r1, #0]
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004692:	061f      	lsls	r7, r3, #24
 8004694:	600e      	str	r6, [r1, #0]
 8004696:	d514      	bpl.n	80046c2 <_printf_i+0x1ae>
 8004698:	07d9      	lsls	r1, r3, #31
 800469a:	bf44      	itt	mi
 800469c:	f043 0320 	orrmi.w	r3, r3, #32
 80046a0:	6023      	strmi	r3, [r4, #0]
 80046a2:	b91d      	cbnz	r5, 80046ac <_printf_i+0x198>
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	f023 0320 	bic.w	r3, r3, #32
 80046aa:	6023      	str	r3, [r4, #0]
 80046ac:	2310      	movs	r3, #16
 80046ae:	e7af      	b.n	8004610 <_printf_i+0xfc>
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	f043 0320 	orr.w	r3, r3, #32
 80046b6:	6023      	str	r3, [r4, #0]
 80046b8:	2378      	movs	r3, #120	; 0x78
 80046ba:	4828      	ldr	r0, [pc, #160]	; (800475c <_printf_i+0x248>)
 80046bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046c0:	e7e3      	b.n	800468a <_printf_i+0x176>
 80046c2:	065e      	lsls	r6, r3, #25
 80046c4:	bf48      	it	mi
 80046c6:	b2ad      	uxthmi	r5, r5
 80046c8:	e7e6      	b.n	8004698 <_printf_i+0x184>
 80046ca:	4616      	mov	r6, r2
 80046cc:	e7bb      	b.n	8004646 <_printf_i+0x132>
 80046ce:	680b      	ldr	r3, [r1, #0]
 80046d0:	6826      	ldr	r6, [r4, #0]
 80046d2:	1d1d      	adds	r5, r3, #4
 80046d4:	6960      	ldr	r0, [r4, #20]
 80046d6:	600d      	str	r5, [r1, #0]
 80046d8:	0635      	lsls	r5, r6, #24
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	d501      	bpl.n	80046e2 <_printf_i+0x1ce>
 80046de:	6018      	str	r0, [r3, #0]
 80046e0:	e002      	b.n	80046e8 <_printf_i+0x1d4>
 80046e2:	0671      	lsls	r1, r6, #25
 80046e4:	d5fb      	bpl.n	80046de <_printf_i+0x1ca>
 80046e6:	8018      	strh	r0, [r3, #0]
 80046e8:	2300      	movs	r3, #0
 80046ea:	4616      	mov	r6, r2
 80046ec:	6123      	str	r3, [r4, #16]
 80046ee:	e7ba      	b.n	8004666 <_printf_i+0x152>
 80046f0:	680b      	ldr	r3, [r1, #0]
 80046f2:	1d1a      	adds	r2, r3, #4
 80046f4:	600a      	str	r2, [r1, #0]
 80046f6:	681e      	ldr	r6, [r3, #0]
 80046f8:	2100      	movs	r1, #0
 80046fa:	4630      	mov	r0, r6
 80046fc:	6862      	ldr	r2, [r4, #4]
 80046fe:	f000 f82f 	bl	8004760 <memchr>
 8004702:	b108      	cbz	r0, 8004708 <_printf_i+0x1f4>
 8004704:	1b80      	subs	r0, r0, r6
 8004706:	6060      	str	r0, [r4, #4]
 8004708:	6863      	ldr	r3, [r4, #4]
 800470a:	6123      	str	r3, [r4, #16]
 800470c:	2300      	movs	r3, #0
 800470e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004712:	e7a8      	b.n	8004666 <_printf_i+0x152>
 8004714:	4632      	mov	r2, r6
 8004716:	4649      	mov	r1, r9
 8004718:	4640      	mov	r0, r8
 800471a:	6923      	ldr	r3, [r4, #16]
 800471c:	47d0      	blx	sl
 800471e:	3001      	adds	r0, #1
 8004720:	d0ab      	beq.n	800467a <_printf_i+0x166>
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	079b      	lsls	r3, r3, #30
 8004726:	d413      	bmi.n	8004750 <_printf_i+0x23c>
 8004728:	68e0      	ldr	r0, [r4, #12]
 800472a:	9b03      	ldr	r3, [sp, #12]
 800472c:	4298      	cmp	r0, r3
 800472e:	bfb8      	it	lt
 8004730:	4618      	movlt	r0, r3
 8004732:	e7a4      	b.n	800467e <_printf_i+0x16a>
 8004734:	2301      	movs	r3, #1
 8004736:	4632      	mov	r2, r6
 8004738:	4649      	mov	r1, r9
 800473a:	4640      	mov	r0, r8
 800473c:	47d0      	blx	sl
 800473e:	3001      	adds	r0, #1
 8004740:	d09b      	beq.n	800467a <_printf_i+0x166>
 8004742:	3501      	adds	r5, #1
 8004744:	68e3      	ldr	r3, [r4, #12]
 8004746:	9903      	ldr	r1, [sp, #12]
 8004748:	1a5b      	subs	r3, r3, r1
 800474a:	42ab      	cmp	r3, r5
 800474c:	dcf2      	bgt.n	8004734 <_printf_i+0x220>
 800474e:	e7eb      	b.n	8004728 <_printf_i+0x214>
 8004750:	2500      	movs	r5, #0
 8004752:	f104 0619 	add.w	r6, r4, #25
 8004756:	e7f5      	b.n	8004744 <_printf_i+0x230>
 8004758:	08004a65 	.word	0x08004a65
 800475c:	08004a76 	.word	0x08004a76

08004760 <memchr>:
 8004760:	4603      	mov	r3, r0
 8004762:	b510      	push	{r4, lr}
 8004764:	b2c9      	uxtb	r1, r1
 8004766:	4402      	add	r2, r0
 8004768:	4293      	cmp	r3, r2
 800476a:	4618      	mov	r0, r3
 800476c:	d101      	bne.n	8004772 <memchr+0x12>
 800476e:	2000      	movs	r0, #0
 8004770:	e003      	b.n	800477a <memchr+0x1a>
 8004772:	7804      	ldrb	r4, [r0, #0]
 8004774:	3301      	adds	r3, #1
 8004776:	428c      	cmp	r4, r1
 8004778:	d1f6      	bne.n	8004768 <memchr+0x8>
 800477a:	bd10      	pop	{r4, pc}

0800477c <memcpy>:
 800477c:	440a      	add	r2, r1
 800477e:	4291      	cmp	r1, r2
 8004780:	f100 33ff 	add.w	r3, r0, #4294967295
 8004784:	d100      	bne.n	8004788 <memcpy+0xc>
 8004786:	4770      	bx	lr
 8004788:	b510      	push	{r4, lr}
 800478a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800478e:	4291      	cmp	r1, r2
 8004790:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004794:	d1f9      	bne.n	800478a <memcpy+0xe>
 8004796:	bd10      	pop	{r4, pc}

08004798 <memmove>:
 8004798:	4288      	cmp	r0, r1
 800479a:	b510      	push	{r4, lr}
 800479c:	eb01 0402 	add.w	r4, r1, r2
 80047a0:	d902      	bls.n	80047a8 <memmove+0x10>
 80047a2:	4284      	cmp	r4, r0
 80047a4:	4623      	mov	r3, r4
 80047a6:	d807      	bhi.n	80047b8 <memmove+0x20>
 80047a8:	1e43      	subs	r3, r0, #1
 80047aa:	42a1      	cmp	r1, r4
 80047ac:	d008      	beq.n	80047c0 <memmove+0x28>
 80047ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047b6:	e7f8      	b.n	80047aa <memmove+0x12>
 80047b8:	4601      	mov	r1, r0
 80047ba:	4402      	add	r2, r0
 80047bc:	428a      	cmp	r2, r1
 80047be:	d100      	bne.n	80047c2 <memmove+0x2a>
 80047c0:	bd10      	pop	{r4, pc}
 80047c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047ca:	e7f7      	b.n	80047bc <memmove+0x24>

080047cc <_free_r>:
 80047cc:	b538      	push	{r3, r4, r5, lr}
 80047ce:	4605      	mov	r5, r0
 80047d0:	2900      	cmp	r1, #0
 80047d2:	d043      	beq.n	800485c <_free_r+0x90>
 80047d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047d8:	1f0c      	subs	r4, r1, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	bfb8      	it	lt
 80047de:	18e4      	addlt	r4, r4, r3
 80047e0:	f000 f8d0 	bl	8004984 <__malloc_lock>
 80047e4:	4a1e      	ldr	r2, [pc, #120]	; (8004860 <_free_r+0x94>)
 80047e6:	6813      	ldr	r3, [r2, #0]
 80047e8:	4610      	mov	r0, r2
 80047ea:	b933      	cbnz	r3, 80047fa <_free_r+0x2e>
 80047ec:	6063      	str	r3, [r4, #4]
 80047ee:	6014      	str	r4, [r2, #0]
 80047f0:	4628      	mov	r0, r5
 80047f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047f6:	f000 b8cb 	b.w	8004990 <__malloc_unlock>
 80047fa:	42a3      	cmp	r3, r4
 80047fc:	d90a      	bls.n	8004814 <_free_r+0x48>
 80047fe:	6821      	ldr	r1, [r4, #0]
 8004800:	1862      	adds	r2, r4, r1
 8004802:	4293      	cmp	r3, r2
 8004804:	bf01      	itttt	eq
 8004806:	681a      	ldreq	r2, [r3, #0]
 8004808:	685b      	ldreq	r3, [r3, #4]
 800480a:	1852      	addeq	r2, r2, r1
 800480c:	6022      	streq	r2, [r4, #0]
 800480e:	6063      	str	r3, [r4, #4]
 8004810:	6004      	str	r4, [r0, #0]
 8004812:	e7ed      	b.n	80047f0 <_free_r+0x24>
 8004814:	461a      	mov	r2, r3
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	b10b      	cbz	r3, 800481e <_free_r+0x52>
 800481a:	42a3      	cmp	r3, r4
 800481c:	d9fa      	bls.n	8004814 <_free_r+0x48>
 800481e:	6811      	ldr	r1, [r2, #0]
 8004820:	1850      	adds	r0, r2, r1
 8004822:	42a0      	cmp	r0, r4
 8004824:	d10b      	bne.n	800483e <_free_r+0x72>
 8004826:	6820      	ldr	r0, [r4, #0]
 8004828:	4401      	add	r1, r0
 800482a:	1850      	adds	r0, r2, r1
 800482c:	4283      	cmp	r3, r0
 800482e:	6011      	str	r1, [r2, #0]
 8004830:	d1de      	bne.n	80047f0 <_free_r+0x24>
 8004832:	6818      	ldr	r0, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	4401      	add	r1, r0
 8004838:	6011      	str	r1, [r2, #0]
 800483a:	6053      	str	r3, [r2, #4]
 800483c:	e7d8      	b.n	80047f0 <_free_r+0x24>
 800483e:	d902      	bls.n	8004846 <_free_r+0x7a>
 8004840:	230c      	movs	r3, #12
 8004842:	602b      	str	r3, [r5, #0]
 8004844:	e7d4      	b.n	80047f0 <_free_r+0x24>
 8004846:	6820      	ldr	r0, [r4, #0]
 8004848:	1821      	adds	r1, r4, r0
 800484a:	428b      	cmp	r3, r1
 800484c:	bf01      	itttt	eq
 800484e:	6819      	ldreq	r1, [r3, #0]
 8004850:	685b      	ldreq	r3, [r3, #4]
 8004852:	1809      	addeq	r1, r1, r0
 8004854:	6021      	streq	r1, [r4, #0]
 8004856:	6063      	str	r3, [r4, #4]
 8004858:	6054      	str	r4, [r2, #4]
 800485a:	e7c9      	b.n	80047f0 <_free_r+0x24>
 800485c:	bd38      	pop	{r3, r4, r5, pc}
 800485e:	bf00      	nop
 8004860:	200000c4 	.word	0x200000c4

08004864 <_malloc_r>:
 8004864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004866:	1ccd      	adds	r5, r1, #3
 8004868:	f025 0503 	bic.w	r5, r5, #3
 800486c:	3508      	adds	r5, #8
 800486e:	2d0c      	cmp	r5, #12
 8004870:	bf38      	it	cc
 8004872:	250c      	movcc	r5, #12
 8004874:	2d00      	cmp	r5, #0
 8004876:	4606      	mov	r6, r0
 8004878:	db01      	blt.n	800487e <_malloc_r+0x1a>
 800487a:	42a9      	cmp	r1, r5
 800487c:	d903      	bls.n	8004886 <_malloc_r+0x22>
 800487e:	230c      	movs	r3, #12
 8004880:	6033      	str	r3, [r6, #0]
 8004882:	2000      	movs	r0, #0
 8004884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004886:	f000 f87d 	bl	8004984 <__malloc_lock>
 800488a:	4921      	ldr	r1, [pc, #132]	; (8004910 <_malloc_r+0xac>)
 800488c:	680a      	ldr	r2, [r1, #0]
 800488e:	4614      	mov	r4, r2
 8004890:	b99c      	cbnz	r4, 80048ba <_malloc_r+0x56>
 8004892:	4f20      	ldr	r7, [pc, #128]	; (8004914 <_malloc_r+0xb0>)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	b923      	cbnz	r3, 80048a2 <_malloc_r+0x3e>
 8004898:	4621      	mov	r1, r4
 800489a:	4630      	mov	r0, r6
 800489c:	f000 f862 	bl	8004964 <_sbrk_r>
 80048a0:	6038      	str	r0, [r7, #0]
 80048a2:	4629      	mov	r1, r5
 80048a4:	4630      	mov	r0, r6
 80048a6:	f000 f85d 	bl	8004964 <_sbrk_r>
 80048aa:	1c43      	adds	r3, r0, #1
 80048ac:	d123      	bne.n	80048f6 <_malloc_r+0x92>
 80048ae:	230c      	movs	r3, #12
 80048b0:	4630      	mov	r0, r6
 80048b2:	6033      	str	r3, [r6, #0]
 80048b4:	f000 f86c 	bl	8004990 <__malloc_unlock>
 80048b8:	e7e3      	b.n	8004882 <_malloc_r+0x1e>
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	1b5b      	subs	r3, r3, r5
 80048be:	d417      	bmi.n	80048f0 <_malloc_r+0x8c>
 80048c0:	2b0b      	cmp	r3, #11
 80048c2:	d903      	bls.n	80048cc <_malloc_r+0x68>
 80048c4:	6023      	str	r3, [r4, #0]
 80048c6:	441c      	add	r4, r3
 80048c8:	6025      	str	r5, [r4, #0]
 80048ca:	e004      	b.n	80048d6 <_malloc_r+0x72>
 80048cc:	6863      	ldr	r3, [r4, #4]
 80048ce:	42a2      	cmp	r2, r4
 80048d0:	bf0c      	ite	eq
 80048d2:	600b      	streq	r3, [r1, #0]
 80048d4:	6053      	strne	r3, [r2, #4]
 80048d6:	4630      	mov	r0, r6
 80048d8:	f000 f85a 	bl	8004990 <__malloc_unlock>
 80048dc:	f104 000b 	add.w	r0, r4, #11
 80048e0:	1d23      	adds	r3, r4, #4
 80048e2:	f020 0007 	bic.w	r0, r0, #7
 80048e6:	1ac2      	subs	r2, r0, r3
 80048e8:	d0cc      	beq.n	8004884 <_malloc_r+0x20>
 80048ea:	1a1b      	subs	r3, r3, r0
 80048ec:	50a3      	str	r3, [r4, r2]
 80048ee:	e7c9      	b.n	8004884 <_malloc_r+0x20>
 80048f0:	4622      	mov	r2, r4
 80048f2:	6864      	ldr	r4, [r4, #4]
 80048f4:	e7cc      	b.n	8004890 <_malloc_r+0x2c>
 80048f6:	1cc4      	adds	r4, r0, #3
 80048f8:	f024 0403 	bic.w	r4, r4, #3
 80048fc:	42a0      	cmp	r0, r4
 80048fe:	d0e3      	beq.n	80048c8 <_malloc_r+0x64>
 8004900:	1a21      	subs	r1, r4, r0
 8004902:	4630      	mov	r0, r6
 8004904:	f000 f82e 	bl	8004964 <_sbrk_r>
 8004908:	3001      	adds	r0, #1
 800490a:	d1dd      	bne.n	80048c8 <_malloc_r+0x64>
 800490c:	e7cf      	b.n	80048ae <_malloc_r+0x4a>
 800490e:	bf00      	nop
 8004910:	200000c4 	.word	0x200000c4
 8004914:	200000c8 	.word	0x200000c8

08004918 <_realloc_r>:
 8004918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491a:	4607      	mov	r7, r0
 800491c:	4614      	mov	r4, r2
 800491e:	460e      	mov	r6, r1
 8004920:	b921      	cbnz	r1, 800492c <_realloc_r+0x14>
 8004922:	4611      	mov	r1, r2
 8004924:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004928:	f7ff bf9c 	b.w	8004864 <_malloc_r>
 800492c:	b922      	cbnz	r2, 8004938 <_realloc_r+0x20>
 800492e:	f7ff ff4d 	bl	80047cc <_free_r>
 8004932:	4625      	mov	r5, r4
 8004934:	4628      	mov	r0, r5
 8004936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004938:	f000 f830 	bl	800499c <_malloc_usable_size_r>
 800493c:	42a0      	cmp	r0, r4
 800493e:	d20f      	bcs.n	8004960 <_realloc_r+0x48>
 8004940:	4621      	mov	r1, r4
 8004942:	4638      	mov	r0, r7
 8004944:	f7ff ff8e 	bl	8004864 <_malloc_r>
 8004948:	4605      	mov	r5, r0
 800494a:	2800      	cmp	r0, #0
 800494c:	d0f2      	beq.n	8004934 <_realloc_r+0x1c>
 800494e:	4631      	mov	r1, r6
 8004950:	4622      	mov	r2, r4
 8004952:	f7ff ff13 	bl	800477c <memcpy>
 8004956:	4631      	mov	r1, r6
 8004958:	4638      	mov	r0, r7
 800495a:	f7ff ff37 	bl	80047cc <_free_r>
 800495e:	e7e9      	b.n	8004934 <_realloc_r+0x1c>
 8004960:	4635      	mov	r5, r6
 8004962:	e7e7      	b.n	8004934 <_realloc_r+0x1c>

08004964 <_sbrk_r>:
 8004964:	b538      	push	{r3, r4, r5, lr}
 8004966:	2300      	movs	r3, #0
 8004968:	4d05      	ldr	r5, [pc, #20]	; (8004980 <_sbrk_r+0x1c>)
 800496a:	4604      	mov	r4, r0
 800496c:	4608      	mov	r0, r1
 800496e:	602b      	str	r3, [r5, #0]
 8004970:	f7fd faec 	bl	8001f4c <_sbrk>
 8004974:	1c43      	adds	r3, r0, #1
 8004976:	d102      	bne.n	800497e <_sbrk_r+0x1a>
 8004978:	682b      	ldr	r3, [r5, #0]
 800497a:	b103      	cbz	r3, 800497e <_sbrk_r+0x1a>
 800497c:	6023      	str	r3, [r4, #0]
 800497e:	bd38      	pop	{r3, r4, r5, pc}
 8004980:	20000284 	.word	0x20000284

08004984 <__malloc_lock>:
 8004984:	4801      	ldr	r0, [pc, #4]	; (800498c <__malloc_lock+0x8>)
 8004986:	f000 b811 	b.w	80049ac <__retarget_lock_acquire_recursive>
 800498a:	bf00      	nop
 800498c:	2000028c 	.word	0x2000028c

08004990 <__malloc_unlock>:
 8004990:	4801      	ldr	r0, [pc, #4]	; (8004998 <__malloc_unlock+0x8>)
 8004992:	f000 b80c 	b.w	80049ae <__retarget_lock_release_recursive>
 8004996:	bf00      	nop
 8004998:	2000028c 	.word	0x2000028c

0800499c <_malloc_usable_size_r>:
 800499c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049a0:	1f18      	subs	r0, r3, #4
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	bfbc      	itt	lt
 80049a6:	580b      	ldrlt	r3, [r1, r0]
 80049a8:	18c0      	addlt	r0, r0, r3
 80049aa:	4770      	bx	lr

080049ac <__retarget_lock_acquire_recursive>:
 80049ac:	4770      	bx	lr

080049ae <__retarget_lock_release_recursive>:
 80049ae:	4770      	bx	lr

080049b0 <_init>:
 80049b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b2:	bf00      	nop
 80049b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049b6:	bc08      	pop	{r3}
 80049b8:	469e      	mov	lr, r3
 80049ba:	4770      	bx	lr

080049bc <_fini>:
 80049bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049be:	bf00      	nop
 80049c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049c2:	bc08      	pop	{r3}
 80049c4:	469e      	mov	lr, r3
 80049c6:	4770      	bx	lr
