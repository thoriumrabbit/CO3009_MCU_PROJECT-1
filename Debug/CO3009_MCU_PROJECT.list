
CO3009_MCU_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000394c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003a58  08003a58  00013a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a80  08003a80  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003a80  08003a80  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a80  08003a80  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a80  08003a80  00013a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a84  08003a84  00013a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000018  08003aa0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08003aa0  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e594  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002332  00000000  00000000  0002e5d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  00030908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  000315f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a60  00000000  00000000  000321d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e27d  00000000  00000000  00049c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000874cd  00000000  00000000  00057eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000df382  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033e4  00000000  00000000  000df3d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a40 	.word	0x08003a40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08003a40 	.word	0x08003a40

0800014c <readKeyInput>:
static uint8_t flagForLongPress3s[NUM_OF_BUTTONS];
static uint16_t counterLongPress3s[NUM_OF_BUTTONS];

int button_flag[NUM_OF_BUTTONS];
int button_longPressed_flag[NUM_OF_BUTTONS];
void readKeyInput() {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (int i=0; i < NUM_OF_BUTTONS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e0d0      	b.n	80002fa <readKeyInput+0x1ae>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000158:	4a6c      	ldr	r2, [pc, #432]	; (800030c <readKeyInput+0x1c0>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	7819      	ldrb	r1, [r3, #0]
 8000160:	4a6b      	ldr	r2, [pc, #428]	; (8000310 <readKeyInput+0x1c4>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4413      	add	r3, r2
 8000166:	460a      	mov	r2, r1
 8000168:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 800016a:	4a6a      	ldr	r2, [pc, #424]	; (8000314 <readKeyInput+0x1c8>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	4413      	add	r3, r2
 8000170:	7819      	ldrb	r1, [r3, #0]
 8000172:	4a66      	ldr	r2, [pc, #408]	; (800030c <readKeyInput+0x1c0>)
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4413      	add	r3, r2
 8000178:	460a      	mov	r2, r1
 800017a:	701a      	strb	r2, [r3, #0]

		if(i == BTN_SELECT_INDEX) debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(A1_BTN_SELECT_GPIO_Port, A1_BTN_SELECT_Pin);
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d10b      	bne.n	800019a <readKeyInput+0x4e>
 8000182:	2102      	movs	r1, #2
 8000184:	4864      	ldr	r0, [pc, #400]	; (8000318 <readKeyInput+0x1cc>)
 8000186:	f001 ffb3 	bl	80020f0 <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
 800018c:	4619      	mov	r1, r3
 800018e:	4a61      	ldr	r2, [pc, #388]	; (8000314 <readKeyInput+0x1c8>)
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	4413      	add	r3, r2
 8000194:	460a      	mov	r2, r1
 8000196:	701a      	strb	r2, [r3, #0]
 8000198:	e02b      	b.n	80001f2 <readKeyInput+0xa6>
		else if(i == BTN_MODIFY_INDEX) debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(A2_BTN_MODIFY_GPIO_Port, A2_BTN_MODIFY_Pin);
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d10b      	bne.n	80001b8 <readKeyInput+0x6c>
 80001a0:	2110      	movs	r1, #16
 80001a2:	485d      	ldr	r0, [pc, #372]	; (8000318 <readKeyInput+0x1cc>)
 80001a4:	f001 ffa4 	bl	80020f0 <HAL_GPIO_ReadPin>
 80001a8:	4603      	mov	r3, r0
 80001aa:	4619      	mov	r1, r3
 80001ac:	4a59      	ldr	r2, [pc, #356]	; (8000314 <readKeyInput+0x1c8>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	4413      	add	r3, r2
 80001b2:	460a      	mov	r2, r1
 80001b4:	701a      	strb	r2, [r3, #0]
 80001b6:	e01c      	b.n	80001f2 <readKeyInput+0xa6>
		else if(i == BTN_SET_INDEX) debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(A3_BTN_SET_GPIO_Port, A3_BTN_SET_Pin);
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	2b02      	cmp	r3, #2
 80001bc:	d10b      	bne.n	80001d6 <readKeyInput+0x8a>
 80001be:	2101      	movs	r1, #1
 80001c0:	4856      	ldr	r0, [pc, #344]	; (800031c <readKeyInput+0x1d0>)
 80001c2:	f001 ff95 	bl	80020f0 <HAL_GPIO_ReadPin>
 80001c6:	4603      	mov	r3, r0
 80001c8:	4619      	mov	r1, r3
 80001ca:	4a52      	ldr	r2, [pc, #328]	; (8000314 <readKeyInput+0x1c8>)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	4413      	add	r3, r2
 80001d0:	460a      	mov	r2, r1
 80001d2:	701a      	strb	r2, [r3, #0]
 80001d4:	e00d      	b.n	80001f2 <readKeyInput+0xa6>
		else if(i == BTN_PED_INDEX )debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(A0_BTN_PED_GPIO_Port, A0_BTN_PED_Pin);
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	2b03      	cmp	r3, #3
 80001da:	d10a      	bne.n	80001f2 <readKeyInput+0xa6>
 80001dc:	2101      	movs	r1, #1
 80001de:	484e      	ldr	r0, [pc, #312]	; (8000318 <readKeyInput+0x1cc>)
 80001e0:	f001 ff86 	bl	80020f0 <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4619      	mov	r1, r3
 80001e8:	4a4a      	ldr	r2, [pc, #296]	; (8000314 <readKeyInput+0x1c8>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4413      	add	r3, r2
 80001ee:	460a      	mov	r2, r1
 80001f0:	701a      	strb	r2, [r3, #0]


		if ((debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) && (debounceButtonBuffer1[i] == debounceButtonBuffer3[i])) {
 80001f2:	4a48      	ldr	r2, [pc, #288]	; (8000314 <readKeyInput+0x1c8>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4413      	add	r3, r2
 80001f8:	781a      	ldrb	r2, [r3, #0]
 80001fa:	4944      	ldr	r1, [pc, #272]	; (800030c <readKeyInput+0x1c0>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	440b      	add	r3, r1
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	429a      	cmp	r2, r3
 8000204:	d123      	bne.n	800024e <readKeyInput+0x102>
 8000206:	4a43      	ldr	r2, [pc, #268]	; (8000314 <readKeyInput+0x1c8>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	4413      	add	r3, r2
 800020c:	781a      	ldrb	r2, [r3, #0]
 800020e:	4940      	ldr	r1, [pc, #256]	; (8000310 <readKeyInput+0x1c4>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	440b      	add	r3, r1
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	429a      	cmp	r2, r3
 8000218:	d119      	bne.n	800024e <readKeyInput+0x102>
			if (buttonBuffer[i] == BTN_RELEASED && debounceButtonBuffer1[i] == BTN_PRESSED) {
 800021a:	4a41      	ldr	r2, [pc, #260]	; (8000320 <readKeyInput+0x1d4>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4413      	add	r3, r2
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	2b01      	cmp	r3, #1
 8000224:	d10a      	bne.n	800023c <readKeyInput+0xf0>
 8000226:	4a3b      	ldr	r2, [pc, #236]	; (8000314 <readKeyInput+0x1c8>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	4413      	add	r3, r2
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d104      	bne.n	800023c <readKeyInput+0xf0>
				button_flag[i] = 1;
 8000232:	4a3c      	ldr	r2, [pc, #240]	; (8000324 <readKeyInput+0x1d8>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2101      	movs	r1, #1
 8000238:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			buttonBuffer[i] = debounceButtonBuffer1[i];
 800023c:	4a35      	ldr	r2, [pc, #212]	; (8000314 <readKeyInput+0x1c8>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4413      	add	r3, r2
 8000242:	7819      	ldrb	r1, [r3, #0]
 8000244:	4a36      	ldr	r2, [pc, #216]	; (8000320 <readKeyInput+0x1d4>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	4413      	add	r3, r2
 800024a:	460a      	mov	r2, r1
 800024c:	701a      	strb	r2, [r3, #0]
		}

		// LONGPRESSED 3S
		if (buttonBuffer[i] == BTN_PRESSED) {
 800024e:	4a34      	ldr	r2, [pc, #208]	; (8000320 <readKeyInput+0x1d4>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	4413      	add	r3, r2
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d117      	bne.n	800028a <readKeyInput+0x13e>
			if (counterLongPress3s[i] < PRESSED_DURATION_3S/TIMER_CYCLE) {
 800025a:	4a33      	ldr	r2, [pc, #204]	; (8000328 <readKeyInput+0x1dc>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000262:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000266:	d20a      	bcs.n	800027e <readKeyInput+0x132>
				counterLongPress3s[i]++;
 8000268:	4a2f      	ldr	r2, [pc, #188]	; (8000328 <readKeyInput+0x1dc>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000270:	3301      	adds	r3, #1
 8000272:	b299      	uxth	r1, r3
 8000274:	4a2c      	ldr	r2, [pc, #176]	; (8000328 <readKeyInput+0x1dc>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800027c:	e03a      	b.n	80002f4 <readKeyInput+0x1a8>
			} else {
				flagForLongPress3s[i] = 1;
 800027e:	4a2b      	ldr	r2, [pc, #172]	; (800032c <readKeyInput+0x1e0>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	4413      	add	r3, r2
 8000284:	2201      	movs	r2, #1
 8000286:	701a      	strb	r2, [r3, #0]
 8000288:	e034      	b.n	80002f4 <readKeyInput+0x1a8>
			}
		}
		else if (buttonBuffer[i] == BTN_RELEASED && flagForLongPress3s[i] == 1 ){
 800028a:	4a25      	ldr	r2, [pc, #148]	; (8000320 <readKeyInput+0x1d4>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	4413      	add	r3, r2
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	2b01      	cmp	r3, #1
 8000294:	d11a      	bne.n	80002cc <readKeyInput+0x180>
 8000296:	4a25      	ldr	r2, [pc, #148]	; (800032c <readKeyInput+0x1e0>)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4413      	add	r3, r2
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d114      	bne.n	80002cc <readKeyInput+0x180>
			button_longPressed_flag[i] = 1;
 80002a2:	4a23      	ldr	r2, [pc, #140]	; (8000330 <readKeyInput+0x1e4>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2101      	movs	r1, #1
 80002a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			button_flag[i] = 0;
 80002ac:	4a1d      	ldr	r2, [pc, #116]	; (8000324 <readKeyInput+0x1d8>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	2100      	movs	r1, #0
 80002b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterLongPress3s[i] = 0;
 80002b6:	4a1c      	ldr	r2, [pc, #112]	; (8000328 <readKeyInput+0x1dc>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2100      	movs	r1, #0
 80002bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForLongPress3s[i] = 0;
 80002c0:	4a1a      	ldr	r2, [pc, #104]	; (800032c <readKeyInput+0x1e0>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4413      	add	r3, r2
 80002c6:	2200      	movs	r2, #0
 80002c8:	701a      	strb	r2, [r3, #0]
 80002ca:	e013      	b.n	80002f4 <readKeyInput+0x1a8>
		}
		else {
			button_longPressed_flag[i] = 0;
 80002cc:	4a18      	ldr	r2, [pc, #96]	; (8000330 <readKeyInput+0x1e4>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2100      	movs	r1, #0
 80002d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			button_flag[i] = 0;
 80002d6:	4a13      	ldr	r2, [pc, #76]	; (8000324 <readKeyInput+0x1d8>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2100      	movs	r1, #0
 80002dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterLongPress3s[i] = 0;
 80002e0:	4a11      	ldr	r2, [pc, #68]	; (8000328 <readKeyInput+0x1dc>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2100      	movs	r1, #0
 80002e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForLongPress3s[i] = 0;
 80002ea:	4a10      	ldr	r2, [pc, #64]	; (800032c <readKeyInput+0x1e0>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4413      	add	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < NUM_OF_BUTTONS; i++){
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	3301      	adds	r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2b03      	cmp	r3, #3
 80002fe:	f77f af2b 	ble.w	8000158 <readKeyInput+0xc>
		}
	}
}
 8000302:	bf00      	nop
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	2000003c 	.word	0x2000003c
 8000310:	20000040 	.word	0x20000040
 8000314:	20000038 	.word	0x20000038
 8000318:	40010800 	.word	0x40010800
 800031c:	40010c00 	.word	0x40010c00
 8000320:	20000034 	.word	0x20000034
 8000324:	2000006c 	.word	0x2000006c
 8000328:	20000048 	.word	0x20000048
 800032c:	20000044 	.word	0x20000044
 8000330:	2000005c 	.word	0x2000005c

08000334 <isPressedAndReleased>:
int isPressedAndReleased(int buttonIndex) {
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	if (button_flag[buttonIndex] == 1) {
 800033c:	4a09      	ldr	r2, [pc, #36]	; (8000364 <isPressedAndReleased+0x30>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d106      	bne.n	8000356 <isPressedAndReleased+0x22>
		button_flag[buttonIndex] = 0;
 8000348:	4a06      	ldr	r2, [pc, #24]	; (8000364 <isPressedAndReleased+0x30>)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	2100      	movs	r1, #0
 800034e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000352:	2301      	movs	r3, #1
 8000354:	e000      	b.n	8000358 <isPressedAndReleased+0x24>
	}
	return 0;
 8000356:	2300      	movs	r3, #0
}
 8000358:	4618      	mov	r0, r3
 800035a:	370c      	adds	r7, #12
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	2000006c 	.word	0x2000006c

08000368 <isLongPressedAndReleased>:

int isLongPressedAndReleased(int buttonIndex){
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	if (button_longPressed_flag[buttonIndex] == 1) {
 8000370:	4a09      	ldr	r2, [pc, #36]	; (8000398 <isLongPressedAndReleased+0x30>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000378:	2b01      	cmp	r3, #1
 800037a:	d106      	bne.n	800038a <isLongPressedAndReleased+0x22>
		button_longPressed_flag[buttonIndex] = 0;
 800037c:	4a06      	ldr	r2, [pc, #24]	; (8000398 <isLongPressedAndReleased+0x30>)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	2100      	movs	r1, #0
 8000382:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000386:	2301      	movs	r3, #1
 8000388:	e000      	b.n	800038c <isLongPressedAndReleased+0x24>
	}
	return 0;
 800038a:	2300      	movs	r3, #0
}
 800038c:	4618      	mov	r0, r3
 800038e:	370c      	adds	r7, #12
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	2000005c 	.word	0x2000005c

0800039c <is_button_pressed>:

unsigned char is_button_pressed (uint8_t index) {
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	71fb      	strb	r3, [r7, #7]
	if(index >= NUM_OF_BUTTONS) return 0;
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	2b03      	cmp	r3, #3
 80003aa:	d901      	bls.n	80003b0 <is_button_pressed+0x14>
 80003ac:	2300      	movs	r3, #0
 80003ae:	e007      	b.n	80003c0 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BTN_PRESSED);
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	4a06      	ldr	r2, [pc, #24]	; (80003cc <is_button_pressed+0x30>)
 80003b4:	5cd3      	ldrb	r3, [r2, r3]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	bf0c      	ite	eq
 80003ba:	2301      	moveq	r3, #1
 80003bc:	2300      	movne	r3, #0
 80003be:	b2db      	uxtb	r3, r3
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	20000034 	.word	0x20000034

080003d0 <is_button_pressed_3s>:
unsigned char is_button_pressed_3s(unsigned char index) {
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	71fb      	strb	r3, [r7, #7]
	if(index >= NUM_OF_BUTTONS) return 0xff ;
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	2b03      	cmp	r3, #3
 80003de:	d901      	bls.n	80003e4 <is_button_pressed_3s+0x14>
 80003e0:	23ff      	movs	r3, #255	; 0xff
 80003e2:	e007      	b.n	80003f4 <is_button_pressed_3s+0x24>
	return (flagForLongPress3s[index] == 1) ;
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	4a06      	ldr	r2, [pc, #24]	; (8000400 <is_button_pressed_3s+0x30>)
 80003e8:	5cd3      	ldrb	r3, [r2, r3]
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	bf0c      	ite	eq
 80003ee:	2301      	moveq	r3, #1
 80003f0:	2300      	movne	r3, #0
 80003f2:	b2db      	uxtb	r3, r3
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	370c      	adds	r7, #12
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	20000044 	.word	0x20000044

08000404 <trafficLight_automatic>:
#include "software_timer.h"
#include "led_segment_control.h"
#include "melody.h"
#include "main.h"

void trafficLight_automatic() {
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	switch (state) {
 8000408:	4b9d      	ldr	r3, [pc, #628]	; (8000680 <trafficLight_automatic+0x27c>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2b04      	cmp	r3, #4
 800040e:	f200 8264 	bhi.w	80008da <trafficLight_automatic+0x4d6>
 8000412:	a201      	add	r2, pc, #4	; (adr r2, 8000418 <trafficLight_automatic+0x14>)
 8000414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000418:	0800042d 	.word	0x0800042d
 800041c:	0800046f 	.word	0x0800046f
 8000420:	08000577 	.word	0x08000577
 8000424:	080006b9 	.word	0x080006b9
 8000428:	080007c1 	.word	0x080007c1
	case IDLE:
		state = AUTO_RED1_GREEN2;
 800042c:	4b94      	ldr	r3, [pc, #592]	; (8000680 <trafficLight_automatic+0x27c>)
 800042e:	2201      	movs	r2, #1
 8000430:	701a      	strb	r2, [r3, #0]
		clearTrafficDisplay();
 8000432:	f000 fdf7 	bl	8001024 <clearTrafficDisplay>
		segment1Counter = counter_red / DIVISION_NUMBER;
 8000436:	4b93      	ldr	r3, [pc, #588]	; (8000684 <trafficLight_automatic+0x280>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a93      	ldr	r2, [pc, #588]	; (8000688 <trafficLight_automatic+0x284>)
 800043c:	fb82 1203 	smull	r1, r2, r2, r3
 8000440:	1192      	asrs	r2, r2, #6
 8000442:	17db      	asrs	r3, r3, #31
 8000444:	1ad3      	subs	r3, r2, r3
 8000446:	4a91      	ldr	r2, [pc, #580]	; (800068c <trafficLight_automatic+0x288>)
 8000448:	6013      	str	r3, [r2, #0]
		segment2Counter = counter_green / DIVISION_NUMBER;
 800044a:	4b91      	ldr	r3, [pc, #580]	; (8000690 <trafficLight_automatic+0x28c>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a8e      	ldr	r2, [pc, #568]	; (8000688 <trafficLight_automatic+0x284>)
 8000450:	fb82 1203 	smull	r1, r2, r2, r3
 8000454:	1192      	asrs	r2, r2, #6
 8000456:	17db      	asrs	r3, r3, #31
 8000458:	1ad3      	subs	r3, r2, r3
 800045a:	4a8e      	ldr	r2, [pc, #568]	; (8000694 <trafficLight_automatic+0x290>)
 800045c:	6013      	str	r3, [r2, #0]
		setTimerCounter1(DURATION_1S);
 800045e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000462:	f001 f8f5 	bl	8001650 <setTimerCounter1>
		counter_pedestrian = 0;
 8000466:	4b8c      	ldr	r3, [pc, #560]	; (8000698 <trafficLight_automatic+0x294>)
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
		break;
 800046c:	e23e      	b.n	80008ec <trafficLight_automatic+0x4e8>
	case AUTO_RED1_GREEN2:
		displayTrafficLight(RED_LIGHT, GREEN_LIGHT);
 800046e:	2103      	movs	r1, #3
 8000470:	2001      	movs	r0, #1
 8000472:	f000 fd6b 	bl	8000f4c <displayTrafficLight>
		if (isPedestrian == 1)
 8000476:	4b89      	ldr	r3, [pc, #548]	; (800069c <trafficLight_automatic+0x298>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	2b01      	cmp	r3, #1
 800047c:	d102      	bne.n	8000484 <trafficLight_automatic+0x80>
			displayPedestrianLight(PEDESTRIAN_LIGHT_GO);
 800047e:	2004      	movs	r0, #4
 8000480:	f000 fdee 	bl	8001060 <displayPedestrianLight>
		if (isPedestrian == 0)
 8000484:	4b85      	ldr	r3, [pc, #532]	; (800069c <trafficLight_automatic+0x298>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d102      	bne.n	8000492 <trafficLight_automatic+0x8e>
			displayPedestrianLight(PEDESTRIAN_LIGHT_OFF);
 800048c:	2006      	movs	r0, #6
 800048e:	f000 fde7 	bl	8001060 <displayPedestrianLight>
		if (isInManual == 1) {
 8000492:	4b83      	ldr	r3, [pc, #524]	; (80006a0 <trafficLight_automatic+0x29c>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	2b01      	cmp	r3, #1
 8000498:	d102      	bne.n	80004a0 <trafficLight_automatic+0x9c>
			state = MANUAL_RED1_GREEN2;
 800049a:	4b79      	ldr	r3, [pc, #484]	; (8000680 <trafficLight_automatic+0x27c>)
 800049c:	220b      	movs	r2, #11
 800049e:	701a      	strb	r2, [r3, #0]
		}
		if (isPressedAndReleased(BTN_SELECT_INDEX)) {
 80004a0:	2000      	movs	r0, #0
 80004a2:	f7ff ff47 	bl	8000334 <isPressedAndReleased>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d008      	beq.n	80004be <trafficLight_automatic+0xba>
			state = MANUAL_RED1_GREEN2;
 80004ac:	4b74      	ldr	r3, [pc, #464]	; (8000680 <trafficLight_automatic+0x27c>)
 80004ae:	220b      	movs	r2, #11
 80004b0:	701a      	strb	r2, [r3, #0]
			isInManual = 1;
 80004b2:	4b7b      	ldr	r3, [pc, #492]	; (80006a0 <trafficLight_automatic+0x29c>)
 80004b4:	2201      	movs	r2, #1
 80004b6:	601a      	str	r2, [r3, #0]
			isInAuto = 0;
 80004b8:	4b7a      	ldr	r3, [pc, #488]	; (80006a4 <trafficLight_automatic+0x2a0>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
		}
		if (isLongPressedAndReleased(BTN_SELECT_INDEX)) {
 80004be:	2000      	movs	r0, #0
 80004c0:	f7ff ff52 	bl	8000368 <isLongPressedAndReleased>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d014      	beq.n	80004f4 <trafficLight_automatic+0xf0>
			state = CHANGE_MODE_RED;
 80004ca:	4b6d      	ldr	r3, [pc, #436]	; (8000680 <trafficLight_automatic+0x27c>)
 80004cc:	2205      	movs	r2, #5
 80004ce:	701a      	strb	r2, [r3, #0]
			isInChange = 1;
 80004d0:	4b75      	ldr	r3, [pc, #468]	; (80006a8 <trafficLight_automatic+0x2a4>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	601a      	str	r2, [r3, #0]
			setTimerTriggerLed(DURATION_FOR_4HZ);
 80004d6:	20fa      	movs	r0, #250	; 0xfa
 80004d8:	f001 f89e 	bl	8001618 <setTimerTriggerLed>
			clearTrafficDisplay();
 80004dc:	f000 fda2 	bl	8001024 <clearTrafficDisplay>
			tempCounter = counter_red / DIVISION_NUMBER;
 80004e0:	4b68      	ldr	r3, [pc, #416]	; (8000684 <trafficLight_automatic+0x280>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a68      	ldr	r2, [pc, #416]	; (8000688 <trafficLight_automatic+0x284>)
 80004e6:	fb82 1203 	smull	r1, r2, r2, r3
 80004ea:	1192      	asrs	r2, r2, #6
 80004ec:	17db      	asrs	r3, r3, #31
 80004ee:	1ad3      	subs	r3, r2, r3
 80004f0:	4a6e      	ldr	r2, [pc, #440]	; (80006ac <trafficLight_automatic+0x2a8>)
 80004f2:	6013      	str	r3, [r2, #0]
		}
		if (isPressedAndReleased(BTN_PED_INDEX)) {
 80004f4:	2003      	movs	r0, #3
 80004f6:	f7ff ff1d 	bl	8000334 <isPressedAndReleased>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d002      	beq.n	8000506 <trafficLight_automatic+0x102>
			isPedestrian = 1;
 8000500:	4b66      	ldr	r3, [pc, #408]	; (800069c <trafficLight_automatic+0x298>)
 8000502:	2201      	movs	r2, #1
 8000504:	601a      	str	r2, [r3, #0]
		}

		if (countDownTimer1_counter == 1) {
 8000506:	4b6a      	ldr	r3, [pc, #424]	; (80006b0 <trafficLight_automatic+0x2ac>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b01      	cmp	r3, #1
 800050c:	f040 81e7 	bne.w	80008de <trafficLight_automatic+0x4da>
			segment1Counter--;
 8000510:	4b5e      	ldr	r3, [pc, #376]	; (800068c <trafficLight_automatic+0x288>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	3b01      	subs	r3, #1
 8000516:	4a5d      	ldr	r2, [pc, #372]	; (800068c <trafficLight_automatic+0x288>)
 8000518:	6013      	str	r3, [r2, #0]
			segment2Counter--;
 800051a:	4b5e      	ldr	r3, [pc, #376]	; (8000694 <trafficLight_automatic+0x290>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	3b01      	subs	r3, #1
 8000520:	4a5c      	ldr	r2, [pc, #368]	; (8000694 <trafficLight_automatic+0x290>)
 8000522:	6013      	str	r3, [r2, #0]

			if (segment2Counter == 0) {
 8000524:	4b5b      	ldr	r3, [pc, #364]	; (8000694 <trafficLight_automatic+0x290>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d11f      	bne.n	800056c <trafficLight_automatic+0x168>
				segment2Counter = counter_yellow / DIVISION_NUMBER;
 800052c:	4b61      	ldr	r3, [pc, #388]	; (80006b4 <trafficLight_automatic+0x2b0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a55      	ldr	r2, [pc, #340]	; (8000688 <trafficLight_automatic+0x284>)
 8000532:	fb82 1203 	smull	r1, r2, r2, r3
 8000536:	1192      	asrs	r2, r2, #6
 8000538:	17db      	asrs	r3, r3, #31
 800053a:	1ad3      	subs	r3, r2, r3
 800053c:	4a55      	ldr	r2, [pc, #340]	; (8000694 <trafficLight_automatic+0x290>)
 800053e:	6013      	str	r3, [r2, #0]
				state = AUTO_RED1_YELLOW2;
 8000540:	4b4f      	ldr	r3, [pc, #316]	; (8000680 <trafficLight_automatic+0x27c>)
 8000542:	2202      	movs	r2, #2
 8000544:	701a      	strb	r2, [r3, #0]
				//buzzer_warning = 0;

				if (isPedestrian == 1) {
 8000546:	4b55      	ldr	r3, [pc, #340]	; (800069c <trafficLight_automatic+0x298>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d10e      	bne.n	800056c <trafficLight_automatic+0x168>
					counter_pedestrian++;
 800054e:	4b52      	ldr	r3, [pc, #328]	; (8000698 <trafficLight_automatic+0x294>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	3301      	adds	r3, #1
 8000554:	4a50      	ldr	r2, [pc, #320]	; (8000698 <trafficLight_automatic+0x294>)
 8000556:	6013      	str	r3, [r2, #0]
					if (counter_pedestrian == PEDESTRIAN_LIGHT_CYCLE) {
 8000558:	4b4f      	ldr	r3, [pc, #316]	; (8000698 <trafficLight_automatic+0x294>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b08      	cmp	r3, #8
 800055e:	d105      	bne.n	800056c <trafficLight_automatic+0x168>
						counter_pedestrian = 0;
 8000560:	4b4d      	ldr	r3, [pc, #308]	; (8000698 <trafficLight_automatic+0x294>)
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
						isPedestrian = 0;
 8000566:	4b4d      	ldr	r3, [pc, #308]	; (800069c <trafficLight_automatic+0x298>)
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
					}
				}
			}

			setTimerCounter1(DURATION_1S);
 800056c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000570:	f001 f86e 	bl	8001650 <setTimerCounter1>
		}
		break;
 8000574:	e1b3      	b.n	80008de <trafficLight_automatic+0x4da>
	case AUTO_RED1_YELLOW2:
		displayTrafficLight(RED_LIGHT, YELLOW_LIGHT);
 8000576:	2102      	movs	r1, #2
 8000578:	2001      	movs	r0, #1
 800057a:	f000 fce7 	bl	8000f4c <displayTrafficLight>
		if (isPedestrian == 1)
 800057e:	4b47      	ldr	r3, [pc, #284]	; (800069c <trafficLight_automatic+0x298>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d102      	bne.n	800058c <trafficLight_automatic+0x188>
			displayPedestrianLight(PEDESTRIAN_LIGHT_GO);
 8000586:	2004      	movs	r0, #4
 8000588:	f000 fd6a 	bl	8001060 <displayPedestrianLight>
		if (isPedestrian == 0)
 800058c:	4b43      	ldr	r3, [pc, #268]	; (800069c <trafficLight_automatic+0x298>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d102      	bne.n	800059a <trafficLight_automatic+0x196>
			displayPedestrianLight(PEDESTRIAN_LIGHT_OFF);
 8000594:	2006      	movs	r0, #6
 8000596:	f000 fd63 	bl	8001060 <displayPedestrianLight>
		if (isPressedAndReleased(BTN_SELECT_INDEX)) {
 800059a:	2000      	movs	r0, #0
 800059c:	f7ff feca 	bl	8000334 <isPressedAndReleased>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d005      	beq.n	80005b2 <trafficLight_automatic+0x1ae>
			isInManual = 1;
 80005a6:	4b3e      	ldr	r3, [pc, #248]	; (80006a0 <trafficLight_automatic+0x29c>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	601a      	str	r2, [r3, #0]
			isInAuto = 0;
 80005ac:	4b3d      	ldr	r3, [pc, #244]	; (80006a4 <trafficLight_automatic+0x2a0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
		}
		if (isPressedAndReleased(BTN_PED_INDEX)) {
 80005b2:	2003      	movs	r0, #3
 80005b4:	f7ff febe 	bl	8000334 <isPressedAndReleased>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d002      	beq.n	80005c4 <trafficLight_automatic+0x1c0>
			isPedestrian = 1;
 80005be:	4b37      	ldr	r3, [pc, #220]	; (800069c <trafficLight_automatic+0x298>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	601a      	str	r2, [r3, #0]
		}
		if (isLongPressedAndReleased(BTN_SELECT_INDEX)) {
 80005c4:	2000      	movs	r0, #0
 80005c6:	f7ff fecf 	bl	8000368 <isLongPressedAndReleased>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d014      	beq.n	80005fa <trafficLight_automatic+0x1f6>
			state = CHANGE_MODE_RED;
 80005d0:	4b2b      	ldr	r3, [pc, #172]	; (8000680 <trafficLight_automatic+0x27c>)
 80005d2:	2205      	movs	r2, #5
 80005d4:	701a      	strb	r2, [r3, #0]
			isInChange = 1;
 80005d6:	4b34      	ldr	r3, [pc, #208]	; (80006a8 <trafficLight_automatic+0x2a4>)
 80005d8:	2201      	movs	r2, #1
 80005da:	601a      	str	r2, [r3, #0]
			setTimerTriggerLed(DURATION_FOR_4HZ);
 80005dc:	20fa      	movs	r0, #250	; 0xfa
 80005de:	f001 f81b 	bl	8001618 <setTimerTriggerLed>
			clearTrafficDisplay();
 80005e2:	f000 fd1f 	bl	8001024 <clearTrafficDisplay>
			tempCounter = counter_red / DIVISION_NUMBER;
 80005e6:	4b27      	ldr	r3, [pc, #156]	; (8000684 <trafficLight_automatic+0x280>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a27      	ldr	r2, [pc, #156]	; (8000688 <trafficLight_automatic+0x284>)
 80005ec:	fb82 1203 	smull	r1, r2, r2, r3
 80005f0:	1192      	asrs	r2, r2, #6
 80005f2:	17db      	asrs	r3, r3, #31
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	4a2d      	ldr	r2, [pc, #180]	; (80006ac <trafficLight_automatic+0x2a8>)
 80005f8:	6013      	str	r3, [r2, #0]
		}
		if (countDownTimer1_counter == 1) {
 80005fa:	4b2d      	ldr	r3, [pc, #180]	; (80006b0 <trafficLight_automatic+0x2ac>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	f040 816f 	bne.w	80008e2 <trafficLight_automatic+0x4de>
			segment1Counter--;
 8000604:	4b21      	ldr	r3, [pc, #132]	; (800068c <trafficLight_automatic+0x288>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	3b01      	subs	r3, #1
 800060a:	4a20      	ldr	r2, [pc, #128]	; (800068c <trafficLight_automatic+0x288>)
 800060c:	6013      	str	r3, [r2, #0]
			segment2Counter--;
 800060e:	4b21      	ldr	r3, [pc, #132]	; (8000694 <trafficLight_automatic+0x290>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	3b01      	subs	r3, #1
 8000614:	4a1f      	ldr	r2, [pc, #124]	; (8000694 <trafficLight_automatic+0x290>)
 8000616:	6013      	str	r3, [r2, #0]
			if (segment2Counter <= 0) {
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <trafficLight_automatic+0x290>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	dc29      	bgt.n	8000674 <trafficLight_automatic+0x270>
				segment1Counter = counter_green / DIVISION_NUMBER;
 8000620:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <trafficLight_automatic+0x28c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a18      	ldr	r2, [pc, #96]	; (8000688 <trafficLight_automatic+0x284>)
 8000626:	fb82 1203 	smull	r1, r2, r2, r3
 800062a:	1192      	asrs	r2, r2, #6
 800062c:	17db      	asrs	r3, r3, #31
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	4a16      	ldr	r2, [pc, #88]	; (800068c <trafficLight_automatic+0x288>)
 8000632:	6013      	str	r3, [r2, #0]
				segment2Counter = counter_red / DIVISION_NUMBER;
 8000634:	4b13      	ldr	r3, [pc, #76]	; (8000684 <trafficLight_automatic+0x280>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a13      	ldr	r2, [pc, #76]	; (8000688 <trafficLight_automatic+0x284>)
 800063a:	fb82 1203 	smull	r1, r2, r2, r3
 800063e:	1192      	asrs	r2, r2, #6
 8000640:	17db      	asrs	r3, r3, #31
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	4a13      	ldr	r2, [pc, #76]	; (8000694 <trafficLight_automatic+0x290>)
 8000646:	6013      	str	r3, [r2, #0]
				state = AUTO_GREEN1_RED2;
 8000648:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <trafficLight_automatic+0x27c>)
 800064a:	2203      	movs	r2, #3
 800064c:	701a      	strb	r2, [r3, #0]

				if (isPedestrian == 1) {
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <trafficLight_automatic+0x298>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d10e      	bne.n	8000674 <trafficLight_automatic+0x270>
					counter_pedestrian++;
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <trafficLight_automatic+0x294>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	3301      	adds	r3, #1
 800065c:	4a0e      	ldr	r2, [pc, #56]	; (8000698 <trafficLight_automatic+0x294>)
 800065e:	6013      	str	r3, [r2, #0]
					if (counter_pedestrian == PEDESTRIAN_LIGHT_CYCLE) {
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <trafficLight_automatic+0x294>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b08      	cmp	r3, #8
 8000666:	d105      	bne.n	8000674 <trafficLight_automatic+0x270>
						counter_pedestrian = 0;
 8000668:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <trafficLight_automatic+0x294>)
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
						isPedestrian = 0;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <trafficLight_automatic+0x298>)
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
					}
				}
			}

			setTimerCounter1(DURATION_1S);
 8000674:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000678:	f000 ffea 	bl	8001650 <setTimerCounter1>
		}
		break;
 800067c:	e131      	b.n	80008e2 <trafficLight_automatic+0x4de>
 800067e:	bf00      	nop
 8000680:	2000009c 	.word	0x2000009c
 8000684:	20000000 	.word	0x20000000
 8000688:	10624dd3 	.word	0x10624dd3
 800068c:	2000008c 	.word	0x2000008c
 8000690:	20000008 	.word	0x20000008
 8000694:	20000094 	.word	0x20000094
 8000698:	200000bc 	.word	0x200000bc
 800069c:	20000090 	.word	0x20000090
 80006a0:	2000007c 	.word	0x2000007c
 80006a4:	200000a0 	.word	0x200000a0
 80006a8:	200000a4 	.word	0x200000a4
 80006ac:	20000098 	.word	0x20000098
 80006b0:	2000019c 	.word	0x2000019c
 80006b4:	20000004 	.word	0x20000004
	case AUTO_GREEN1_RED2:
		displayTrafficLight(GREEN_LIGHT, RED_LIGHT);
 80006b8:	2101      	movs	r1, #1
 80006ba:	2003      	movs	r0, #3
 80006bc:	f000 fc46 	bl	8000f4c <displayTrafficLight>
		if (isPedestrian == 1)
 80006c0:	4b8b      	ldr	r3, [pc, #556]	; (80008f0 <trafficLight_automatic+0x4ec>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d102      	bne.n	80006ce <trafficLight_automatic+0x2ca>
			displayPedestrianLight(PEDESTRIAN_LIGHT_STOP);
 80006c8:	2005      	movs	r0, #5
 80006ca:	f000 fcc9 	bl	8001060 <displayPedestrianLight>
		if (isPedestrian == 0)
 80006ce:	4b88      	ldr	r3, [pc, #544]	; (80008f0 <trafficLight_automatic+0x4ec>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d102      	bne.n	80006dc <trafficLight_automatic+0x2d8>
			displayPedestrianLight(PEDESTRIAN_LIGHT_OFF);
 80006d6:	2006      	movs	r0, #6
 80006d8:	f000 fcc2 	bl	8001060 <displayPedestrianLight>
		if (isInManual == 1) {
 80006dc:	4b85      	ldr	r3, [pc, #532]	; (80008f4 <trafficLight_automatic+0x4f0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d102      	bne.n	80006ea <trafficLight_automatic+0x2e6>
			state = MANUAL_GREEN1_RED2;
 80006e4:	4b84      	ldr	r3, [pc, #528]	; (80008f8 <trafficLight_automatic+0x4f4>)
 80006e6:	220d      	movs	r2, #13
 80006e8:	701a      	strb	r2, [r3, #0]
		}
		if (isPressedAndReleased(BTN_SELECT_INDEX)) {
 80006ea:	2000      	movs	r0, #0
 80006ec:	f7ff fe22 	bl	8000334 <isPressedAndReleased>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d008      	beq.n	8000708 <trafficLight_automatic+0x304>
			state = MANUAL_GREEN1_RED2;
 80006f6:	4b80      	ldr	r3, [pc, #512]	; (80008f8 <trafficLight_automatic+0x4f4>)
 80006f8:	220d      	movs	r2, #13
 80006fa:	701a      	strb	r2, [r3, #0]
			isInManual = 1;
 80006fc:	4b7d      	ldr	r3, [pc, #500]	; (80008f4 <trafficLight_automatic+0x4f0>)
 80006fe:	2201      	movs	r2, #1
 8000700:	601a      	str	r2, [r3, #0]
			isInAuto = 0;
 8000702:	4b7e      	ldr	r3, [pc, #504]	; (80008fc <trafficLight_automatic+0x4f8>)
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
		}
		if (isLongPressedAndReleased(BTN_SELECT_INDEX)) {
 8000708:	2000      	movs	r0, #0
 800070a:	f7ff fe2d 	bl	8000368 <isLongPressedAndReleased>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d014      	beq.n	800073e <trafficLight_automatic+0x33a>
			state = CHANGE_MODE_RED;
 8000714:	4b78      	ldr	r3, [pc, #480]	; (80008f8 <trafficLight_automatic+0x4f4>)
 8000716:	2205      	movs	r2, #5
 8000718:	701a      	strb	r2, [r3, #0]
			isInChange = 1;
 800071a:	4b79      	ldr	r3, [pc, #484]	; (8000900 <trafficLight_automatic+0x4fc>)
 800071c:	2201      	movs	r2, #1
 800071e:	601a      	str	r2, [r3, #0]
			setTimerTriggerLed(DURATION_FOR_4HZ);
 8000720:	20fa      	movs	r0, #250	; 0xfa
 8000722:	f000 ff79 	bl	8001618 <setTimerTriggerLed>
			clearTrafficDisplay();
 8000726:	f000 fc7d 	bl	8001024 <clearTrafficDisplay>
			tempCounter = counter_red / DIVISION_NUMBER;
 800072a:	4b76      	ldr	r3, [pc, #472]	; (8000904 <trafficLight_automatic+0x500>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a76      	ldr	r2, [pc, #472]	; (8000908 <trafficLight_automatic+0x504>)
 8000730:	fb82 1203 	smull	r1, r2, r2, r3
 8000734:	1192      	asrs	r2, r2, #6
 8000736:	17db      	asrs	r3, r3, #31
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	4a74      	ldr	r2, [pc, #464]	; (800090c <trafficLight_automatic+0x508>)
 800073c:	6013      	str	r3, [r2, #0]
		}
		if (isPressedAndReleased(BTN_PED_INDEX)) {
 800073e:	2003      	movs	r0, #3
 8000740:	f7ff fdf8 	bl	8000334 <isPressedAndReleased>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d002      	beq.n	8000750 <trafficLight_automatic+0x34c>
			isPedestrian = 1;
 800074a:	4b69      	ldr	r3, [pc, #420]	; (80008f0 <trafficLight_automatic+0x4ec>)
 800074c:	2201      	movs	r2, #1
 800074e:	601a      	str	r2, [r3, #0]
		}
		if (countDownTimer1_counter == 1) {
 8000750:	4b6f      	ldr	r3, [pc, #444]	; (8000910 <trafficLight_automatic+0x50c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b01      	cmp	r3, #1
 8000756:	f040 80c6 	bne.w	80008e6 <trafficLight_automatic+0x4e2>
			segment1Counter--;
 800075a:	4b6e      	ldr	r3, [pc, #440]	; (8000914 <trafficLight_automatic+0x510>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	3b01      	subs	r3, #1
 8000760:	4a6c      	ldr	r2, [pc, #432]	; (8000914 <trafficLight_automatic+0x510>)
 8000762:	6013      	str	r3, [r2, #0]
			segment2Counter--;
 8000764:	4b6c      	ldr	r3, [pc, #432]	; (8000918 <trafficLight_automatic+0x514>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	3b01      	subs	r3, #1
 800076a:	4a6b      	ldr	r2, [pc, #428]	; (8000918 <trafficLight_automatic+0x514>)
 800076c:	6013      	str	r3, [r2, #0]
			if (segment1Counter <= 0) {
 800076e:	4b69      	ldr	r3, [pc, #420]	; (8000914 <trafficLight_automatic+0x510>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	dc1f      	bgt.n	80007b6 <trafficLight_automatic+0x3b2>
				segment1Counter = counter_yellow / DIVISION_NUMBER;
 8000776:	4b69      	ldr	r3, [pc, #420]	; (800091c <trafficLight_automatic+0x518>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a63      	ldr	r2, [pc, #396]	; (8000908 <trafficLight_automatic+0x504>)
 800077c:	fb82 1203 	smull	r1, r2, r2, r3
 8000780:	1192      	asrs	r2, r2, #6
 8000782:	17db      	asrs	r3, r3, #31
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	4a63      	ldr	r2, [pc, #396]	; (8000914 <trafficLight_automatic+0x510>)
 8000788:	6013      	str	r3, [r2, #0]
				state = AUTO_YELLOW1_RED2;
 800078a:	4b5b      	ldr	r3, [pc, #364]	; (80008f8 <trafficLight_automatic+0x4f4>)
 800078c:	2204      	movs	r2, #4
 800078e:	701a      	strb	r2, [r3, #0]

				if (isPedestrian == 1) {
 8000790:	4b57      	ldr	r3, [pc, #348]	; (80008f0 <trafficLight_automatic+0x4ec>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d10e      	bne.n	80007b6 <trafficLight_automatic+0x3b2>
					counter_pedestrian++;
 8000798:	4b61      	ldr	r3, [pc, #388]	; (8000920 <trafficLight_automatic+0x51c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	3301      	adds	r3, #1
 800079e:	4a60      	ldr	r2, [pc, #384]	; (8000920 <trafficLight_automatic+0x51c>)
 80007a0:	6013      	str	r3, [r2, #0]
					if (counter_pedestrian == PEDESTRIAN_LIGHT_CYCLE) {
 80007a2:	4b5f      	ldr	r3, [pc, #380]	; (8000920 <trafficLight_automatic+0x51c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	2b08      	cmp	r3, #8
 80007a8:	d105      	bne.n	80007b6 <trafficLight_automatic+0x3b2>
						counter_pedestrian = 0;
 80007aa:	4b5d      	ldr	r3, [pc, #372]	; (8000920 <trafficLight_automatic+0x51c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
						isPedestrian = 0;
 80007b0:	4b4f      	ldr	r3, [pc, #316]	; (80008f0 <trafficLight_automatic+0x4ec>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
					}
				}
			}

			setTimerCounter1(DURATION_1S);
 80007b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ba:	f000 ff49 	bl	8001650 <setTimerCounter1>
		}
		break;
 80007be:	e092      	b.n	80008e6 <trafficLight_automatic+0x4e2>
	case AUTO_YELLOW1_RED2:
		displayTrafficLight(YELLOW_LIGHT, RED_LIGHT);
 80007c0:	2101      	movs	r1, #1
 80007c2:	2002      	movs	r0, #2
 80007c4:	f000 fbc2 	bl	8000f4c <displayTrafficLight>
		if (isPedestrian == 1)
 80007c8:	4b49      	ldr	r3, [pc, #292]	; (80008f0 <trafficLight_automatic+0x4ec>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d102      	bne.n	80007d6 <trafficLight_automatic+0x3d2>
			displayPedestrianLight(PEDESTRIAN_LIGHT_STOP);
 80007d0:	2005      	movs	r0, #5
 80007d2:	f000 fc45 	bl	8001060 <displayPedestrianLight>
		if (isPedestrian == 0)
 80007d6:	4b46      	ldr	r3, [pc, #280]	; (80008f0 <trafficLight_automatic+0x4ec>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d102      	bne.n	80007e4 <trafficLight_automatic+0x3e0>
			displayPedestrianLight(PEDESTRIAN_LIGHT_OFF);
 80007de:	2006      	movs	r0, #6
 80007e0:	f000 fc3e 	bl	8001060 <displayPedestrianLight>
		if (isPressedAndReleased(BTN_SELECT_INDEX)) {
 80007e4:	2000      	movs	r0, #0
 80007e6:	f7ff fda5 	bl	8000334 <isPressedAndReleased>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d005      	beq.n	80007fc <trafficLight_automatic+0x3f8>
			isInManual = 1;
 80007f0:	4b40      	ldr	r3, [pc, #256]	; (80008f4 <trafficLight_automatic+0x4f0>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	601a      	str	r2, [r3, #0]
			isInAuto = 0;
 80007f6:	4b41      	ldr	r3, [pc, #260]	; (80008fc <trafficLight_automatic+0x4f8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
		}
		if (isLongPressedAndReleased(BTN_SELECT_INDEX)) {
 80007fc:	2000      	movs	r0, #0
 80007fe:	f7ff fdb3 	bl	8000368 <isLongPressedAndReleased>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d014      	beq.n	8000832 <trafficLight_automatic+0x42e>
			state = CHANGE_MODE_RED;
 8000808:	4b3b      	ldr	r3, [pc, #236]	; (80008f8 <trafficLight_automatic+0x4f4>)
 800080a:	2205      	movs	r2, #5
 800080c:	701a      	strb	r2, [r3, #0]
			isInChange = 1;
 800080e:	4b3c      	ldr	r3, [pc, #240]	; (8000900 <trafficLight_automatic+0x4fc>)
 8000810:	2201      	movs	r2, #1
 8000812:	601a      	str	r2, [r3, #0]
			setTimerTriggerLed(DURATION_FOR_4HZ);
 8000814:	20fa      	movs	r0, #250	; 0xfa
 8000816:	f000 feff 	bl	8001618 <setTimerTriggerLed>
			clearTrafficDisplay();
 800081a:	f000 fc03 	bl	8001024 <clearTrafficDisplay>
			tempCounter = counter_red / DIVISION_NUMBER;
 800081e:	4b39      	ldr	r3, [pc, #228]	; (8000904 <trafficLight_automatic+0x500>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a39      	ldr	r2, [pc, #228]	; (8000908 <trafficLight_automatic+0x504>)
 8000824:	fb82 1203 	smull	r1, r2, r2, r3
 8000828:	1192      	asrs	r2, r2, #6
 800082a:	17db      	asrs	r3, r3, #31
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	4a37      	ldr	r2, [pc, #220]	; (800090c <trafficLight_automatic+0x508>)
 8000830:	6013      	str	r3, [r2, #0]
		}
		if (isPressedAndReleased(BTN_PED_INDEX)) {
 8000832:	2003      	movs	r0, #3
 8000834:	f7ff fd7e 	bl	8000334 <isPressedAndReleased>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d002      	beq.n	8000844 <trafficLight_automatic+0x440>
			isPedestrian = 1;
 800083e:	4b2c      	ldr	r3, [pc, #176]	; (80008f0 <trafficLight_automatic+0x4ec>)
 8000840:	2201      	movs	r2, #1
 8000842:	601a      	str	r2, [r3, #0]
		}

		if (isPedestrian == 1) {
 8000844:	4b2a      	ldr	r3, [pc, #168]	; (80008f0 <trafficLight_automatic+0x4ec>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d102      	bne.n	8000852 <trafficLight_automatic+0x44e>
			buzzer_warning = 1;
 800084c:	4b35      	ldr	r3, [pc, #212]	; (8000924 <trafficLight_automatic+0x520>)
 800084e:	2201      	movs	r2, #1
 8000850:	601a      	str	r2, [r3, #0]
		}

		if (countDownTimer1_counter == 1) {
 8000852:	4b2f      	ldr	r3, [pc, #188]	; (8000910 <trafficLight_automatic+0x50c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d147      	bne.n	80008ea <trafficLight_automatic+0x4e6>
			segment1Counter--;
 800085a:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <trafficLight_automatic+0x510>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	3b01      	subs	r3, #1
 8000860:	4a2c      	ldr	r2, [pc, #176]	; (8000914 <trafficLight_automatic+0x510>)
 8000862:	6013      	str	r3, [r2, #0]
			segment2Counter--;
 8000864:	4b2c      	ldr	r3, [pc, #176]	; (8000918 <trafficLight_automatic+0x514>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	3b01      	subs	r3, #1
 800086a:	4a2b      	ldr	r2, [pc, #172]	; (8000918 <trafficLight_automatic+0x514>)
 800086c:	6013      	str	r3, [r2, #0]
			if (segment1Counter <= 0) {
 800086e:	4b29      	ldr	r3, [pc, #164]	; (8000914 <trafficLight_automatic+0x510>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	dc2c      	bgt.n	80008d0 <trafficLight_automatic+0x4cc>
				segment1Counter = counter_red / DIVISION_NUMBER;
 8000876:	4b23      	ldr	r3, [pc, #140]	; (8000904 <trafficLight_automatic+0x500>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a23      	ldr	r2, [pc, #140]	; (8000908 <trafficLight_automatic+0x504>)
 800087c:	fb82 1203 	smull	r1, r2, r2, r3
 8000880:	1192      	asrs	r2, r2, #6
 8000882:	17db      	asrs	r3, r3, #31
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	4a23      	ldr	r2, [pc, #140]	; (8000914 <trafficLight_automatic+0x510>)
 8000888:	6013      	str	r3, [r2, #0]
				segment2Counter = counter_green / DIVISION_NUMBER;
 800088a:	4b27      	ldr	r3, [pc, #156]	; (8000928 <trafficLight_automatic+0x524>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a1e      	ldr	r2, [pc, #120]	; (8000908 <trafficLight_automatic+0x504>)
 8000890:	fb82 1203 	smull	r1, r2, r2, r3
 8000894:	1192      	asrs	r2, r2, #6
 8000896:	17db      	asrs	r3, r3, #31
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	4a1f      	ldr	r2, [pc, #124]	; (8000918 <trafficLight_automatic+0x514>)
 800089c:	6013      	str	r3, [r2, #0]
				state = AUTO_RED1_GREEN2;
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <trafficLight_automatic+0x4f4>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	701a      	strb	r2, [r3, #0]
				buzzer_warning = 0;
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <trafficLight_automatic+0x520>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]

				if (isPedestrian == 1) {
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <trafficLight_automatic+0x4ec>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d10e      	bne.n	80008d0 <trafficLight_automatic+0x4cc>
					counter_pedestrian++;
 80008b2:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <trafficLight_automatic+0x51c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	3301      	adds	r3, #1
 80008b8:	4a19      	ldr	r2, [pc, #100]	; (8000920 <trafficLight_automatic+0x51c>)
 80008ba:	6013      	str	r3, [r2, #0]
					if (counter_pedestrian == PEDESTRIAN_LIGHT_CYCLE) {
 80008bc:	4b18      	ldr	r3, [pc, #96]	; (8000920 <trafficLight_automatic+0x51c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2b08      	cmp	r3, #8
 80008c2:	d105      	bne.n	80008d0 <trafficLight_automatic+0x4cc>
						counter_pedestrian = 0;
 80008c4:	4b16      	ldr	r3, [pc, #88]	; (8000920 <trafficLight_automatic+0x51c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
						isPedestrian = 0;
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <trafficLight_automatic+0x4ec>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
					}
				}

			}

			setTimerCounter1(DURATION_1S);
 80008d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008d4:	f000 febc 	bl	8001650 <setTimerCounter1>
		}

		break;
 80008d8:	e007      	b.n	80008ea <trafficLight_automatic+0x4e6>
	default:
		break;
 80008da:	bf00      	nop
 80008dc:	e006      	b.n	80008ec <trafficLight_automatic+0x4e8>
		break;
 80008de:	bf00      	nop
 80008e0:	e004      	b.n	80008ec <trafficLight_automatic+0x4e8>
		break;
 80008e2:	bf00      	nop
 80008e4:	e002      	b.n	80008ec <trafficLight_automatic+0x4e8>
		break;
 80008e6:	bf00      	nop
 80008e8:	e000      	b.n	80008ec <trafficLight_automatic+0x4e8>
		break;
 80008ea:	bf00      	nop
	}
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000090 	.word	0x20000090
 80008f4:	2000007c 	.word	0x2000007c
 80008f8:	2000009c 	.word	0x2000009c
 80008fc:	200000a0 	.word	0x200000a0
 8000900:	200000a4 	.word	0x200000a4
 8000904:	20000000 	.word	0x20000000
 8000908:	10624dd3 	.word	0x10624dd3
 800090c:	20000098 	.word	0x20000098
 8000910:	2000019c 	.word	0x2000019c
 8000914:	2000008c 	.word	0x2000008c
 8000918:	20000094 	.word	0x20000094
 800091c:	20000004 	.word	0x20000004
 8000920:	200000bc 	.word	0x200000bc
 8000924:	20000050 	.word	0x20000050
 8000928:	20000008 	.word	0x20000008

0800092c <trafficLight_change>:
#include "global.h"
#include "button.h"
#include "software_timer.h"
#include "led_segment_control.h"

void trafficLight_change(){
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	switch(state){
 8000930:	4ba5      	ldr	r3, [pc, #660]	; (8000bc8 <trafficLight_change+0x29c>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	3b05      	subs	r3, #5
 8000936:	2b05      	cmp	r3, #5
 8000938:	f200 81f9 	bhi.w	8000d2e <trafficLight_change+0x402>
 800093c:	a201      	add	r2, pc, #4	; (adr r2, 8000944 <trafficLight_change+0x18>)
 800093e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000942:	bf00      	nop
 8000944:	0800095d 	.word	0x0800095d
 8000948:	08000a03 	.word	0x08000a03
 800094c:	08000aa9 	.word	0x08000aa9
 8000950:	08000b4f 	.word	0x08000b4f
 8000954:	08000bed 	.word	0x08000bed
 8000958:	08000c77 	.word	0x08000c77
	case CHANGE_MODE_RED:
		isRedMode = 1;
 800095c:	4b9b      	ldr	r3, [pc, #620]	; (8000bcc <trafficLight_change+0x2a0>)
 800095e:	2201      	movs	r2, #1
 8000960:	601a      	str	r2, [r3, #0]
		isYellowMode = 0;
 8000962:	4b9b      	ldr	r3, [pc, #620]	; (8000bd0 <trafficLight_change+0x2a4>)
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
		isGreenMode = 0;
 8000968:	4b9a      	ldr	r3, [pc, #616]	; (8000bd4 <trafficLight_change+0x2a8>)
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 800096e:	2000      	movs	r0, #0
 8000970:	f7ff fce0 	bl	8000334 <isPressedAndReleased>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d00c      	beq.n	8000994 <trafficLight_change+0x68>
			tempCounter = counter_yellow/DIVISION_NUMBER;
 800097a:	4b97      	ldr	r3, [pc, #604]	; (8000bd8 <trafficLight_change+0x2ac>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a97      	ldr	r2, [pc, #604]	; (8000bdc <trafficLight_change+0x2b0>)
 8000980:	fb82 1203 	smull	r1, r2, r2, r3
 8000984:	1192      	asrs	r2, r2, #6
 8000986:	17db      	asrs	r3, r3, #31
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	4a95      	ldr	r2, [pc, #596]	; (8000be0 <trafficLight_change+0x2b4>)
 800098c:	6013      	str	r3, [r2, #0]
			state = CHANGE_MODE_YELLOW;
 800098e:	4b8e      	ldr	r3, [pc, #568]	; (8000bc8 <trafficLight_change+0x29c>)
 8000990:	2206      	movs	r2, #6
 8000992:	701a      	strb	r2, [r3, #0]
		}
		if(isPressedAndReleased(BTN_MODIFY_INDEX)){
 8000994:	2001      	movs	r0, #1
 8000996:	f7ff fccd 	bl	8000334 <isPressedAndReleased>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d002      	beq.n	80009a6 <trafficLight_change+0x7a>
			state = MODIFY_PRESSED;
 80009a0:	4b89      	ldr	r3, [pc, #548]	; (8000bc8 <trafficLight_change+0x29c>)
 80009a2:	2208      	movs	r2, #8
 80009a4:	701a      	strb	r2, [r3, #0]
		}
		if(is_button_pressed(BTN_MODIFY_INDEX)){
 80009a6:	2001      	movs	r0, #1
 80009a8:	f7ff fcf8 	bl	800039c <is_button_pressed>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d018      	beq.n	80009e4 <trafficLight_change+0xb8>
			if(is_button_pressed_3s(BTN_MODIFY_INDEX)){
 80009b2:	2001      	movs	r0, #1
 80009b4:	f7ff fd0c 	bl	80003d0 <is_button_pressed_3s>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d012      	beq.n	80009e4 <trafficLight_change+0xb8>
				state = MODIFY_LONGPRESSED;
 80009be:	4b82      	ldr	r3, [pc, #520]	; (8000bc8 <trafficLight_change+0x29c>)
 80009c0:	2209      	movs	r2, #9
 80009c2:	701a      	strb	r2, [r3, #0]
				tempCounter += 10;
 80009c4:	4b86      	ldr	r3, [pc, #536]	; (8000be0 <trafficLight_change+0x2b4>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	330a      	adds	r3, #10
 80009ca:	4a85      	ldr	r2, [pc, #532]	; (8000be0 <trafficLight_change+0x2b4>)
 80009cc:	6013      	str	r3, [r2, #0]
				if(tempCounter > MAX_SEGMENT_VALUE) {
 80009ce:	4b84      	ldr	r3, [pc, #528]	; (8000be0 <trafficLight_change+0x2b4>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b63      	cmp	r3, #99	; 0x63
 80009d4:	dd02      	ble.n	80009dc <trafficLight_change+0xb0>
					tempCounter = 0;
 80009d6:	4b82      	ldr	r3, [pc, #520]	; (8000be0 <trafficLight_change+0x2b4>)
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
				}
				setTimerModify(DURATION_1S);
 80009dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e0:	f000 fdfe 	bl	80015e0 <setTimerModify>
			}
		}
		if(isPressedAndReleased(BTN_SET_INDEX)){
 80009e4:	2002      	movs	r0, #2
 80009e6:	f7ff fca5 	bl	8000334 <isPressedAndReleased>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	f000 81a0 	beq.w	8000d32 <trafficLight_change+0x406>
			state = SET_PRESSED;
 80009f2:	4b75      	ldr	r3, [pc, #468]	; (8000bc8 <trafficLight_change+0x29c>)
 80009f4:	220a      	movs	r2, #10
 80009f6:	701a      	strb	r2, [r3, #0]
			setTimerWait(DURATION_3S);
 80009f8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009fc:	f000 fdd4 	bl	80015a8 <setTimerWait>
		}
		break;
 8000a00:	e197      	b.n	8000d32 <trafficLight_change+0x406>
	case CHANGE_MODE_YELLOW:
		isRedMode = 0;
 8000a02:	4b72      	ldr	r3, [pc, #456]	; (8000bcc <trafficLight_change+0x2a0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
		isYellowMode = 1;
 8000a08:	4b71      	ldr	r3, [pc, #452]	; (8000bd0 <trafficLight_change+0x2a4>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	601a      	str	r2, [r3, #0]
		isGreenMode = 0;
 8000a0e:	4b71      	ldr	r3, [pc, #452]	; (8000bd4 <trafficLight_change+0x2a8>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]

		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 8000a14:	2000      	movs	r0, #0
 8000a16:	f7ff fc8d 	bl	8000334 <isPressedAndReleased>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d00c      	beq.n	8000a3a <trafficLight_change+0x10e>
			tempCounter = counter_green/DIVISION_NUMBER;
 8000a20:	4b70      	ldr	r3, [pc, #448]	; (8000be4 <trafficLight_change+0x2b8>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a6d      	ldr	r2, [pc, #436]	; (8000bdc <trafficLight_change+0x2b0>)
 8000a26:	fb82 1203 	smull	r1, r2, r2, r3
 8000a2a:	1192      	asrs	r2, r2, #6
 8000a2c:	17db      	asrs	r3, r3, #31
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	4a6b      	ldr	r2, [pc, #428]	; (8000be0 <trafficLight_change+0x2b4>)
 8000a32:	6013      	str	r3, [r2, #0]
			state = CHANGE_MODE_GREEN;
 8000a34:	4b64      	ldr	r3, [pc, #400]	; (8000bc8 <trafficLight_change+0x29c>)
 8000a36:	2207      	movs	r2, #7
 8000a38:	701a      	strb	r2, [r3, #0]
		}
		if(isPressedAndReleased(BTN_MODIFY_INDEX)){
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f7ff fc7a 	bl	8000334 <isPressedAndReleased>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d002      	beq.n	8000a4c <trafficLight_change+0x120>
			state = MODIFY_PRESSED;
 8000a46:	4b60      	ldr	r3, [pc, #384]	; (8000bc8 <trafficLight_change+0x29c>)
 8000a48:	2208      	movs	r2, #8
 8000a4a:	701a      	strb	r2, [r3, #0]
		}
		if(is_button_pressed(BTN_MODIFY_INDEX)){
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f7ff fca5 	bl	800039c <is_button_pressed>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d018      	beq.n	8000a8a <trafficLight_change+0x15e>
			if(is_button_pressed_3s(BTN_MODIFY_INDEX)){
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f7ff fcb9 	bl	80003d0 <is_button_pressed_3s>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d012      	beq.n	8000a8a <trafficLight_change+0x15e>
				state = MODIFY_LONGPRESSED;
 8000a64:	4b58      	ldr	r3, [pc, #352]	; (8000bc8 <trafficLight_change+0x29c>)
 8000a66:	2209      	movs	r2, #9
 8000a68:	701a      	strb	r2, [r3, #0]
				tempCounter += 10;
 8000a6a:	4b5d      	ldr	r3, [pc, #372]	; (8000be0 <trafficLight_change+0x2b4>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	330a      	adds	r3, #10
 8000a70:	4a5b      	ldr	r2, [pc, #364]	; (8000be0 <trafficLight_change+0x2b4>)
 8000a72:	6013      	str	r3, [r2, #0]
				if(tempCounter > MAX_SEGMENT_VALUE) {
 8000a74:	4b5a      	ldr	r3, [pc, #360]	; (8000be0 <trafficLight_change+0x2b4>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b63      	cmp	r3, #99	; 0x63
 8000a7a:	dd02      	ble.n	8000a82 <trafficLight_change+0x156>
					tempCounter = 0;
 8000a7c:	4b58      	ldr	r3, [pc, #352]	; (8000be0 <trafficLight_change+0x2b4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
				}
				setTimerModify(DURATION_1S);
 8000a82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a86:	f000 fdab 	bl	80015e0 <setTimerModify>
			}
		}
		if(isPressedAndReleased(BTN_SET_INDEX)){
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	f7ff fc52 	bl	8000334 <isPressedAndReleased>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f000 814f 	beq.w	8000d36 <trafficLight_change+0x40a>
			state = SET_PRESSED;
 8000a98:	4b4b      	ldr	r3, [pc, #300]	; (8000bc8 <trafficLight_change+0x29c>)
 8000a9a:	220a      	movs	r2, #10
 8000a9c:	701a      	strb	r2, [r3, #0]
			setTimerWait(DURATION_3S);
 8000a9e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000aa2:	f000 fd81 	bl	80015a8 <setTimerWait>
		}
		break;
 8000aa6:	e146      	b.n	8000d36 <trafficLight_change+0x40a>
	case CHANGE_MODE_GREEN:
		isRedMode = 0;
 8000aa8:	4b48      	ldr	r3, [pc, #288]	; (8000bcc <trafficLight_change+0x2a0>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
		isYellowMode = 0;
 8000aae:	4b48      	ldr	r3, [pc, #288]	; (8000bd0 <trafficLight_change+0x2a4>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
		isGreenMode = 1;
 8000ab4:	4b47      	ldr	r3, [pc, #284]	; (8000bd4 <trafficLight_change+0x2a8>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	601a      	str	r2, [r3, #0]

		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 8000aba:	2000      	movs	r0, #0
 8000abc:	f7ff fc3a 	bl	8000334 <isPressedAndReleased>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d00c      	beq.n	8000ae0 <trafficLight_change+0x1b4>
			tempCounter = counter_red/DIVISION_NUMBER;
 8000ac6:	4b48      	ldr	r3, [pc, #288]	; (8000be8 <trafficLight_change+0x2bc>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a44      	ldr	r2, [pc, #272]	; (8000bdc <trafficLight_change+0x2b0>)
 8000acc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ad0:	1192      	asrs	r2, r2, #6
 8000ad2:	17db      	asrs	r3, r3, #31
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	4a42      	ldr	r2, [pc, #264]	; (8000be0 <trafficLight_change+0x2b4>)
 8000ad8:	6013      	str	r3, [r2, #0]
			state = CHANGE_MODE_RED;
 8000ada:	4b3b      	ldr	r3, [pc, #236]	; (8000bc8 <trafficLight_change+0x29c>)
 8000adc:	2205      	movs	r2, #5
 8000ade:	701a      	strb	r2, [r3, #0]
		}
		if(isPressedAndReleased(BTN_MODIFY_INDEX)){
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f7ff fc27 	bl	8000334 <isPressedAndReleased>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d002      	beq.n	8000af2 <trafficLight_change+0x1c6>
			state = MODIFY_PRESSED;
 8000aec:	4b36      	ldr	r3, [pc, #216]	; (8000bc8 <trafficLight_change+0x29c>)
 8000aee:	2208      	movs	r2, #8
 8000af0:	701a      	strb	r2, [r3, #0]
		}
		if(is_button_pressed(BTN_MODIFY_INDEX)){
 8000af2:	2001      	movs	r0, #1
 8000af4:	f7ff fc52 	bl	800039c <is_button_pressed>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d018      	beq.n	8000b30 <trafficLight_change+0x204>
			if(is_button_pressed_3s(BTN_MODIFY_INDEX)){
 8000afe:	2001      	movs	r0, #1
 8000b00:	f7ff fc66 	bl	80003d0 <is_button_pressed_3s>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d012      	beq.n	8000b30 <trafficLight_change+0x204>
				state = MODIFY_LONGPRESSED;
 8000b0a:	4b2f      	ldr	r3, [pc, #188]	; (8000bc8 <trafficLight_change+0x29c>)
 8000b0c:	2209      	movs	r2, #9
 8000b0e:	701a      	strb	r2, [r3, #0]
				tempCounter += 10;
 8000b10:	4b33      	ldr	r3, [pc, #204]	; (8000be0 <trafficLight_change+0x2b4>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	330a      	adds	r3, #10
 8000b16:	4a32      	ldr	r2, [pc, #200]	; (8000be0 <trafficLight_change+0x2b4>)
 8000b18:	6013      	str	r3, [r2, #0]
				if(tempCounter > MAX_SEGMENT_VALUE) {
 8000b1a:	4b31      	ldr	r3, [pc, #196]	; (8000be0 <trafficLight_change+0x2b4>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b63      	cmp	r3, #99	; 0x63
 8000b20:	dd02      	ble.n	8000b28 <trafficLight_change+0x1fc>
					tempCounter = 0;
 8000b22:	4b2f      	ldr	r3, [pc, #188]	; (8000be0 <trafficLight_change+0x2b4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
				}
				setTimerModify(DURATION_1S);
 8000b28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b2c:	f000 fd58 	bl	80015e0 <setTimerModify>
			}
		}
		if(isPressedAndReleased(BTN_SET_INDEX)){
 8000b30:	2002      	movs	r0, #2
 8000b32:	f7ff fbff 	bl	8000334 <isPressedAndReleased>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	f000 80fe 	beq.w	8000d3a <trafficLight_change+0x40e>
			state = SET_PRESSED;
 8000b3e:	4b22      	ldr	r3, [pc, #136]	; (8000bc8 <trafficLight_change+0x29c>)
 8000b40:	220a      	movs	r2, #10
 8000b42:	701a      	strb	r2, [r3, #0]
			setTimerWait(DURATION_3S);
 8000b44:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b48:	f000 fd2e 	bl	80015a8 <setTimerWait>
		}
		break;
 8000b4c:	e0f5      	b.n	8000d3a <trafficLight_change+0x40e>
	case MODIFY_PRESSED:
		if(isRedMode == 1){
 8000b4e:	4b1f      	ldr	r3, [pc, #124]	; (8000bcc <trafficLight_change+0x2a0>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d10f      	bne.n	8000b76 <trafficLight_change+0x24a>
			tempCounter += 1;
 8000b56:	4b22      	ldr	r3, [pc, #136]	; (8000be0 <trafficLight_change+0x2b4>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	4a20      	ldr	r2, [pc, #128]	; (8000be0 <trafficLight_change+0x2b4>)
 8000b5e:	6013      	str	r3, [r2, #0]
			if(tempCounter > MAX_SEGMENT_VALUE){
 8000b60:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <trafficLight_change+0x2b4>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b63      	cmp	r3, #99	; 0x63
 8000b66:	dd02      	ble.n	8000b6e <trafficLight_change+0x242>
				tempCounter =0;
 8000b68:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <trafficLight_change+0x2b4>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
			}
			state = CHANGE_MODE_RED;
 8000b6e:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <trafficLight_change+0x29c>)
 8000b70:	2205      	movs	r2, #5
 8000b72:	701a      	strb	r2, [r3, #0]
			if(tempCounter > MAX_SEGMENT_VALUE){
				tempCounter = 0;
			}
			state = CHANGE_MODE_GREEN;
		}
		break;
 8000b74:	e0e3      	b.n	8000d3e <trafficLight_change+0x412>
		else if(isYellowMode == 1){
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <trafficLight_change+0x2a4>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d10f      	bne.n	8000b9e <trafficLight_change+0x272>
			tempCounter += 1;
 8000b7e:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <trafficLight_change+0x2b4>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	3301      	adds	r3, #1
 8000b84:	4a16      	ldr	r2, [pc, #88]	; (8000be0 <trafficLight_change+0x2b4>)
 8000b86:	6013      	str	r3, [r2, #0]
			if(tempCounter > MAX_SEGMENT_VALUE){
 8000b88:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <trafficLight_change+0x2b4>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b63      	cmp	r3, #99	; 0x63
 8000b8e:	dd02      	ble.n	8000b96 <trafficLight_change+0x26a>
				tempCounter =0;
 8000b90:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <trafficLight_change+0x2b4>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
			state = CHANGE_MODE_YELLOW;
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <trafficLight_change+0x29c>)
 8000b98:	2206      	movs	r2, #6
 8000b9a:	701a      	strb	r2, [r3, #0]
		break;
 8000b9c:	e0cf      	b.n	8000d3e <trafficLight_change+0x412>
		else if(isGreenMode == 1){
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <trafficLight_change+0x2a8>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	f040 80cb 	bne.w	8000d3e <trafficLight_change+0x412>
			tempCounter += 1;
 8000ba8:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <trafficLight_change+0x2b4>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	3301      	adds	r3, #1
 8000bae:	4a0c      	ldr	r2, [pc, #48]	; (8000be0 <trafficLight_change+0x2b4>)
 8000bb0:	6013      	str	r3, [r2, #0]
			if(tempCounter > MAX_SEGMENT_VALUE){
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <trafficLight_change+0x2b4>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2b63      	cmp	r3, #99	; 0x63
 8000bb8:	dd02      	ble.n	8000bc0 <trafficLight_change+0x294>
				tempCounter = 0;
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <trafficLight_change+0x2b4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
			state = CHANGE_MODE_GREEN;
 8000bc0:	4b01      	ldr	r3, [pc, #4]	; (8000bc8 <trafficLight_change+0x29c>)
 8000bc2:	2207      	movs	r2, #7
 8000bc4:	701a      	strb	r2, [r3, #0]
		break;
 8000bc6:	e0ba      	b.n	8000d3e <trafficLight_change+0x412>
 8000bc8:	2000009c 	.word	0x2000009c
 8000bcc:	20000088 	.word	0x20000088
 8000bd0:	20000084 	.word	0x20000084
 8000bd4:	200000a8 	.word	0x200000a8
 8000bd8:	20000004 	.word	0x20000004
 8000bdc:	10624dd3 	.word	0x10624dd3
 8000be0:	20000098 	.word	0x20000098
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000000 	.word	0x20000000
	case MODIFY_LONGPRESSED:
		if(scanFreqTimer_flag == 1){
 8000bec:	4b57      	ldr	r3, [pc, #348]	; (8000d4c <trafficLight_change+0x420>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d10e      	bne.n	8000c12 <trafficLight_change+0x2e6>
			segmentIndexManual++;
 8000bf4:	4b56      	ldr	r3, [pc, #344]	; (8000d50 <trafficLight_change+0x424>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	4a55      	ldr	r2, [pc, #340]	; (8000d50 <trafficLight_change+0x424>)
 8000bfc:	6013      	str	r3, [r2, #0]
			if(segmentIndexManual >= SEGMENT_IN_A_ROW) segmentIndexManual = 0;
 8000bfe:	4b54      	ldr	r3, [pc, #336]	; (8000d50 <trafficLight_change+0x424>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	dd02      	ble.n	8000c0c <trafficLight_change+0x2e0>
 8000c06:	4b52      	ldr	r3, [pc, #328]	; (8000d50 <trafficLight_change+0x424>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
			setTimerScanFreq(DURATION_FOR_5HZ);
 8000c0c:	20c8      	movs	r0, #200	; 0xc8
 8000c0e:	f000 fd3b 	bl	8001688 <setTimerScanFreq>
		}
		if(modifyTimer_flag == 1){
 8000c12:	4b50      	ldr	r3, [pc, #320]	; (8000d54 <trafficLight_change+0x428>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d10f      	bne.n	8000c3a <trafficLight_change+0x30e>
			tempCounter += 10;
 8000c1a:	4b4f      	ldr	r3, [pc, #316]	; (8000d58 <trafficLight_change+0x42c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	330a      	adds	r3, #10
 8000c20:	4a4d      	ldr	r2, [pc, #308]	; (8000d58 <trafficLight_change+0x42c>)
 8000c22:	6013      	str	r3, [r2, #0]
			if(tempCounter > MAX_SEGMENT_VALUE) {
 8000c24:	4b4c      	ldr	r3, [pc, #304]	; (8000d58 <trafficLight_change+0x42c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b63      	cmp	r3, #99	; 0x63
 8000c2a:	dd02      	ble.n	8000c32 <trafficLight_change+0x306>
				tempCounter = 0;
 8000c2c:	4b4a      	ldr	r3, [pc, #296]	; (8000d58 <trafficLight_change+0x42c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
			}
			setTimerModify(DURATION_1S);
 8000c32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c36:	f000 fcd3 	bl	80015e0 <setTimerModify>
		}
		if(!is_button_pressed(BTN_MODIFY_INDEX)){
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f7ff fbae 	bl	800039c <is_button_pressed>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d17d      	bne.n	8000d42 <trafficLight_change+0x416>
			if(isRedMode == 1) state = CHANGE_MODE_RED;
 8000c46:	4b45      	ldr	r3, [pc, #276]	; (8000d5c <trafficLight_change+0x430>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d103      	bne.n	8000c56 <trafficLight_change+0x32a>
 8000c4e:	4b44      	ldr	r3, [pc, #272]	; (8000d60 <trafficLight_change+0x434>)
 8000c50:	2205      	movs	r2, #5
 8000c52:	701a      	strb	r2, [r3, #0]
			else if(isYellowMode == 1) state = CHANGE_MODE_YELLOW;
			else if(isGreenMode == 1) state = CHANGE_MODE_GREEN;
		}

		break;
 8000c54:	e075      	b.n	8000d42 <trafficLight_change+0x416>
			else if(isYellowMode == 1) state = CHANGE_MODE_YELLOW;
 8000c56:	4b43      	ldr	r3, [pc, #268]	; (8000d64 <trafficLight_change+0x438>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d103      	bne.n	8000c66 <trafficLight_change+0x33a>
 8000c5e:	4b40      	ldr	r3, [pc, #256]	; (8000d60 <trafficLight_change+0x434>)
 8000c60:	2206      	movs	r2, #6
 8000c62:	701a      	strb	r2, [r3, #0]
		break;
 8000c64:	e06d      	b.n	8000d42 <trafficLight_change+0x416>
			else if(isGreenMode == 1) state = CHANGE_MODE_GREEN;
 8000c66:	4b40      	ldr	r3, [pc, #256]	; (8000d68 <trafficLight_change+0x43c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d169      	bne.n	8000d42 <trafficLight_change+0x416>
 8000c6e:	4b3c      	ldr	r3, [pc, #240]	; (8000d60 <trafficLight_change+0x434>)
 8000c70:	2207      	movs	r2, #7
 8000c72:	701a      	strb	r2, [r3, #0]
		break;
 8000c74:	e065      	b.n	8000d42 <trafficLight_change+0x416>
	case SET_PRESSED:
		if(isRedMode == 1) counter_red = tempCounter * DIVISION_NUMBER;
 8000c76:	4b39      	ldr	r3, [pc, #228]	; (8000d5c <trafficLight_change+0x430>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d108      	bne.n	8000c90 <trafficLight_change+0x364>
 8000c7e:	4b36      	ldr	r3, [pc, #216]	; (8000d58 <trafficLight_change+0x42c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c86:	fb02 f303 	mul.w	r3, r2, r3
 8000c8a:	4a38      	ldr	r2, [pc, #224]	; (8000d6c <trafficLight_change+0x440>)
 8000c8c:	6013      	str	r3, [r2, #0]
 8000c8e:	e018      	b.n	8000cc2 <trafficLight_change+0x396>
		else if (isYellowMode == 1) counter_yellow = tempCounter * DIVISION_NUMBER;
 8000c90:	4b34      	ldr	r3, [pc, #208]	; (8000d64 <trafficLight_change+0x438>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d108      	bne.n	8000caa <trafficLight_change+0x37e>
 8000c98:	4b2f      	ldr	r3, [pc, #188]	; (8000d58 <trafficLight_change+0x42c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ca0:	fb02 f303 	mul.w	r3, r2, r3
 8000ca4:	4a32      	ldr	r2, [pc, #200]	; (8000d70 <trafficLight_change+0x444>)
 8000ca6:	6013      	str	r3, [r2, #0]
 8000ca8:	e00b      	b.n	8000cc2 <trafficLight_change+0x396>
		else if (isGreenMode == 1) counter_green = tempCounter * DIVISION_NUMBER;
 8000caa:	4b2f      	ldr	r3, [pc, #188]	; (8000d68 <trafficLight_change+0x43c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d107      	bne.n	8000cc2 <trafficLight_change+0x396>
 8000cb2:	4b29      	ldr	r3, [pc, #164]	; (8000d58 <trafficLight_change+0x42c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cba:	fb02 f303 	mul.w	r3, r2, r3
 8000cbe:	4a2d      	ldr	r2, [pc, #180]	; (8000d74 <trafficLight_change+0x448>)
 8000cc0:	6013      	str	r3, [r2, #0]
		isRedMode = 0;
 8000cc2:	4b26      	ldr	r3, [pc, #152]	; (8000d5c <trafficLight_change+0x430>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
		isYellowMode = 0;
 8000cc8:	4b26      	ldr	r3, [pc, #152]	; (8000d64 <trafficLight_change+0x438>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
		isGreenMode = 0;
 8000cce:	4b26      	ldr	r3, [pc, #152]	; (8000d68 <trafficLight_change+0x43c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
		isInChange = 0;
 8000cd4:	4b28      	ldr	r3, [pc, #160]	; (8000d78 <trafficLight_change+0x44c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
		scanFreqTimer_flag = 0;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <trafficLight_change+0x420>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
		tempCounter = 0;
 8000ce0:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <trafficLight_change+0x42c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f7ff fb24 	bl	8000334 <isPressedAndReleased>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d015      	beq.n	8000d1e <trafficLight_change+0x3f2>
			isInChange = 1;
 8000cf2:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <trafficLight_change+0x44c>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	601a      	str	r2, [r3, #0]
			setTimerTriggerLed(DURATION_FOR_4HZ);
 8000cf8:	20fa      	movs	r0, #250	; 0xfa
 8000cfa:	f000 fc8d 	bl	8001618 <setTimerTriggerLed>
			setTimerScanFreq(DURATION_FOR_5HZ);
 8000cfe:	20c8      	movs	r0, #200	; 0xc8
 8000d00:	f000 fcc2 	bl	8001688 <setTimerScanFreq>
			tempCounter = counter_red/DIVISION_NUMBER;
 8000d04:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <trafficLight_change+0x440>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a1c      	ldr	r2, [pc, #112]	; (8000d7c <trafficLight_change+0x450>)
 8000d0a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d0e:	1192      	asrs	r2, r2, #6
 8000d10:	17db      	asrs	r3, r3, #31
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	4a10      	ldr	r2, [pc, #64]	; (8000d58 <trafficLight_change+0x42c>)
 8000d16:	6013      	str	r3, [r2, #0]
			state = CHANGE_MODE_RED;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <trafficLight_change+0x434>)
 8000d1a:	2205      	movs	r2, #5
 8000d1c:	701a      	strb	r2, [r3, #0]
		}
		if(waitTimer_flag == 1){
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <trafficLight_change+0x454>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d10f      	bne.n	8000d46 <trafficLight_change+0x41a>
			state = IDLE;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <trafficLight_change+0x434>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000d2c:	e00b      	b.n	8000d46 <trafficLight_change+0x41a>
	default:
		break;
 8000d2e:	bf00      	nop
 8000d30:	e00a      	b.n	8000d48 <trafficLight_change+0x41c>
		break;
 8000d32:	bf00      	nop
 8000d34:	e008      	b.n	8000d48 <trafficLight_change+0x41c>
		break;
 8000d36:	bf00      	nop
 8000d38:	e006      	b.n	8000d48 <trafficLight_change+0x41c>
		break;
 8000d3a:	bf00      	nop
 8000d3c:	e004      	b.n	8000d48 <trafficLight_change+0x41c>
		break;
 8000d3e:	bf00      	nop
 8000d40:	e002      	b.n	8000d48 <trafficLight_change+0x41c>
		break;
 8000d42:	bf00      	nop
 8000d44:	e000      	b.n	8000d48 <trafficLight_change+0x41c>
		break;
 8000d46:	bf00      	nop
	}
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	200001c0 	.word	0x200001c0
 8000d50:	20000080 	.word	0x20000080
 8000d54:	200001b8 	.word	0x200001b8
 8000d58:	20000098 	.word	0x20000098
 8000d5c:	20000088 	.word	0x20000088
 8000d60:	2000009c 	.word	0x2000009c
 8000d64:	20000084 	.word	0x20000084
 8000d68:	200000a8 	.word	0x200000a8
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000004 	.word	0x20000004
 8000d74:	20000008 	.word	0x20000008
 8000d78:	200000a4 	.word	0x200000a4
 8000d7c:	10624dd3 	.word	0x10624dd3
 8000d80:	200001c4 	.word	0x200001c4

08000d84 <trafficLight_manual>:
#include "global.h"
#include "button.h"
#include "software_timer.h"
#include "led_segment_control.h"

void trafficLight_manual(){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	switch(state){
 8000d88:	4b67      	ldr	r3, [pc, #412]	; (8000f28 <trafficLight_manual+0x1a4>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	3b0b      	subs	r3, #11
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	f200 80be 	bhi.w	8000f10 <trafficLight_manual+0x18c>
 8000d94:	a201      	add	r2, pc, #4	; (adr r2, 8000d9c <trafficLight_manual+0x18>)
 8000d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d9a:	bf00      	nop
 8000d9c:	08000dad 	.word	0x08000dad
 8000da0:	08000df7 	.word	0x08000df7
 8000da4:	08000e69 	.word	0x08000e69
 8000da8:	08000eb1 	.word	0x08000eb1
	case MANUAL_RED1_GREEN2:
		displayTrafficLight(RED_LIGHT, GREEN_LIGHT);
 8000dac:	2103      	movs	r1, #3
 8000dae:	2001      	movs	r0, #1
 8000db0:	f000 f8cc 	bl	8000f4c <displayTrafficLight>
		if(isPressedAndReleased(BTN_MODIFY_INDEX)){
 8000db4:	2001      	movs	r0, #1
 8000db6:	f7ff fabd 	bl	8000334 <isPressedAndReleased>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d007      	beq.n	8000dd0 <trafficLight_manual+0x4c>
			state = MANUAL_RED1_YELLOW2;
 8000dc0:	4b59      	ldr	r3, [pc, #356]	; (8000f28 <trafficLight_manual+0x1a4>)
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	701a      	strb	r2, [r3, #0]
			setTimerTraffic1(counter_yellow);
 8000dc6:	4b59      	ldr	r3, [pc, #356]	; (8000f2c <trafficLight_manual+0x1a8>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 fbd0 	bl	8001570 <setTimerTraffic1>
		}
		if(isPressedAndReleased(BTN_SET_INDEX)){
 8000dd0:	2002      	movs	r0, #2
 8000dd2:	f7ff faaf 	bl	8000334 <isPressedAndReleased>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f000 809b 	beq.w	8000f14 <trafficLight_manual+0x190>
			isInAuto = 1;
 8000dde:	4b54      	ldr	r3, [pc, #336]	; (8000f30 <trafficLight_manual+0x1ac>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	601a      	str	r2, [r3, #0]
			state = MANUAL_RED1_YELLOW2;
 8000de4:	4b50      	ldr	r3, [pc, #320]	; (8000f28 <trafficLight_manual+0x1a4>)
 8000de6:	220c      	movs	r2, #12
 8000de8:	701a      	strb	r2, [r3, #0]
			setTimerTraffic1(counter_yellow);
 8000dea:	4b50      	ldr	r3, [pc, #320]	; (8000f2c <trafficLight_manual+0x1a8>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 fbbe 	bl	8001570 <setTimerTraffic1>
		}
		break;
 8000df4:	e08e      	b.n	8000f14 <trafficLight_manual+0x190>
	case MANUAL_RED1_YELLOW2:
		displayTrafficLight(RED_LIGHT, YELLOW_LIGHT);
 8000df6:	2102      	movs	r1, #2
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f000 f8a7 	bl	8000f4c <displayTrafficLight>
		if(isPressedAndReleased(BTN_SET_INDEX)){
 8000dfe:	2002      	movs	r0, #2
 8000e00:	f7ff fa98 	bl	8000334 <isPressedAndReleased>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d002      	beq.n	8000e10 <trafficLight_manual+0x8c>
			isInAuto = 1;
 8000e0a:	4b49      	ldr	r3, [pc, #292]	; (8000f30 <trafficLight_manual+0x1ac>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]
		}
		if(trafficTimer1_flag == 1){
 8000e10:	4b48      	ldr	r3, [pc, #288]	; (8000f34 <trafficLight_manual+0x1b0>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d103      	bne.n	8000e20 <trafficLight_manual+0x9c>
			state = MANUAL_GREEN1_RED2;
 8000e18:	4b43      	ldr	r3, [pc, #268]	; (8000f28 <trafficLight_manual+0x1a4>)
 8000e1a:	220d      	movs	r2, #13
 8000e1c:	701a      	strb	r2, [r3, #0]
			segment1Counter = counter_green / DIVISION_NUMBER;
			segment2Counter = counter_red / DIVISION_NUMBER;
			state = AUTO_GREEN1_RED2;
			setTimerCounter1(DURATION_1S);
		}
		break;
 8000e1e:	e07b      	b.n	8000f18 <trafficLight_manual+0x194>
		else if (trafficTimer1_flag == 1 && isInAuto == 1){
 8000e20:	4b44      	ldr	r3, [pc, #272]	; (8000f34 <trafficLight_manual+0x1b0>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d177      	bne.n	8000f18 <trafficLight_manual+0x194>
 8000e28:	4b41      	ldr	r3, [pc, #260]	; (8000f30 <trafficLight_manual+0x1ac>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d173      	bne.n	8000f18 <trafficLight_manual+0x194>
			segment1Counter = counter_green / DIVISION_NUMBER;
 8000e30:	4b41      	ldr	r3, [pc, #260]	; (8000f38 <trafficLight_manual+0x1b4>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a41      	ldr	r2, [pc, #260]	; (8000f3c <trafficLight_manual+0x1b8>)
 8000e36:	fb82 1203 	smull	r1, r2, r2, r3
 8000e3a:	1192      	asrs	r2, r2, #6
 8000e3c:	17db      	asrs	r3, r3, #31
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	4a3f      	ldr	r2, [pc, #252]	; (8000f40 <trafficLight_manual+0x1bc>)
 8000e42:	6013      	str	r3, [r2, #0]
			segment2Counter = counter_red / DIVISION_NUMBER;
 8000e44:	4b3f      	ldr	r3, [pc, #252]	; (8000f44 <trafficLight_manual+0x1c0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a3c      	ldr	r2, [pc, #240]	; (8000f3c <trafficLight_manual+0x1b8>)
 8000e4a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e4e:	1192      	asrs	r2, r2, #6
 8000e50:	17db      	asrs	r3, r3, #31
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	4a3c      	ldr	r2, [pc, #240]	; (8000f48 <trafficLight_manual+0x1c4>)
 8000e56:	6013      	str	r3, [r2, #0]
			state = AUTO_GREEN1_RED2;
 8000e58:	4b33      	ldr	r3, [pc, #204]	; (8000f28 <trafficLight_manual+0x1a4>)
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	701a      	strb	r2, [r3, #0]
			setTimerCounter1(DURATION_1S);
 8000e5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e62:	f000 fbf5 	bl	8001650 <setTimerCounter1>
		break;
 8000e66:	e057      	b.n	8000f18 <trafficLight_manual+0x194>
	case MANUAL_GREEN1_RED2:
		displayTrafficLight(GREEN_LIGHT, RED_LIGHT);
 8000e68:	2101      	movs	r1, #1
 8000e6a:	2003      	movs	r0, #3
 8000e6c:	f000 f86e 	bl	8000f4c <displayTrafficLight>
		if(isPressedAndReleased(BTN_SET_INDEX)){
 8000e70:	2002      	movs	r0, #2
 8000e72:	f7ff fa5f 	bl	8000334 <isPressedAndReleased>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00a      	beq.n	8000e92 <trafficLight_manual+0x10e>
			isInAuto = 1;
 8000e7c:	4b2c      	ldr	r3, [pc, #176]	; (8000f30 <trafficLight_manual+0x1ac>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	601a      	str	r2, [r3, #0]
			state = MANUAL_YELLOW1_RED2;
 8000e82:	4b29      	ldr	r3, [pc, #164]	; (8000f28 <trafficLight_manual+0x1a4>)
 8000e84:	220e      	movs	r2, #14
 8000e86:	701a      	strb	r2, [r3, #0]
			setTimerTraffic1(counter_yellow);
 8000e88:	4b28      	ldr	r3, [pc, #160]	; (8000f2c <trafficLight_manual+0x1a8>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 fb6f 	bl	8001570 <setTimerTraffic1>
		}
		if(isPressedAndReleased(BTN_MODIFY_INDEX)){
 8000e92:	2001      	movs	r0, #1
 8000e94:	f7ff fa4e 	bl	8000334 <isPressedAndReleased>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d03e      	beq.n	8000f1c <trafficLight_manual+0x198>
			state = MANUAL_YELLOW1_RED2;
 8000e9e:	4b22      	ldr	r3, [pc, #136]	; (8000f28 <trafficLight_manual+0x1a4>)
 8000ea0:	220e      	movs	r2, #14
 8000ea2:	701a      	strb	r2, [r3, #0]
			setTimerTraffic1(counter_yellow);
 8000ea4:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <trafficLight_manual+0x1a8>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 fb61 	bl	8001570 <setTimerTraffic1>
		}
		break;
 8000eae:	e035      	b.n	8000f1c <trafficLight_manual+0x198>
	case MANUAL_YELLOW1_RED2:
		displayTrafficLight(YELLOW_LIGHT, RED_LIGHT);
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	2002      	movs	r0, #2
 8000eb4:	f000 f84a 	bl	8000f4c <displayTrafficLight>
		if(trafficTimer1_flag == 1){
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <trafficLight_manual+0x1b0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d103      	bne.n	8000ec8 <trafficLight_manual+0x144>
			state = MANUAL_RED1_GREEN2;
 8000ec0:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <trafficLight_manual+0x1a4>)
 8000ec2:	220b      	movs	r2, #11
 8000ec4:	701a      	strb	r2, [r3, #0]
			segment1Counter = counter_red / DIVISION_NUMBER;
			segment2Counter = counter_green / DIVISION_NUMBER;
			state = AUTO_RED1_GREEN2;
			setTimerCounter1(DURATION_1S);
		}
		break;
 8000ec6:	e02b      	b.n	8000f20 <trafficLight_manual+0x19c>
		else if (trafficTimer1_flag == 1 && isInAuto == 1){
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <trafficLight_manual+0x1b0>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d127      	bne.n	8000f20 <trafficLight_manual+0x19c>
 8000ed0:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <trafficLight_manual+0x1ac>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d123      	bne.n	8000f20 <trafficLight_manual+0x19c>
			segment1Counter = counter_red / DIVISION_NUMBER;
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <trafficLight_manual+0x1c0>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a17      	ldr	r2, [pc, #92]	; (8000f3c <trafficLight_manual+0x1b8>)
 8000ede:	fb82 1203 	smull	r1, r2, r2, r3
 8000ee2:	1192      	asrs	r2, r2, #6
 8000ee4:	17db      	asrs	r3, r3, #31
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	4a15      	ldr	r2, [pc, #84]	; (8000f40 <trafficLight_manual+0x1bc>)
 8000eea:	6013      	str	r3, [r2, #0]
			segment2Counter = counter_green / DIVISION_NUMBER;
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <trafficLight_manual+0x1b4>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <trafficLight_manual+0x1b8>)
 8000ef2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ef6:	1192      	asrs	r2, r2, #6
 8000ef8:	17db      	asrs	r3, r3, #31
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <trafficLight_manual+0x1c4>)
 8000efe:	6013      	str	r3, [r2, #0]
			state = AUTO_RED1_GREEN2;
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <trafficLight_manual+0x1a4>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	701a      	strb	r2, [r3, #0]
			setTimerCounter1(DURATION_1S);
 8000f06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f0a:	f000 fba1 	bl	8001650 <setTimerCounter1>
		break;
 8000f0e:	e007      	b.n	8000f20 <trafficLight_manual+0x19c>
	default:
		break;
 8000f10:	bf00      	nop
 8000f12:	e006      	b.n	8000f22 <trafficLight_manual+0x19e>
		break;
 8000f14:	bf00      	nop
 8000f16:	e004      	b.n	8000f22 <trafficLight_manual+0x19e>
		break;
 8000f18:	bf00      	nop
 8000f1a:	e002      	b.n	8000f22 <trafficLight_manual+0x19e>
		break;
 8000f1c:	bf00      	nop
 8000f1e:	e000      	b.n	8000f22 <trafficLight_manual+0x19e>
		break;
 8000f20:	bf00      	nop
	}
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2000009c 	.word	0x2000009c
 8000f2c:	20000004 	.word	0x20000004
 8000f30:	200000a0 	.word	0x200000a0
 8000f34:	200001d0 	.word	0x200001d0
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	10624dd3 	.word	0x10624dd3
 8000f40:	2000008c 	.word	0x2000008c
 8000f44:	20000000 	.word	0x20000000
 8000f48:	20000094 	.word	0x20000094

08000f4c <displayTrafficLight>:

#include "led_segment_control.h"
#include "main.h"
#include "global.h"
#include "software_timer.h"
void displayTrafficLight(int light1, int light2){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
	switch(light1){
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b03      	cmp	r3, #3
 8000f5a:	d021      	beq.n	8000fa0 <displayTrafficLight+0x54>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	dc2a      	bgt.n	8000fb8 <displayTrafficLight+0x6c>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d003      	beq.n	8000f70 <displayTrafficLight+0x24>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d00c      	beq.n	8000f88 <displayTrafficLight+0x3c>
 8000f6e:	e023      	b.n	8000fb8 <displayTrafficLight+0x6c>
	case RED_LIGHT:
		HAL_GPIO_WritePin(D2_RED_LED1_GPIO_Port, D2_RED_LED1_Pin, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f76:	4829      	ldr	r0, [pc, #164]	; (800101c <displayTrafficLight+0xd0>)
 8000f78:	f001 f8d1 	bl	800211e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GREEN_LED1_GPIO_Port, D3_GREEN_LED1_Pin, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2108      	movs	r1, #8
 8000f80:	4827      	ldr	r0, [pc, #156]	; (8001020 <displayTrafficLight+0xd4>)
 8000f82:	f001 f8cc 	bl	800211e <HAL_GPIO_WritePin>
		break;
 8000f86:	e017      	b.n	8000fb8 <displayTrafficLight+0x6c>
	case YELLOW_LIGHT:
		HAL_GPIO_WritePin(D2_RED_LED1_GPIO_Port, D2_RED_LED1_Pin, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f8e:	4823      	ldr	r0, [pc, #140]	; (800101c <displayTrafficLight+0xd0>)
 8000f90:	f001 f8c5 	bl	800211e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GREEN_LED1_GPIO_Port, D3_GREEN_LED1_Pin, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2108      	movs	r1, #8
 8000f98:	4821      	ldr	r0, [pc, #132]	; (8001020 <displayTrafficLight+0xd4>)
 8000f9a:	f001 f8c0 	bl	800211e <HAL_GPIO_WritePin>
		break;
 8000f9e:	e00b      	b.n	8000fb8 <displayTrafficLight+0x6c>
	case GREEN_LIGHT:
		HAL_GPIO_WritePin(D2_RED_LED1_GPIO_Port, D2_RED_LED1_Pin, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa6:	481d      	ldr	r0, [pc, #116]	; (800101c <displayTrafficLight+0xd0>)
 8000fa8:	f001 f8b9 	bl	800211e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GREEN_LED1_GPIO_Port, D3_GREEN_LED1_Pin, GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2108      	movs	r1, #8
 8000fb0:	481b      	ldr	r0, [pc, #108]	; (8001020 <displayTrafficLight+0xd4>)
 8000fb2:	f001 f8b4 	bl	800211e <HAL_GPIO_WritePin>
		break;
 8000fb6:	bf00      	nop
	}
	switch(light2){
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	d01f      	beq.n	8000ffe <displayTrafficLight+0xb2>
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	dc27      	bgt.n	8001014 <displayTrafficLight+0xc8>
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d003      	beq.n	8000fd2 <displayTrafficLight+0x86>
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d00b      	beq.n	8000fe8 <displayTrafficLight+0x9c>
	case GREEN_LIGHT:
		HAL_GPIO_WritePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin, GPIO_PIN_SET);
		break;
	}
}
 8000fd0:	e020      	b.n	8001014 <displayTrafficLight+0xc8>
		HAL_GPIO_WritePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin, GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2120      	movs	r1, #32
 8000fd6:	4812      	ldr	r0, [pc, #72]	; (8001020 <displayTrafficLight+0xd4>)
 8000fd8:	f001 f8a1 	bl	800211e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin, GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2110      	movs	r1, #16
 8000fe0:	480f      	ldr	r0, [pc, #60]	; (8001020 <displayTrafficLight+0xd4>)
 8000fe2:	f001 f89c 	bl	800211e <HAL_GPIO_WritePin>
		break;
 8000fe6:	e015      	b.n	8001014 <displayTrafficLight+0xc8>
		HAL_GPIO_WritePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin, GPIO_PIN_SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2120      	movs	r1, #32
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <displayTrafficLight+0xd4>)
 8000fee:	f001 f896 	bl	800211e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin, GPIO_PIN_SET);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2110      	movs	r1, #16
 8000ff6:	480a      	ldr	r0, [pc, #40]	; (8001020 <displayTrafficLight+0xd4>)
 8000ff8:	f001 f891 	bl	800211e <HAL_GPIO_WritePin>
		break;
 8000ffc:	e00a      	b.n	8001014 <displayTrafficLight+0xc8>
		HAL_GPIO_WritePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2120      	movs	r1, #32
 8001002:	4807      	ldr	r0, [pc, #28]	; (8001020 <displayTrafficLight+0xd4>)
 8001004:	f001 f88b 	bl	800211e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin, GPIO_PIN_SET);
 8001008:	2201      	movs	r2, #1
 800100a:	2110      	movs	r1, #16
 800100c:	4804      	ldr	r0, [pc, #16]	; (8001020 <displayTrafficLight+0xd4>)
 800100e:	f001 f886 	bl	800211e <HAL_GPIO_WritePin>
		break;
 8001012:	bf00      	nop
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40010800 	.word	0x40010800
 8001020:	40010c00 	.word	0x40010c00

08001024 <clearTrafficDisplay>:

void clearTrafficDisplay(){
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_RED_LED1_GPIO_Port, D2_RED_LED1_Pin, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800102e:	480a      	ldr	r0, [pc, #40]	; (8001058 <clearTrafficDisplay+0x34>)
 8001030:	f001 f875 	bl	800211e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GREEN_LED1_GPIO_Port, D3_GREEN_LED1_Pin, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	2108      	movs	r1, #8
 8001038:	4808      	ldr	r0, [pc, #32]	; (800105c <clearTrafficDisplay+0x38>)
 800103a:	f001 f870 	bl	800211e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2120      	movs	r1, #32
 8001042:	4806      	ldr	r0, [pc, #24]	; (800105c <clearTrafficDisplay+0x38>)
 8001044:	f001 f86b 	bl	800211e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	2110      	movs	r1, #16
 800104c:	4803      	ldr	r0, [pc, #12]	; (800105c <clearTrafficDisplay+0x38>)
 800104e:	f001 f866 	bl	800211e <HAL_GPIO_WritePin>
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40010800 	.word	0x40010800
 800105c:	40010c00 	.word	0x40010c00

08001060 <displayPedestrianLight>:

void displayPedestrianLight(int status){
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	switch(status){
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b06      	cmp	r3, #6
 800106c:	d023      	beq.n	80010b6 <displayPedestrianLight+0x56>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b06      	cmp	r3, #6
 8001072:	dc2c      	bgt.n	80010ce <displayPedestrianLight+0x6e>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b04      	cmp	r3, #4
 8001078:	d003      	beq.n	8001082 <displayPedestrianLight+0x22>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b05      	cmp	r3, #5
 800107e:	d00d      	beq.n	800109c <displayPedestrianLight+0x3c>
 8001080:	e025      	b.n	80010ce <displayPedestrianLight+0x6e>
	case PEDESTRIAN_LIGHT_GO:
		HAL_GPIO_WritePin(D6_PED_LIGHT1_GPIO_Port, D6_PED_LIGHT1_Pin, GPIO_PIN_SET);
 8001082:	2201      	movs	r2, #1
 8001084:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001088:	4819      	ldr	r0, [pc, #100]	; (80010f0 <displayPedestrianLight+0x90>)
 800108a:	f001 f848 	bl	800211e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_PED_LIGHT2_GPIO_Port, D7_PED_LIGHT2_Pin, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001094:	4817      	ldr	r0, [pc, #92]	; (80010f4 <displayPedestrianLight+0x94>)
 8001096:	f001 f842 	bl	800211e <HAL_GPIO_WritePin>
		break;
 800109a:	e025      	b.n	80010e8 <displayPedestrianLight+0x88>
	case PEDESTRIAN_LIGHT_STOP:
		HAL_GPIO_WritePin(D6_PED_LIGHT1_GPIO_Port, D6_PED_LIGHT1_Pin, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a2:	4813      	ldr	r0, [pc, #76]	; (80010f0 <displayPedestrianLight+0x90>)
 80010a4:	f001 f83b 	bl	800211e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_PED_LIGHT2_GPIO_Port, D7_PED_LIGHT2_Pin, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ae:	4811      	ldr	r0, [pc, #68]	; (80010f4 <displayPedestrianLight+0x94>)
 80010b0:	f001 f835 	bl	800211e <HAL_GPIO_WritePin>
		break;
 80010b4:	e018      	b.n	80010e8 <displayPedestrianLight+0x88>
	case PEDESTRIAN_LIGHT_OFF:
		HAL_GPIO_WritePin(D6_PED_LIGHT1_GPIO_Port, D6_PED_LIGHT1_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010bc:	480c      	ldr	r0, [pc, #48]	; (80010f0 <displayPedestrianLight+0x90>)
 80010be:	f001 f82e 	bl	800211e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_PED_LIGHT2_GPIO_Port, D7_PED_LIGHT2_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c8:	480a      	ldr	r0, [pc, #40]	; (80010f4 <displayPedestrianLight+0x94>)
 80010ca:	f001 f828 	bl	800211e <HAL_GPIO_WritePin>
	default:
		HAL_GPIO_WritePin(D6_PED_LIGHT1_GPIO_Port, D6_PED_LIGHT1_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d4:	4806      	ldr	r0, [pc, #24]	; (80010f0 <displayPedestrianLight+0x90>)
 80010d6:	f001 f822 	bl	800211e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_PED_LIGHT2_GPIO_Port, D7_PED_LIGHT2_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e0:	4804      	ldr	r0, [pc, #16]	; (80010f4 <displayPedestrianLight+0x94>)
 80010e2:	f001 f81c 	bl	800211e <HAL_GPIO_WritePin>
		break;
 80010e6:	bf00      	nop
	}
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40010c00 	.word	0x40010c00
 80010f4:	40010800 	.word	0x40010800

080010f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010fc:	f000 fd04 	bl	8001b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001100:	f000 f824 	bl	800114c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001104:	f000 f934 	bl	8001370 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001108:	f000 f862 	bl	80011d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800110c:	f000 f8ac 	bl	8001268 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001110:	f000 f904 	bl	800131c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001114:	4809      	ldr	r0, [pc, #36]	; (800113c <main+0x44>)
 8001116:	f001 fc85 	bl	8002a24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800111a:	2100      	movs	r1, #0
 800111c:	4808      	ldr	r0, [pc, #32]	; (8001140 <main+0x48>)
 800111e:	f001 fd23 	bl	8002b68 <HAL_TIM_PWM_Start>
  buzzer_init(TIM3);
 8001122:	4808      	ldr	r0, [pc, #32]	; (8001144 <main+0x4c>)
 8001124:	f000 f9a6 	bl	8001474 <buzzer_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //setTimerTraffic1(10);
  state = IDLE;
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <main+0x50>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  trafficLight_automatic();
 800112e:	f7ff f969 	bl	8000404 <trafficLight_automatic>
	  trafficLight_manual();
 8001132:	f7ff fe27 	bl	8000d84 <trafficLight_manual>
	  trafficLight_change();
 8001136:	f7ff fbf9 	bl	800092c <trafficLight_change>
	  trafficLight_automatic();
 800113a:	e7f8      	b.n	800112e <main+0x36>
 800113c:	20000108 	.word	0x20000108
 8001140:	200000c0 	.word	0x200000c0
 8001144:	40000400 	.word	0x40000400
 8001148:	2000009c 	.word	0x2000009c

0800114c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b090      	sub	sp, #64	; 0x40
 8001150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001152:	f107 0318 	add.w	r3, r7, #24
 8001156:	2228      	movs	r2, #40	; 0x28
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f002 fc68 	bl	8003a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800116e:	2302      	movs	r3, #2
 8001170:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001172:	2301      	movs	r3, #1
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001176:	2310      	movs	r3, #16
 8001178:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117a:	2302      	movs	r3, #2
 800117c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800117e:	2300      	movs	r3, #0
 8001180:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001182:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001186:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001188:	f107 0318 	add.w	r3, r7, #24
 800118c:	4618      	mov	r0, r3
 800118e:	f000 ffdf 	bl	8002150 <HAL_RCC_OscConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001198:	f000 f966 	bl	8001468 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119c:	230f      	movs	r3, #15
 800119e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a0:	2302      	movs	r3, #2
 80011a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2102      	movs	r1, #2
 80011b6:	4618      	mov	r0, r3
 80011b8:	f001 fa4a 	bl	8002650 <HAL_RCC_ClockConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80011c2:	f000 f951 	bl	8001468 <Error_Handler>
  }
}
 80011c6:	bf00      	nop
 80011c8:	3740      	adds	r7, #64	; 0x40
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e4:	463b      	mov	r3, r7
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <MX_TIM2_Init+0x94>)
 80011ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <MX_TIM2_Init+0x94>)
 80011f6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80011fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <MX_TIM2_Init+0x94>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <MX_TIM2_Init+0x94>)
 8001204:	224f      	movs	r2, #79	; 0x4f
 8001206:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <MX_TIM2_Init+0x94>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <MX_TIM2_Init+0x94>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001214:	4813      	ldr	r0, [pc, #76]	; (8001264 <MX_TIM2_Init+0x94>)
 8001216:	f001 fbb5 	bl	8002984 <HAL_TIM_Base_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001220:	f000 f922 	bl	8001468 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001228:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	4619      	mov	r1, r3
 8001230:	480c      	ldr	r0, [pc, #48]	; (8001264 <MX_TIM2_Init+0x94>)
 8001232:	f001 ff01 	bl	8003038 <HAL_TIM_ConfigClockSource>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800123c:	f000 f914 	bl	8001468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001248:	463b      	mov	r3, r7
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	; (8001264 <MX_TIM2_Init+0x94>)
 800124e:	f002 fa7f 	bl	8003750 <HAL_TIMEx_MasterConfigSynchronization>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001258:	f000 f906 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000108 	.word	0x20000108

08001268 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]
 8001286:	615a      	str	r2, [r3, #20]
 8001288:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800128a:	4b22      	ldr	r3, [pc, #136]	; (8001314 <MX_TIM3_Init+0xac>)
 800128c:	4a22      	ldr	r2, [pc, #136]	; (8001318 <MX_TIM3_Init+0xb0>)
 800128e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001290:	4b20      	ldr	r3, [pc, #128]	; (8001314 <MX_TIM3_Init+0xac>)
 8001292:	223f      	movs	r2, #63	; 0x3f
 8001294:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001296:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <MX_TIM3_Init+0xac>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <MX_TIM3_Init+0xac>)
 800129e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a4:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <MX_TIM3_Init+0xac>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <MX_TIM3_Init+0xac>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012b0:	4818      	ldr	r0, [pc, #96]	; (8001314 <MX_TIM3_Init+0xac>)
 80012b2:	f001 fc09 	bl	8002ac8 <HAL_TIM_PWM_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80012bc:	f000 f8d4 	bl	8001468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c0:	2300      	movs	r3, #0
 80012c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012c8:	f107 0320 	add.w	r3, r7, #32
 80012cc:	4619      	mov	r1, r3
 80012ce:	4811      	ldr	r0, [pc, #68]	; (8001314 <MX_TIM3_Init+0xac>)
 80012d0:	f002 fa3e 	bl	8003750 <HAL_TIMEx_MasterConfigSynchronization>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80012da:	f000 f8c5 	bl	8001468 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012de:	2360      	movs	r3, #96	; 0x60
 80012e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	2200      	movs	r2, #0
 80012f2:	4619      	mov	r1, r3
 80012f4:	4807      	ldr	r0, [pc, #28]	; (8001314 <MX_TIM3_Init+0xac>)
 80012f6:	f001 fde1 	bl	8002ebc <HAL_TIM_PWM_ConfigChannel>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001300:	f000 f8b2 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001304:	4803      	ldr	r0, [pc, #12]	; (8001314 <MX_TIM3_Init+0xac>)
 8001306:	f000 fb25 	bl	8001954 <HAL_TIM_MspPostInit>

}
 800130a:	bf00      	nop
 800130c:	3728      	adds	r7, #40	; 0x28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200000c0 	.word	0x200000c0
 8001318:	40000400 	.word	0x40000400

0800131c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001322:	4a12      	ldr	r2, [pc, #72]	; (800136c <MX_USART2_UART_Init+0x50>)
 8001324:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001328:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800132c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001342:	220c      	movs	r2, #12
 8001344:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001354:	f002 fa6c 	bl	8003830 <HAL_UART_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800135e:	f000 f883 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000150 	.word	0x20000150
 800136c:	40004400 	.word	0x40004400

08001370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001384:	4b2e      	ldr	r3, [pc, #184]	; (8001440 <MX_GPIO_Init+0xd0>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a2d      	ldr	r2, [pc, #180]	; (8001440 <MX_GPIO_Init+0xd0>)
 800138a:	f043 0304 	orr.w	r3, r3, #4
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <MX_GPIO_Init+0xd0>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139c:	4b28      	ldr	r3, [pc, #160]	; (8001440 <MX_GPIO_Init+0xd0>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a27      	ldr	r2, [pc, #156]	; (8001440 <MX_GPIO_Init+0xd0>)
 80013a2:	f043 0308 	orr.w	r3, r3, #8
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b25      	ldr	r3, [pc, #148]	; (8001440 <MX_GPIO_Init+0xd0>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0308 	and.w	r3, r3, #8
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PED_LIGHT1_Pin|D3_GREEN_LED1_Pin|D5_GREEN_LED2_Pin|D4_RED_LED_2_Pin, GPIO_PIN_RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80013ba:	4822      	ldr	r0, [pc, #136]	; (8001444 <MX_GPIO_Init+0xd4>)
 80013bc:	f000 feaf 	bl	800211e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_PED_LIGHT2_Pin|D2_RED_LED1_Pin, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80013c6:	4820      	ldr	r0, [pc, #128]	; (8001448 <MX_GPIO_Init+0xd8>)
 80013c8:	f000 fea9 	bl	800211e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_BTN_PED_Pin A1_BTN_SELECT_Pin A2_BTN_MODIFY_Pin */
  GPIO_InitStruct.Pin = A0_BTN_PED_Pin|A1_BTN_SELECT_Pin|A2_BTN_MODIFY_Pin;
 80013cc:	2313      	movs	r3, #19
 80013ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	f107 0308 	add.w	r3, r7, #8
 80013dc:	4619      	mov	r1, r3
 80013de:	481a      	ldr	r0, [pc, #104]	; (8001448 <MX_GPIO_Init+0xd8>)
 80013e0:	f000 fd02 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_BTN_SET_Pin */
  GPIO_InitStruct.Pin = A3_BTN_SET_Pin;
 80013e4:	2301      	movs	r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_BTN_SET_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 0308 	add.w	r3, r7, #8
 80013f4:	4619      	mov	r1, r3
 80013f6:	4813      	ldr	r0, [pc, #76]	; (8001444 <MX_GPIO_Init+0xd4>)
 80013f8:	f000 fcf6 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PED_LIGHT1_Pin D3_GREEN_LED1_Pin D5_GREEN_LED2_Pin D4_RED_LED_2_Pin */
  GPIO_InitStruct.Pin = D6_PED_LIGHT1_Pin|D3_GREEN_LED1_Pin|D5_GREEN_LED2_Pin|D4_RED_LED_2_Pin;
 80013fc:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001400:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001402:	2301      	movs	r3, #1
 8001404:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2302      	movs	r3, #2
 800140c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140e:	f107 0308 	add.w	r3, r7, #8
 8001412:	4619      	mov	r1, r3
 8001414:	480b      	ldr	r0, [pc, #44]	; (8001444 <MX_GPIO_Init+0xd4>)
 8001416:	f000 fce7 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_PED_LIGHT2_Pin D2_RED_LED1_Pin */
  GPIO_InitStruct.Pin = D7_PED_LIGHT2_Pin|D2_RED_LED1_Pin;
 800141a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800141e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001420:	2301      	movs	r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2302      	movs	r3, #2
 800142a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142c:	f107 0308 	add.w	r3, r7, #8
 8001430:	4619      	mov	r1, r3
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_GPIO_Init+0xd8>)
 8001434:	f000 fcd8 	bl	8001de8 <HAL_GPIO_Init>

}
 8001438:	bf00      	nop
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40021000 	.word	0x40021000
 8001444:	40010c00 	.word	0x40010c00
 8001448:	40010800 	.word	0x40010800

0800144c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	buzzer_run();
 8001454:	f000 f854 	bl	8001500 <buzzer_run>
	readKeyInput();
 8001458:	f7fe fe78 	bl	800014c <readKeyInput>
	timer_run();
 800145c:	f000 f94c 	bl	80016f8 <timer_run>
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800146c:	b672      	cpsid	i
}
 800146e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001470:	e7fe      	b.n	8001470 <Error_Handler+0x8>
	...

08001474 <buzzer_init>:
int signal = 1;
uint8_t idx = 0;
uint16_t beep[3] = {1,1,1};
uint32_t scale = 0;

void buzzer_init(TIM_TypeDef *tim){
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	scale = tim->PSC;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001480:	4a04      	ldr	r2, [pc, #16]	; (8001494 <buzzer_init+0x20>)
 8001482:	6013      	str	r3, [r2, #0]
	setTimerBuzzer(10);
 8001484:	200a      	movs	r0, #10
 8001486:	f000 f91b 	bl	80016c0 <setTimerBuzzer>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000058 	.word	0x20000058

08001498 <buzzer_sound>:
		NOTE_B5,NOTE_B5,0,NOTE_B5, //4
		NOTE_CS6,NOTE_D6,0, NOTE_G5, //4
		NOTE_FS5, NOTE_F5, NOTE_D6 , NOTE_AS5, NOTE_B5, NOTE_B5//6
};

void buzzer_sound(TIM_HandleTypeDef htim ,int volume){
 8001498:	b084      	sub	sp, #16
 800149a:	b580      	push	{r7, lr}
 800149c:	af00      	add	r7, sp, #0
 800149e:	f107 0c08 	add.w	ip, r7, #8
 80014a2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		TIM_CCxChannelCmd(TIM3, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80014a6:	2201      	movs	r2, #1
 80014a8:	2100      	movs	r1, #0
 80014aa:	4812      	ldr	r0, [pc, #72]	; (80014f4 <buzzer_sound+0x5c>)
 80014ac:	f002 f92c 	bl	8003708 <TIM_CCxChannelCmd>
		__HAL_TIM_SET_COMPARE(&htim,TIM_CHANNEL_1,volume);
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80014b4:	635a      	str	r2, [r3, #52]	; 0x34
		// TIM3->PSC = 64000/dio[i%72];// melody[i%3];
		TIM3->PSC = (TIM3->PSC + 1)%63 + 20;// melody[i%3];
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <buzzer_sound+0x5c>)
 80014b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ba:	1c59      	adds	r1, r3, #1
 80014bc:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <buzzer_sound+0x60>)
 80014be:	fba3 2301 	umull	r2, r3, r3, r1
 80014c2:	1aca      	subs	r2, r1, r3
 80014c4:	0852      	lsrs	r2, r2, #1
 80014c6:	4413      	add	r3, r2
 80014c8:	095a      	lsrs	r2, r3, #5
 80014ca:	4613      	mov	r3, r2
 80014cc:	019b      	lsls	r3, r3, #6
 80014ce:	1a9b      	subs	r3, r3, r2
 80014d0:	1aca      	subs	r2, r1, r3
 80014d2:	4908      	ldr	r1, [pc, #32]	; (80014f4 <buzzer_sound+0x5c>)
 80014d4:	f102 0314 	add.w	r3, r2, #20
 80014d8:	628b      	str	r3, [r1, #40]	; 0x28
	idx++;
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <buzzer_sound+0x64>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	3301      	adds	r3, #1
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <buzzer_sound+0x64>)
 80014e4:	701a      	strb	r2, [r3, #0]
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014ee:	b004      	add	sp, #16
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40000400 	.word	0x40000400
 80014f8:	04104105 	.word	0x04104105
 80014fc:	20000054 	.word	0x20000054

08001500 <buzzer_run>:

void buzzer_run(){
 8001500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001502:	b091      	sub	sp, #68	; 0x44
 8001504:	af10      	add	r7, sp, #64	; 0x40
	if(buzzerTimer_flag == 1){
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <buzzer_run+0x60>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d123      	bne.n	8001556 <buzzer_run+0x56>
		if (buzzer_warning == 1) buzzer_sound(htim3, 40);
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <buzzer_run+0x64>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d113      	bne.n	800153e <buzzer_run+0x3e>
 8001516:	4e14      	ldr	r6, [pc, #80]	; (8001568 <buzzer_run+0x68>)
 8001518:	2328      	movs	r3, #40	; 0x28
 800151a:	930e      	str	r3, [sp, #56]	; 0x38
 800151c:	466d      	mov	r5, sp
 800151e:	f106 0410 	add.w	r4, r6, #16
 8001522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001524:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001528:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800152a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800152c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800152e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001532:	e885 0003 	stmia.w	r5, {r0, r1}
 8001536:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800153a:	f7ff ffad 	bl	8001498 <buzzer_sound>
		if (buzzer_warning == 0)
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <buzzer_run+0x64>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d104      	bne.n	8001550 <buzzer_run+0x50>
			TIM_CCxChannelCmd(TIM3, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8001546:	2200      	movs	r2, #0
 8001548:	2100      	movs	r1, #0
 800154a:	4808      	ldr	r0, [pc, #32]	; (800156c <buzzer_run+0x6c>)
 800154c:	f002 f8dc 	bl	8003708 <TIM_CCxChannelCmd>
		setTimerBuzzer(120);
 8001550:	2078      	movs	r0, #120	; 0x78
 8001552:	f000 f8b5 	bl	80016c0 <setTimerBuzzer>
	}
}
 8001556:	bf00      	nop
 8001558:	3704      	adds	r7, #4
 800155a:	46bd      	mov	sp, r7
 800155c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800155e:	bf00      	nop
 8001560:	200001d4 	.word	0x200001d4
 8001564:	20000050 	.word	0x20000050
 8001568:	200000c0 	.word	0x200000c0
 800156c:	40000400 	.word	0x40000400

08001570 <setTimerTraffic1>:
int countDownTimer1_counter;
int countDownTimer2_counter;
int scanFreqTimer_counter;
int buzzerTimer_counter;

void setTimerTraffic1(int duration){
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	trafficTimer1_counter = duration/TIMER_CYCLE;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a08      	ldr	r2, [pc, #32]	; (800159c <setTimerTraffic1+0x2c>)
 800157c:	fb82 1203 	smull	r1, r2, r2, r3
 8001580:	1092      	asrs	r2, r2, #2
 8001582:	17db      	asrs	r3, r3, #31
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <setTimerTraffic1+0x30>)
 8001588:	6013      	str	r3, [r2, #0]
	trafficTimer1_flag = 0;
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <setTimerTraffic1+0x34>)
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	66666667 	.word	0x66666667
 80015a0:	200001b4 	.word	0x200001b4
 80015a4:	200001d0 	.word	0x200001d0

080015a8 <setTimerWait>:
void setTimerTraffic2(int duration){
	trafficTimer2_counter = duration/TIMER_CYCLE;
	trafficTimer2_flag = 0;
}

void setTimerWait(int duration){
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	waitTimer_counter = duration/TIMER_CYCLE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a08      	ldr	r2, [pc, #32]	; (80015d4 <setTimerWait+0x2c>)
 80015b4:	fb82 1203 	smull	r1, r2, r2, r3
 80015b8:	1092      	asrs	r2, r2, #2
 80015ba:	17db      	asrs	r3, r3, #31
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	4a06      	ldr	r2, [pc, #24]	; (80015d8 <setTimerWait+0x30>)
 80015c0:	6013      	str	r3, [r2, #0]
	waitTimer_flag = 0;
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <setTimerWait+0x34>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	66666667 	.word	0x66666667
 80015d8:	200001a8 	.word	0x200001a8
 80015dc:	200001c4 	.word	0x200001c4

080015e0 <setTimerModify>:

void setTimerModify(int duration){
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	modifyTimer_counter = duration/TIMER_CYCLE;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a08      	ldr	r2, [pc, #32]	; (800160c <setTimerModify+0x2c>)
 80015ec:	fb82 1203 	smull	r1, r2, r2, r3
 80015f0:	1092      	asrs	r2, r2, #2
 80015f2:	17db      	asrs	r3, r3, #31
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	4a06      	ldr	r2, [pc, #24]	; (8001610 <setTimerModify+0x30>)
 80015f8:	6013      	str	r3, [r2, #0]
	modifyTimer_flag = 0;
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <setTimerModify+0x34>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	66666667 	.word	0x66666667
 8001610:	200001d8 	.word	0x200001d8
 8001614:	200001b8 	.word	0x200001b8

08001618 <setTimerTriggerLed>:

void setTimerTriggerLed(int duration){
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	timerLed_counter = duration/TIMER_CYCLE;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a08      	ldr	r2, [pc, #32]	; (8001644 <setTimerTriggerLed+0x2c>)
 8001624:	fb82 1203 	smull	r1, r2, r2, r3
 8001628:	1092      	asrs	r2, r2, #2
 800162a:	17db      	asrs	r3, r3, #31
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	4a06      	ldr	r2, [pc, #24]	; (8001648 <setTimerTriggerLed+0x30>)
 8001630:	6013      	str	r3, [r2, #0]
	timerLed_flag = 0;
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <setTimerTriggerLed+0x34>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	66666667 	.word	0x66666667
 8001648:	200001a0 	.word	0x200001a0
 800164c:	200001ac 	.word	0x200001ac

08001650 <setTimerCounter1>:

void setTimerCounter1(int duration){
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	countDownTimer1_counter = duration/TIMER_CYCLE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a08      	ldr	r2, [pc, #32]	; (800167c <setTimerCounter1+0x2c>)
 800165c:	fb82 1203 	smull	r1, r2, r2, r3
 8001660:	1092      	asrs	r2, r2, #2
 8001662:	17db      	asrs	r3, r3, #31
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	4a06      	ldr	r2, [pc, #24]	; (8001680 <setTimerCounter1+0x30>)
 8001668:	6013      	str	r3, [r2, #0]
	countDownTimer1_flag = 0;
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <setTimerCounter1+0x34>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	66666667 	.word	0x66666667
 8001680:	2000019c 	.word	0x2000019c
 8001684:	20000198 	.word	0x20000198

08001688 <setTimerScanFreq>:
void setTimerCounter2(int duration){
	countDownTimer2_counter = duration/TIMER_CYCLE;
	countDownTimer2_flag = 0;
}

void setTimerScanFreq(int duration){
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	scanFreqTimer_counter = duration/TIMER_CYCLE;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a08      	ldr	r2, [pc, #32]	; (80016b4 <setTimerScanFreq+0x2c>)
 8001694:	fb82 1203 	smull	r1, r2, r2, r3
 8001698:	1092      	asrs	r2, r2, #2
 800169a:	17db      	asrs	r3, r3, #31
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	4a06      	ldr	r2, [pc, #24]	; (80016b8 <setTimerScanFreq+0x30>)
 80016a0:	6013      	str	r3, [r2, #0]
	scanFreqTimer_flag = 0;
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <setTimerScanFreq+0x34>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	66666667 	.word	0x66666667
 80016b8:	200001c8 	.word	0x200001c8
 80016bc:	200001c0 	.word	0x200001c0

080016c0 <setTimerBuzzer>:

void setTimerBuzzer(int duration){
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	buzzerTimer_counter = duration/TIMER_CYCLE;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a08      	ldr	r2, [pc, #32]	; (80016ec <setTimerBuzzer+0x2c>)
 80016cc:	fb82 1203 	smull	r1, r2, r2, r3
 80016d0:	1092      	asrs	r2, r2, #2
 80016d2:	17db      	asrs	r3, r3, #31
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	4a06      	ldr	r2, [pc, #24]	; (80016f0 <setTimerBuzzer+0x30>)
 80016d8:	6013      	str	r3, [r2, #0]
	buzzerTimer_flag = 0;
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <setTimerBuzzer+0x34>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	66666667 	.word	0x66666667
 80016f0:	200001cc 	.word	0x200001cc
 80016f4:	200001d4 	.word	0x200001d4

080016f8 <timer_run>:

void timer_run(){
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
	if(trafficTimer1_counter >= 0){
 80016fc:	4b49      	ldr	r3, [pc, #292]	; (8001824 <timer_run+0x12c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	db0b      	blt.n	800171c <timer_run+0x24>
		trafficTimer1_counter --;
 8001704:	4b47      	ldr	r3, [pc, #284]	; (8001824 <timer_run+0x12c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	3b01      	subs	r3, #1
 800170a:	4a46      	ldr	r2, [pc, #280]	; (8001824 <timer_run+0x12c>)
 800170c:	6013      	str	r3, [r2, #0]
		if(trafficTimer1_counter == 0) trafficTimer1_flag = 1;
 800170e:	4b45      	ldr	r3, [pc, #276]	; (8001824 <timer_run+0x12c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d102      	bne.n	800171c <timer_run+0x24>
 8001716:	4b44      	ldr	r3, [pc, #272]	; (8001828 <timer_run+0x130>)
 8001718:	2201      	movs	r2, #1
 800171a:	601a      	str	r2, [r3, #0]
	}
	if(trafficTimer2_counter >= 0){
 800171c:	4b43      	ldr	r3, [pc, #268]	; (800182c <timer_run+0x134>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	db0b      	blt.n	800173c <timer_run+0x44>
		trafficTimer2_counter --;
 8001724:	4b41      	ldr	r3, [pc, #260]	; (800182c <timer_run+0x134>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	3b01      	subs	r3, #1
 800172a:	4a40      	ldr	r2, [pc, #256]	; (800182c <timer_run+0x134>)
 800172c:	6013      	str	r3, [r2, #0]
		if(trafficTimer2_counter == 0) trafficTimer2_flag = 1;
 800172e:	4b3f      	ldr	r3, [pc, #252]	; (800182c <timer_run+0x134>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d102      	bne.n	800173c <timer_run+0x44>
 8001736:	4b3e      	ldr	r3, [pc, #248]	; (8001830 <timer_run+0x138>)
 8001738:	2201      	movs	r2, #1
 800173a:	601a      	str	r2, [r3, #0]
	}
	if(waitTimer_counter >= 0){
 800173c:	4b3d      	ldr	r3, [pc, #244]	; (8001834 <timer_run+0x13c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	db0b      	blt.n	800175c <timer_run+0x64>
		waitTimer_counter --;
 8001744:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <timer_run+0x13c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	3b01      	subs	r3, #1
 800174a:	4a3a      	ldr	r2, [pc, #232]	; (8001834 <timer_run+0x13c>)
 800174c:	6013      	str	r3, [r2, #0]
		if(waitTimer_counter == 0) waitTimer_flag = 1;
 800174e:	4b39      	ldr	r3, [pc, #228]	; (8001834 <timer_run+0x13c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d102      	bne.n	800175c <timer_run+0x64>
 8001756:	4b38      	ldr	r3, [pc, #224]	; (8001838 <timer_run+0x140>)
 8001758:	2201      	movs	r2, #1
 800175a:	601a      	str	r2, [r3, #0]
	}
	if(modifyTimer_counter >= 0){
 800175c:	4b37      	ldr	r3, [pc, #220]	; (800183c <timer_run+0x144>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	db0b      	blt.n	800177c <timer_run+0x84>
		modifyTimer_counter --;
 8001764:	4b35      	ldr	r3, [pc, #212]	; (800183c <timer_run+0x144>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	3b01      	subs	r3, #1
 800176a:	4a34      	ldr	r2, [pc, #208]	; (800183c <timer_run+0x144>)
 800176c:	6013      	str	r3, [r2, #0]
		if(modifyTimer_counter == 0) modifyTimer_flag = 1;
 800176e:	4b33      	ldr	r3, [pc, #204]	; (800183c <timer_run+0x144>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d102      	bne.n	800177c <timer_run+0x84>
 8001776:	4b32      	ldr	r3, [pc, #200]	; (8001840 <timer_run+0x148>)
 8001778:	2201      	movs	r2, #1
 800177a:	601a      	str	r2, [r3, #0]
	}
	if(timerLed_counter >= 0){
 800177c:	4b31      	ldr	r3, [pc, #196]	; (8001844 <timer_run+0x14c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db0b      	blt.n	800179c <timer_run+0xa4>
		timerLed_counter --;
 8001784:	4b2f      	ldr	r3, [pc, #188]	; (8001844 <timer_run+0x14c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3b01      	subs	r3, #1
 800178a:	4a2e      	ldr	r2, [pc, #184]	; (8001844 <timer_run+0x14c>)
 800178c:	6013      	str	r3, [r2, #0]
		if(timerLed_counter == 0) timerLed_flag = 1;
 800178e:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <timer_run+0x14c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d102      	bne.n	800179c <timer_run+0xa4>
 8001796:	4b2c      	ldr	r3, [pc, #176]	; (8001848 <timer_run+0x150>)
 8001798:	2201      	movs	r2, #1
 800179a:	601a      	str	r2, [r3, #0]
	}
	if(countDownTimer1_counter >= 0){
 800179c:	4b2b      	ldr	r3, [pc, #172]	; (800184c <timer_run+0x154>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	db0b      	blt.n	80017bc <timer_run+0xc4>
		countDownTimer1_counter --;
 80017a4:	4b29      	ldr	r3, [pc, #164]	; (800184c <timer_run+0x154>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	4a28      	ldr	r2, [pc, #160]	; (800184c <timer_run+0x154>)
 80017ac:	6013      	str	r3, [r2, #0]
		if(countDownTimer1_counter == 0) countDownTimer1_flag = 1;
 80017ae:	4b27      	ldr	r3, [pc, #156]	; (800184c <timer_run+0x154>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d102      	bne.n	80017bc <timer_run+0xc4>
 80017b6:	4b26      	ldr	r3, [pc, #152]	; (8001850 <timer_run+0x158>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	601a      	str	r2, [r3, #0]
	}
	if(countDownTimer2_counter >= 0){
 80017bc:	4b25      	ldr	r3, [pc, #148]	; (8001854 <timer_run+0x15c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	db0b      	blt.n	80017dc <timer_run+0xe4>
		countDownTimer2_counter --;
 80017c4:	4b23      	ldr	r3, [pc, #140]	; (8001854 <timer_run+0x15c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	4a22      	ldr	r2, [pc, #136]	; (8001854 <timer_run+0x15c>)
 80017cc:	6013      	str	r3, [r2, #0]
		if(countDownTimer2_counter == 0) countDownTimer2_flag = 1;
 80017ce:	4b21      	ldr	r3, [pc, #132]	; (8001854 <timer_run+0x15c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d102      	bne.n	80017dc <timer_run+0xe4>
 80017d6:	4b20      	ldr	r3, [pc, #128]	; (8001858 <timer_run+0x160>)
 80017d8:	2201      	movs	r2, #1
 80017da:	601a      	str	r2, [r3, #0]
	}
	if(scanFreqTimer_counter >= 0){
 80017dc:	4b1f      	ldr	r3, [pc, #124]	; (800185c <timer_run+0x164>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	db0b      	blt.n	80017fc <timer_run+0x104>
		scanFreqTimer_counter --;
 80017e4:	4b1d      	ldr	r3, [pc, #116]	; (800185c <timer_run+0x164>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	3b01      	subs	r3, #1
 80017ea:	4a1c      	ldr	r2, [pc, #112]	; (800185c <timer_run+0x164>)
 80017ec:	6013      	str	r3, [r2, #0]
		if(scanFreqTimer_counter == 0) scanFreqTimer_flag = 1;
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <timer_run+0x164>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d102      	bne.n	80017fc <timer_run+0x104>
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <timer_run+0x168>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	601a      	str	r2, [r3, #0]
	}
	if(buzzerTimer_counter >= 0){
 80017fc:	4b19      	ldr	r3, [pc, #100]	; (8001864 <timer_run+0x16c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	db0b      	blt.n	800181c <timer_run+0x124>
		buzzerTimer_counter --;
 8001804:	4b17      	ldr	r3, [pc, #92]	; (8001864 <timer_run+0x16c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	3b01      	subs	r3, #1
 800180a:	4a16      	ldr	r2, [pc, #88]	; (8001864 <timer_run+0x16c>)
 800180c:	6013      	str	r3, [r2, #0]
			if(buzzerTimer_counter == 0) buzzerTimer_flag = 1;
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <timer_run+0x16c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d102      	bne.n	800181c <timer_run+0x124>
 8001816:	4b14      	ldr	r3, [pc, #80]	; (8001868 <timer_run+0x170>)
 8001818:	2201      	movs	r2, #1
 800181a:	601a      	str	r2, [r3, #0]
		}
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	200001b4 	.word	0x200001b4
 8001828:	200001d0 	.word	0x200001d0
 800182c:	200001a4 	.word	0x200001a4
 8001830:	20000194 	.word	0x20000194
 8001834:	200001a8 	.word	0x200001a8
 8001838:	200001c4 	.word	0x200001c4
 800183c:	200001d8 	.word	0x200001d8
 8001840:	200001b8 	.word	0x200001b8
 8001844:	200001a0 	.word	0x200001a0
 8001848:	200001ac 	.word	0x200001ac
 800184c:	2000019c 	.word	0x2000019c
 8001850:	20000198 	.word	0x20000198
 8001854:	200001bc 	.word	0x200001bc
 8001858:	200001b0 	.word	0x200001b0
 800185c:	200001c8 	.word	0x200001c8
 8001860:	200001c0 	.word	0x200001c0
 8001864:	200001cc 	.word	0x200001cc
 8001868:	200001d4 	.word	0x200001d4

0800186c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_MspInit+0x5c>)
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	4a14      	ldr	r2, [pc, #80]	; (80018c8 <HAL_MspInit+0x5c>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6193      	str	r3, [r2, #24]
 800187e:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_MspInit+0x5c>)
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <HAL_MspInit+0x5c>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	4a0e      	ldr	r2, [pc, #56]	; (80018c8 <HAL_MspInit+0x5c>)
 8001890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001894:	61d3      	str	r3, [r2, #28]
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <HAL_MspInit+0x5c>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018a2:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <HAL_MspInit+0x60>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	4a04      	ldr	r2, [pc, #16]	; (80018cc <HAL_MspInit+0x60>)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018be:	bf00      	nop
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40010000 	.word	0x40010000

080018d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018e0:	d113      	bne.n	800190a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <HAL_TIM_Base_MspInit+0x44>)
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	4a0b      	ldr	r2, [pc, #44]	; (8001914 <HAL_TIM_Base_MspInit+0x44>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	61d3      	str	r3, [r2, #28]
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_TIM_Base_MspInit+0x44>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2100      	movs	r1, #0
 80018fe:	201c      	movs	r0, #28
 8001900:	f000 fa3b 	bl	8001d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001904:	201c      	movs	r0, #28
 8001906:	f000 fa54 	bl	8001db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800190a:	bf00      	nop
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000

08001918 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a09      	ldr	r2, [pc, #36]	; (800194c <HAL_TIM_PWM_MspInit+0x34>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d10b      	bne.n	8001942 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_TIM_PWM_MspInit+0x38>)
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	4a08      	ldr	r2, [pc, #32]	; (8001950 <HAL_TIM_PWM_MspInit+0x38>)
 8001930:	f043 0302 	orr.w	r3, r3, #2
 8001934:	61d3      	str	r3, [r2, #28]
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_TIM_PWM_MspInit+0x38>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001942:	bf00      	nop
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	40000400 	.word	0x40000400
 8001950:	40021000 	.word	0x40021000

08001954 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0310 	add.w	r3, r7, #16
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a0f      	ldr	r2, [pc, #60]	; (80019ac <HAL_TIM_MspPostInit+0x58>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d117      	bne.n	80019a4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001974:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <HAL_TIM_MspPostInit+0x5c>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	4a0d      	ldr	r2, [pc, #52]	; (80019b0 <HAL_TIM_MspPostInit+0x5c>)
 800197a:	f043 0304 	orr.w	r3, r3, #4
 800197e:	6193      	str	r3, [r2, #24]
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <HAL_TIM_MspPostInit+0x5c>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800198c:	2340      	movs	r3, #64	; 0x40
 800198e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001994:	2302      	movs	r3, #2
 8001996:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	f107 0310 	add.w	r3, r7, #16
 800199c:	4619      	mov	r1, r3
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <HAL_TIM_MspPostInit+0x60>)
 80019a0:	f000 fa22 	bl	8001de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019a4:	bf00      	nop
 80019a6:	3720      	adds	r7, #32
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40000400 	.word	0x40000400
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40010800 	.word	0x40010800

080019b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 0310 	add.w	r3, r7, #16
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a1b      	ldr	r2, [pc, #108]	; (8001a40 <HAL_UART_MspInit+0x88>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d12f      	bne.n	8001a38 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019d8:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <HAL_UART_MspInit+0x8c>)
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	4a19      	ldr	r2, [pc, #100]	; (8001a44 <HAL_UART_MspInit+0x8c>)
 80019de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e2:	61d3      	str	r3, [r2, #28]
 80019e4:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <HAL_UART_MspInit+0x8c>)
 80019e6:	69db      	ldr	r3, [r3, #28]
 80019e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <HAL_UART_MspInit+0x8c>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	4a13      	ldr	r2, [pc, #76]	; (8001a44 <HAL_UART_MspInit+0x8c>)
 80019f6:	f043 0304 	orr.w	r3, r3, #4
 80019fa:	6193      	str	r3, [r2, #24]
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_UART_MspInit+0x8c>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a08:	2304      	movs	r3, #4
 8001a0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a10:	2303      	movs	r3, #3
 8001a12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	4619      	mov	r1, r3
 8001a1a:	480b      	ldr	r0, [pc, #44]	; (8001a48 <HAL_UART_MspInit+0x90>)
 8001a1c:	f000 f9e4 	bl	8001de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a20:	2308      	movs	r3, #8
 8001a22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2c:	f107 0310 	add.w	r3, r7, #16
 8001a30:	4619      	mov	r1, r3
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <HAL_UART_MspInit+0x90>)
 8001a34:	f000 f9d8 	bl	8001de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a38:	bf00      	nop
 8001a3a:	3720      	adds	r7, #32
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40004400 	.word	0x40004400
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40010800 	.word	0x40010800

08001a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <NMI_Handler+0x4>

08001a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a56:	e7fe      	b.n	8001a56 <HardFault_Handler+0x4>

08001a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <MemManage_Handler+0x4>

08001a5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <BusFault_Handler+0x4>

08001a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <UsageFault_Handler+0x4>

08001a6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr

08001a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr

08001a8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a92:	f000 f87f 	bl	8001b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001aa0:	4802      	ldr	r0, [pc, #8]	; (8001aac <TIM2_IRQHandler+0x10>)
 8001aa2:	f001 f903 	bl	8002cac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000108 	.word	0x20000108

08001ab0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001abc:	480c      	ldr	r0, [pc, #48]	; (8001af0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001abe:	490d      	ldr	r1, [pc, #52]	; (8001af4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ac0:	4a0d      	ldr	r2, [pc, #52]	; (8001af8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac4:	e002      	b.n	8001acc <LoopCopyDataInit>

08001ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aca:	3304      	adds	r3, #4

08001acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad0:	d3f9      	bcc.n	8001ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ad4:	4c0a      	ldr	r4, [pc, #40]	; (8001b00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad8:	e001      	b.n	8001ade <LoopFillZerobss>

08001ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001adc:	3204      	adds	r2, #4

08001ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae0:	d3fb      	bcc.n	8001ada <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ae2:	f7ff ffe5 	bl	8001ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ae6:	f001 ff7f 	bl	80039e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aea:	f7ff fb05 	bl	80010f8 <main>
  bx lr
 8001aee:	4770      	bx	lr
  ldr r0, =_sdata
 8001af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001af8:	08003a88 	.word	0x08003a88
  ldr r2, =_sbss
 8001afc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001b00:	200001e0 	.word	0x200001e0

08001b04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b04:	e7fe      	b.n	8001b04 <ADC1_2_IRQHandler>
	...

08001b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <HAL_Init+0x28>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a07      	ldr	r2, [pc, #28]	; (8001b30 <HAL_Init+0x28>)
 8001b12:	f043 0310 	orr.w	r3, r3, #16
 8001b16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b18:	2003      	movs	r0, #3
 8001b1a:	f000 f923 	bl	8001d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b1e:	200f      	movs	r0, #15
 8001b20:	f000 f808 	bl	8001b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b24:	f7ff fea2 	bl	800186c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40022000 	.word	0x40022000

08001b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_InitTick+0x54>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_InitTick+0x58>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	4619      	mov	r1, r3
 8001b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 f93b 	bl	8001dce <HAL_SYSTICK_Config>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e00e      	b.n	8001b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b0f      	cmp	r3, #15
 8001b66:	d80a      	bhi.n	8001b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b70:	f000 f903 	bl	8001d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b74:	4a06      	ldr	r2, [pc, #24]	; (8001b90 <HAL_InitTick+0x5c>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e000      	b.n	8001b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	2000000c 	.word	0x2000000c
 8001b8c:	20000014 	.word	0x20000014
 8001b90:	20000010 	.word	0x20000010

08001b94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <HAL_IncTick+0x1c>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <HAL_IncTick+0x20>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4a03      	ldr	r2, [pc, #12]	; (8001bb4 <HAL_IncTick+0x20>)
 8001ba6:	6013      	str	r3, [r2, #0]
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr
 8001bb0:	20000014 	.word	0x20000014
 8001bb4:	200001dc 	.word	0x200001dc

08001bb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return uwTick;
 8001bbc:	4b02      	ldr	r3, [pc, #8]	; (8001bc8 <HAL_GetTick+0x10>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	200001dc 	.word	0x200001dc

08001bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <__NVIC_SetPriorityGrouping+0x44>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be8:	4013      	ands	r3, r2
 8001bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfe:	4a04      	ldr	r2, [pc, #16]	; (8001c10 <__NVIC_SetPriorityGrouping+0x44>)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	60d3      	str	r3, [r2, #12]
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c18:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <__NVIC_GetPriorityGrouping+0x18>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	f003 0307 	and.w	r3, r3, #7
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	db0b      	blt.n	8001c5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	f003 021f 	and.w	r2, r3, #31
 8001c48:	4906      	ldr	r1, [pc, #24]	; (8001c64 <__NVIC_EnableIRQ+0x34>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	095b      	lsrs	r3, r3, #5
 8001c50:	2001      	movs	r0, #1
 8001c52:	fa00 f202 	lsl.w	r2, r0, r2
 8001c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	e000e100 	.word	0xe000e100

08001c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	6039      	str	r1, [r7, #0]
 8001c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	db0a      	blt.n	8001c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	490c      	ldr	r1, [pc, #48]	; (8001cb4 <__NVIC_SetPriority+0x4c>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	0112      	lsls	r2, r2, #4
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c90:	e00a      	b.n	8001ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4908      	ldr	r1, [pc, #32]	; (8001cb8 <__NVIC_SetPriority+0x50>)
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	3b04      	subs	r3, #4
 8001ca0:	0112      	lsls	r2, r2, #4
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	761a      	strb	r2, [r3, #24]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000e100 	.word	0xe000e100
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f1c3 0307 	rsb	r3, r3, #7
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	bf28      	it	cs
 8001cda:	2304      	movcs	r3, #4
 8001cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	2b06      	cmp	r3, #6
 8001ce4:	d902      	bls.n	8001cec <NVIC_EncodePriority+0x30>
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3b03      	subs	r3, #3
 8001cea:	e000      	b.n	8001cee <NVIC_EncodePriority+0x32>
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	401a      	ands	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d04:	f04f 31ff 	mov.w	r1, #4294967295
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	43d9      	mvns	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	4313      	orrs	r3, r2
         );
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3724      	adds	r7, #36	; 0x24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d30:	d301      	bcc.n	8001d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d32:	2301      	movs	r3, #1
 8001d34:	e00f      	b.n	8001d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d36:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <SysTick_Config+0x40>)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d3e:	210f      	movs	r1, #15
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295
 8001d44:	f7ff ff90 	bl	8001c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <SysTick_Config+0x40>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4e:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <SysTick_Config+0x40>)
 8001d50:	2207      	movs	r2, #7
 8001d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	e000e010 	.word	0xe000e010

08001d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ff2d 	bl	8001bcc <__NVIC_SetPriorityGrouping>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b086      	sub	sp, #24
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d8c:	f7ff ff42 	bl	8001c14 <__NVIC_GetPriorityGrouping>
 8001d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	68b9      	ldr	r1, [r7, #8]
 8001d96:	6978      	ldr	r0, [r7, #20]
 8001d98:	f7ff ff90 	bl	8001cbc <NVIC_EncodePriority>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff5f 	bl	8001c68 <__NVIC_SetPriority>
}
 8001daa:	bf00      	nop
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4603      	mov	r3, r0
 8001dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff35 	bl	8001c30 <__NVIC_EnableIRQ>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff ffa2 	bl	8001d20 <SysTick_Config>
 8001ddc:	4603      	mov	r3, r0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b08b      	sub	sp, #44	; 0x2c
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001df2:	2300      	movs	r3, #0
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001df6:	2300      	movs	r3, #0
 8001df8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dfa:	e169      	b.n	80020d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	69fa      	ldr	r2, [r7, #28]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	f040 8158 	bne.w	80020ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	4a9a      	ldr	r2, [pc, #616]	; (8002088 <HAL_GPIO_Init+0x2a0>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d05e      	beq.n	8001ee2 <HAL_GPIO_Init+0xfa>
 8001e24:	4a98      	ldr	r2, [pc, #608]	; (8002088 <HAL_GPIO_Init+0x2a0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d875      	bhi.n	8001f16 <HAL_GPIO_Init+0x12e>
 8001e2a:	4a98      	ldr	r2, [pc, #608]	; (800208c <HAL_GPIO_Init+0x2a4>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d058      	beq.n	8001ee2 <HAL_GPIO_Init+0xfa>
 8001e30:	4a96      	ldr	r2, [pc, #600]	; (800208c <HAL_GPIO_Init+0x2a4>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d86f      	bhi.n	8001f16 <HAL_GPIO_Init+0x12e>
 8001e36:	4a96      	ldr	r2, [pc, #600]	; (8002090 <HAL_GPIO_Init+0x2a8>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d052      	beq.n	8001ee2 <HAL_GPIO_Init+0xfa>
 8001e3c:	4a94      	ldr	r2, [pc, #592]	; (8002090 <HAL_GPIO_Init+0x2a8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d869      	bhi.n	8001f16 <HAL_GPIO_Init+0x12e>
 8001e42:	4a94      	ldr	r2, [pc, #592]	; (8002094 <HAL_GPIO_Init+0x2ac>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d04c      	beq.n	8001ee2 <HAL_GPIO_Init+0xfa>
 8001e48:	4a92      	ldr	r2, [pc, #584]	; (8002094 <HAL_GPIO_Init+0x2ac>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d863      	bhi.n	8001f16 <HAL_GPIO_Init+0x12e>
 8001e4e:	4a92      	ldr	r2, [pc, #584]	; (8002098 <HAL_GPIO_Init+0x2b0>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d046      	beq.n	8001ee2 <HAL_GPIO_Init+0xfa>
 8001e54:	4a90      	ldr	r2, [pc, #576]	; (8002098 <HAL_GPIO_Init+0x2b0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d85d      	bhi.n	8001f16 <HAL_GPIO_Init+0x12e>
 8001e5a:	2b12      	cmp	r3, #18
 8001e5c:	d82a      	bhi.n	8001eb4 <HAL_GPIO_Init+0xcc>
 8001e5e:	2b12      	cmp	r3, #18
 8001e60:	d859      	bhi.n	8001f16 <HAL_GPIO_Init+0x12e>
 8001e62:	a201      	add	r2, pc, #4	; (adr r2, 8001e68 <HAL_GPIO_Init+0x80>)
 8001e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e68:	08001ee3 	.word	0x08001ee3
 8001e6c:	08001ebd 	.word	0x08001ebd
 8001e70:	08001ecf 	.word	0x08001ecf
 8001e74:	08001f11 	.word	0x08001f11
 8001e78:	08001f17 	.word	0x08001f17
 8001e7c:	08001f17 	.word	0x08001f17
 8001e80:	08001f17 	.word	0x08001f17
 8001e84:	08001f17 	.word	0x08001f17
 8001e88:	08001f17 	.word	0x08001f17
 8001e8c:	08001f17 	.word	0x08001f17
 8001e90:	08001f17 	.word	0x08001f17
 8001e94:	08001f17 	.word	0x08001f17
 8001e98:	08001f17 	.word	0x08001f17
 8001e9c:	08001f17 	.word	0x08001f17
 8001ea0:	08001f17 	.word	0x08001f17
 8001ea4:	08001f17 	.word	0x08001f17
 8001ea8:	08001f17 	.word	0x08001f17
 8001eac:	08001ec5 	.word	0x08001ec5
 8001eb0:	08001ed9 	.word	0x08001ed9
 8001eb4:	4a79      	ldr	r2, [pc, #484]	; (800209c <HAL_GPIO_Init+0x2b4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d013      	beq.n	8001ee2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eba:	e02c      	b.n	8001f16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	623b      	str	r3, [r7, #32]
          break;
 8001ec2:	e029      	b.n	8001f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	3304      	adds	r3, #4
 8001eca:	623b      	str	r3, [r7, #32]
          break;
 8001ecc:	e024      	b.n	8001f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	3308      	adds	r3, #8
 8001ed4:	623b      	str	r3, [r7, #32]
          break;
 8001ed6:	e01f      	b.n	8001f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	330c      	adds	r3, #12
 8001ede:	623b      	str	r3, [r7, #32]
          break;
 8001ee0:	e01a      	b.n	8001f18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d102      	bne.n	8001ef0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eea:	2304      	movs	r3, #4
 8001eec:	623b      	str	r3, [r7, #32]
          break;
 8001eee:	e013      	b.n	8001f18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d105      	bne.n	8001f04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ef8:	2308      	movs	r3, #8
 8001efa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69fa      	ldr	r2, [r7, #28]
 8001f00:	611a      	str	r2, [r3, #16]
          break;
 8001f02:	e009      	b.n	8001f18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f04:	2308      	movs	r3, #8
 8001f06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69fa      	ldr	r2, [r7, #28]
 8001f0c:	615a      	str	r2, [r3, #20]
          break;
 8001f0e:	e003      	b.n	8001f18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f10:	2300      	movs	r3, #0
 8001f12:	623b      	str	r3, [r7, #32]
          break;
 8001f14:	e000      	b.n	8001f18 <HAL_GPIO_Init+0x130>
          break;
 8001f16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	2bff      	cmp	r3, #255	; 0xff
 8001f1c:	d801      	bhi.n	8001f22 <HAL_GPIO_Init+0x13a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	e001      	b.n	8001f26 <HAL_GPIO_Init+0x13e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3304      	adds	r3, #4
 8001f26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	2bff      	cmp	r3, #255	; 0xff
 8001f2c:	d802      	bhi.n	8001f34 <HAL_GPIO_Init+0x14c>
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	e002      	b.n	8001f3a <HAL_GPIO_Init+0x152>
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	3b08      	subs	r3, #8
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	210f      	movs	r1, #15
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	fa01 f303 	lsl.w	r3, r1, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	6a39      	ldr	r1, [r7, #32]
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	fa01 f303 	lsl.w	r3, r1, r3
 8001f54:	431a      	orrs	r2, r3
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 80b1 	beq.w	80020ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f68:	4b4d      	ldr	r3, [pc, #308]	; (80020a0 <HAL_GPIO_Init+0x2b8>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	4a4c      	ldr	r2, [pc, #304]	; (80020a0 <HAL_GPIO_Init+0x2b8>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	6193      	str	r3, [r2, #24]
 8001f74:	4b4a      	ldr	r3, [pc, #296]	; (80020a0 <HAL_GPIO_Init+0x2b8>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f80:	4a48      	ldr	r2, [pc, #288]	; (80020a4 <HAL_GPIO_Init+0x2bc>)
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	089b      	lsrs	r3, r3, #2
 8001f86:	3302      	adds	r3, #2
 8001f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	220f      	movs	r2, #15
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a40      	ldr	r2, [pc, #256]	; (80020a8 <HAL_GPIO_Init+0x2c0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d013      	beq.n	8001fd4 <HAL_GPIO_Init+0x1ec>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a3f      	ldr	r2, [pc, #252]	; (80020ac <HAL_GPIO_Init+0x2c4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d00d      	beq.n	8001fd0 <HAL_GPIO_Init+0x1e8>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a3e      	ldr	r2, [pc, #248]	; (80020b0 <HAL_GPIO_Init+0x2c8>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d007      	beq.n	8001fcc <HAL_GPIO_Init+0x1e4>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a3d      	ldr	r2, [pc, #244]	; (80020b4 <HAL_GPIO_Init+0x2cc>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d101      	bne.n	8001fc8 <HAL_GPIO_Init+0x1e0>
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e006      	b.n	8001fd6 <HAL_GPIO_Init+0x1ee>
 8001fc8:	2304      	movs	r3, #4
 8001fca:	e004      	b.n	8001fd6 <HAL_GPIO_Init+0x1ee>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e002      	b.n	8001fd6 <HAL_GPIO_Init+0x1ee>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <HAL_GPIO_Init+0x1ee>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd8:	f002 0203 	and.w	r2, r2, #3
 8001fdc:	0092      	lsls	r2, r2, #2
 8001fde:	4093      	lsls	r3, r2
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fe6:	492f      	ldr	r1, [pc, #188]	; (80020a4 <HAL_GPIO_Init+0x2bc>)
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	3302      	adds	r3, #2
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d006      	beq.n	800200e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002000:	4b2d      	ldr	r3, [pc, #180]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	492c      	ldr	r1, [pc, #176]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	600b      	str	r3, [r1, #0]
 800200c:	e006      	b.n	800201c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800200e:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	43db      	mvns	r3, r3
 8002016:	4928      	ldr	r1, [pc, #160]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002018:	4013      	ands	r3, r2
 800201a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d006      	beq.n	8002036 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002028:	4b23      	ldr	r3, [pc, #140]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	4922      	ldr	r1, [pc, #136]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	4313      	orrs	r3, r2
 8002032:	604b      	str	r3, [r1, #4]
 8002034:	e006      	b.n	8002044 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002036:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	43db      	mvns	r3, r3
 800203e:	491e      	ldr	r1, [pc, #120]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002040:	4013      	ands	r3, r2
 8002042:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d006      	beq.n	800205e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002050:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	4918      	ldr	r1, [pc, #96]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	608b      	str	r3, [r1, #8]
 800205c:	e006      	b.n	800206c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	43db      	mvns	r3, r3
 8002066:	4914      	ldr	r1, [pc, #80]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002068:	4013      	ands	r3, r2
 800206a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d021      	beq.n	80020bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002078:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	490e      	ldr	r1, [pc, #56]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	60cb      	str	r3, [r1, #12]
 8002084:	e021      	b.n	80020ca <HAL_GPIO_Init+0x2e2>
 8002086:	bf00      	nop
 8002088:	10320000 	.word	0x10320000
 800208c:	10310000 	.word	0x10310000
 8002090:	10220000 	.word	0x10220000
 8002094:	10210000 	.word	0x10210000
 8002098:	10120000 	.word	0x10120000
 800209c:	10110000 	.word	0x10110000
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40010000 	.word	0x40010000
 80020a8:	40010800 	.word	0x40010800
 80020ac:	40010c00 	.word	0x40010c00
 80020b0:	40011000 	.word	0x40011000
 80020b4:	40011400 	.word	0x40011400
 80020b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_GPIO_Init+0x304>)
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	4909      	ldr	r1, [pc, #36]	; (80020ec <HAL_GPIO_Init+0x304>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	3301      	adds	r3, #1
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	fa22 f303 	lsr.w	r3, r2, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f47f ae8e 	bne.w	8001dfc <HAL_GPIO_Init+0x14>
  }
}
 80020e0:	bf00      	nop
 80020e2:	bf00      	nop
 80020e4:	372c      	adds	r7, #44	; 0x2c
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr
 80020ec:	40010400 	.word	0x40010400

080020f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	887b      	ldrh	r3, [r7, #2]
 8002102:	4013      	ands	r3, r2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d002      	beq.n	800210e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002108:	2301      	movs	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
 800210c:	e001      	b.n	8002112 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800210e:	2300      	movs	r3, #0
 8002110:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002112:	7bfb      	ldrb	r3, [r7, #15]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr

0800211e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	460b      	mov	r3, r1
 8002128:	807b      	strh	r3, [r7, #2]
 800212a:	4613      	mov	r3, r2
 800212c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800212e:	787b      	ldrb	r3, [r7, #1]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002134:	887a      	ldrh	r2, [r7, #2]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800213a:	e003      	b.n	8002144 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800213c:	887b      	ldrh	r3, [r7, #2]
 800213e:	041a      	lsls	r2, r3, #16
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	611a      	str	r2, [r3, #16]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr
	...

08002150 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e26c      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 8087 	beq.w	800227e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002170:	4b92      	ldr	r3, [pc, #584]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 030c 	and.w	r3, r3, #12
 8002178:	2b04      	cmp	r3, #4
 800217a:	d00c      	beq.n	8002196 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800217c:	4b8f      	ldr	r3, [pc, #572]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 030c 	and.w	r3, r3, #12
 8002184:	2b08      	cmp	r3, #8
 8002186:	d112      	bne.n	80021ae <HAL_RCC_OscConfig+0x5e>
 8002188:	4b8c      	ldr	r3, [pc, #560]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002194:	d10b      	bne.n	80021ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002196:	4b89      	ldr	r3, [pc, #548]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d06c      	beq.n	800227c <HAL_RCC_OscConfig+0x12c>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d168      	bne.n	800227c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e246      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b6:	d106      	bne.n	80021c6 <HAL_RCC_OscConfig+0x76>
 80021b8:	4b80      	ldr	r3, [pc, #512]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a7f      	ldr	r2, [pc, #508]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 80021be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c2:	6013      	str	r3, [r2, #0]
 80021c4:	e02e      	b.n	8002224 <HAL_RCC_OscConfig+0xd4>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x98>
 80021ce:	4b7b      	ldr	r3, [pc, #492]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a7a      	ldr	r2, [pc, #488]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 80021d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4b78      	ldr	r3, [pc, #480]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a77      	ldr	r2, [pc, #476]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 80021e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e01d      	b.n	8002224 <HAL_RCC_OscConfig+0xd4>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021f0:	d10c      	bne.n	800220c <HAL_RCC_OscConfig+0xbc>
 80021f2:	4b72      	ldr	r3, [pc, #456]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a71      	ldr	r2, [pc, #452]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 80021f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	4b6f      	ldr	r3, [pc, #444]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a6e      	ldr	r2, [pc, #440]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 8002204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	e00b      	b.n	8002224 <HAL_RCC_OscConfig+0xd4>
 800220c:	4b6b      	ldr	r3, [pc, #428]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a6a      	ldr	r2, [pc, #424]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 8002212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	4b68      	ldr	r3, [pc, #416]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a67      	ldr	r2, [pc, #412]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 800221e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002222:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d013      	beq.n	8002254 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7ff fcc4 	bl	8001bb8 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002234:	f7ff fcc0 	bl	8001bb8 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b64      	cmp	r3, #100	; 0x64
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e1fa      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002246:	4b5d      	ldr	r3, [pc, #372]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f0      	beq.n	8002234 <HAL_RCC_OscConfig+0xe4>
 8002252:	e014      	b.n	800227e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7ff fcb0 	bl	8001bb8 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800225c:	f7ff fcac 	bl	8001bb8 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b64      	cmp	r3, #100	; 0x64
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e1e6      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226e:	4b53      	ldr	r3, [pc, #332]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0x10c>
 800227a:	e000      	b.n	800227e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d063      	beq.n	8002352 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800228a:	4b4c      	ldr	r3, [pc, #304]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00b      	beq.n	80022ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002296:	4b49      	ldr	r3, [pc, #292]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d11c      	bne.n	80022dc <HAL_RCC_OscConfig+0x18c>
 80022a2:	4b46      	ldr	r3, [pc, #280]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d116      	bne.n	80022dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ae:	4b43      	ldr	r3, [pc, #268]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d005      	beq.n	80022c6 <HAL_RCC_OscConfig+0x176>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d001      	beq.n	80022c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e1ba      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c6:	4b3d      	ldr	r3, [pc, #244]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4939      	ldr	r1, [pc, #228]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022da:	e03a      	b.n	8002352 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d020      	beq.n	8002326 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022e4:	4b36      	ldr	r3, [pc, #216]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ea:	f7ff fc65 	bl	8001bb8 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f2:	f7ff fc61 	bl	8001bb8 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e19b      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002304:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0f0      	beq.n	80022f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002310:	4b2a      	ldr	r3, [pc, #168]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	4927      	ldr	r1, [pc, #156]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 8002320:	4313      	orrs	r3, r2
 8002322:	600b      	str	r3, [r1, #0]
 8002324:	e015      	b.n	8002352 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002326:	4b26      	ldr	r3, [pc, #152]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7ff fc44 	bl	8001bb8 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002334:	f7ff fc40 	bl	8001bb8 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e17a      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002346:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d03a      	beq.n	80023d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d019      	beq.n	800239a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002366:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 8002368:	2201      	movs	r2, #1
 800236a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236c:	f7ff fc24 	bl	8001bb8 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002374:	f7ff fc20 	bl	8001bb8 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e15a      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002386:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f0      	beq.n	8002374 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002392:	2001      	movs	r0, #1
 8002394:	f000 fad8 	bl	8002948 <RCC_Delay>
 8002398:	e01c      	b.n	80023d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a0:	f7ff fc0a 	bl	8001bb8 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a6:	e00f      	b.n	80023c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a8:	f7ff fc06 	bl	8001bb8 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d908      	bls.n	80023c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e140      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
 80023ba:	bf00      	nop
 80023bc:	40021000 	.word	0x40021000
 80023c0:	42420000 	.word	0x42420000
 80023c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c8:	4b9e      	ldr	r3, [pc, #632]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1e9      	bne.n	80023a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 80a6 	beq.w	800252e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e2:	2300      	movs	r3, #0
 80023e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e6:	4b97      	ldr	r3, [pc, #604]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10d      	bne.n	800240e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f2:	4b94      	ldr	r3, [pc, #592]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	4a93      	ldr	r2, [pc, #588]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 80023f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023fc:	61d3      	str	r3, [r2, #28]
 80023fe:	4b91      	ldr	r3, [pc, #580]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800240a:	2301      	movs	r3, #1
 800240c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240e:	4b8e      	ldr	r3, [pc, #568]	; (8002648 <HAL_RCC_OscConfig+0x4f8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002416:	2b00      	cmp	r3, #0
 8002418:	d118      	bne.n	800244c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800241a:	4b8b      	ldr	r3, [pc, #556]	; (8002648 <HAL_RCC_OscConfig+0x4f8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a8a      	ldr	r2, [pc, #552]	; (8002648 <HAL_RCC_OscConfig+0x4f8>)
 8002420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002424:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002426:	f7ff fbc7 	bl	8001bb8 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800242e:	f7ff fbc3 	bl	8001bb8 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b64      	cmp	r3, #100	; 0x64
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e0fd      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002440:	4b81      	ldr	r3, [pc, #516]	; (8002648 <HAL_RCC_OscConfig+0x4f8>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d106      	bne.n	8002462 <HAL_RCC_OscConfig+0x312>
 8002454:	4b7b      	ldr	r3, [pc, #492]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	4a7a      	ldr	r2, [pc, #488]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	6213      	str	r3, [r2, #32]
 8002460:	e02d      	b.n	80024be <HAL_RCC_OscConfig+0x36e>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10c      	bne.n	8002484 <HAL_RCC_OscConfig+0x334>
 800246a:	4b76      	ldr	r3, [pc, #472]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	4a75      	ldr	r2, [pc, #468]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 8002470:	f023 0301 	bic.w	r3, r3, #1
 8002474:	6213      	str	r3, [r2, #32]
 8002476:	4b73      	ldr	r3, [pc, #460]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	4a72      	ldr	r2, [pc, #456]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 800247c:	f023 0304 	bic.w	r3, r3, #4
 8002480:	6213      	str	r3, [r2, #32]
 8002482:	e01c      	b.n	80024be <HAL_RCC_OscConfig+0x36e>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	2b05      	cmp	r3, #5
 800248a:	d10c      	bne.n	80024a6 <HAL_RCC_OscConfig+0x356>
 800248c:	4b6d      	ldr	r3, [pc, #436]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	4a6c      	ldr	r2, [pc, #432]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 8002492:	f043 0304 	orr.w	r3, r3, #4
 8002496:	6213      	str	r3, [r2, #32]
 8002498:	4b6a      	ldr	r3, [pc, #424]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	4a69      	ldr	r2, [pc, #420]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	6213      	str	r3, [r2, #32]
 80024a4:	e00b      	b.n	80024be <HAL_RCC_OscConfig+0x36e>
 80024a6:	4b67      	ldr	r3, [pc, #412]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	4a66      	ldr	r2, [pc, #408]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 80024ac:	f023 0301 	bic.w	r3, r3, #1
 80024b0:	6213      	str	r3, [r2, #32]
 80024b2:	4b64      	ldr	r3, [pc, #400]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	4a63      	ldr	r2, [pc, #396]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 80024b8:	f023 0304 	bic.w	r3, r3, #4
 80024bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d015      	beq.n	80024f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c6:	f7ff fb77 	bl	8001bb8 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024cc:	e00a      	b.n	80024e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ce:	f7ff fb73 	bl	8001bb8 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024dc:	4293      	cmp	r3, r2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e0ab      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e4:	4b57      	ldr	r3, [pc, #348]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0ee      	beq.n	80024ce <HAL_RCC_OscConfig+0x37e>
 80024f0:	e014      	b.n	800251c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f2:	f7ff fb61 	bl	8001bb8 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f8:	e00a      	b.n	8002510 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fa:	f7ff fb5d 	bl	8001bb8 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	f241 3288 	movw	r2, #5000	; 0x1388
 8002508:	4293      	cmp	r3, r2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e095      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002510:	4b4c      	ldr	r3, [pc, #304]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1ee      	bne.n	80024fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800251c:	7dfb      	ldrb	r3, [r7, #23]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d105      	bne.n	800252e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002522:	4b48      	ldr	r3, [pc, #288]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	4a47      	ldr	r2, [pc, #284]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 8002528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800252c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 8081 	beq.w	800263a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002538:	4b42      	ldr	r3, [pc, #264]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 030c 	and.w	r3, r3, #12
 8002540:	2b08      	cmp	r3, #8
 8002542:	d061      	beq.n	8002608 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d146      	bne.n	80025da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254c:	4b3f      	ldr	r3, [pc, #252]	; (800264c <HAL_RCC_OscConfig+0x4fc>)
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002552:	f7ff fb31 	bl	8001bb8 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255a:	f7ff fb2d 	bl	8001bb8 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e067      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800256c:	4b35      	ldr	r3, [pc, #212]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1f0      	bne.n	800255a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002580:	d108      	bne.n	8002594 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002582:	4b30      	ldr	r3, [pc, #192]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	492d      	ldr	r1, [pc, #180]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002594:	4b2b      	ldr	r3, [pc, #172]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a19      	ldr	r1, [r3, #32]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	430b      	orrs	r3, r1
 80025a6:	4927      	ldr	r1, [pc, #156]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025ac:	4b27      	ldr	r3, [pc, #156]	; (800264c <HAL_RCC_OscConfig+0x4fc>)
 80025ae:	2201      	movs	r2, #1
 80025b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b2:	f7ff fb01 	bl	8001bb8 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ba:	f7ff fafd 	bl	8001bb8 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e037      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025cc:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0f0      	beq.n	80025ba <HAL_RCC_OscConfig+0x46a>
 80025d8:	e02f      	b.n	800263a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025da:	4b1c      	ldr	r3, [pc, #112]	; (800264c <HAL_RCC_OscConfig+0x4fc>)
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e0:	f7ff faea 	bl	8001bb8 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e8:	f7ff fae6 	bl	8001bb8 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e020      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025fa:	4b12      	ldr	r3, [pc, #72]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x498>
 8002606:	e018      	b.n	800263a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e013      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002614:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	429a      	cmp	r2, r3
 8002626:	d106      	bne.n	8002636 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002632:	429a      	cmp	r2, r3
 8002634:	d001      	beq.n	800263a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40021000 	.word	0x40021000
 8002648:	40007000 	.word	0x40007000
 800264c:	42420060 	.word	0x42420060

08002650 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0d0      	b.n	8002806 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002664:	4b6a      	ldr	r3, [pc, #424]	; (8002810 <HAL_RCC_ClockConfig+0x1c0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d910      	bls.n	8002694 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b67      	ldr	r3, [pc, #412]	; (8002810 <HAL_RCC_ClockConfig+0x1c0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 0207 	bic.w	r2, r3, #7
 800267a:	4965      	ldr	r1, [pc, #404]	; (8002810 <HAL_RCC_ClockConfig+0x1c0>)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	4313      	orrs	r3, r2
 8002680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002682:	4b63      	ldr	r3, [pc, #396]	; (8002810 <HAL_RCC_ClockConfig+0x1c0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d001      	beq.n	8002694 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0b8      	b.n	8002806 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d020      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026ac:	4b59      	ldr	r3, [pc, #356]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	4a58      	ldr	r2, [pc, #352]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80026b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026c4:	4b53      	ldr	r3, [pc, #332]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4a52      	ldr	r2, [pc, #328]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d0:	4b50      	ldr	r3, [pc, #320]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	494d      	ldr	r1, [pc, #308]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d040      	beq.n	8002770 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d107      	bne.n	8002706 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f6:	4b47      	ldr	r3, [pc, #284]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d115      	bne.n	800272e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e07f      	b.n	8002806 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d107      	bne.n	800271e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270e:	4b41      	ldr	r3, [pc, #260]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d109      	bne.n	800272e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e073      	b.n	8002806 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271e:	4b3d      	ldr	r3, [pc, #244]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e06b      	b.n	8002806 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800272e:	4b39      	ldr	r3, [pc, #228]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f023 0203 	bic.w	r2, r3, #3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4936      	ldr	r1, [pc, #216]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	4313      	orrs	r3, r2
 800273e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002740:	f7ff fa3a 	bl	8001bb8 <HAL_GetTick>
 8002744:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002746:	e00a      	b.n	800275e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002748:	f7ff fa36 	bl	8001bb8 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f241 3288 	movw	r2, #5000	; 0x1388
 8002756:	4293      	cmp	r3, r2
 8002758:	d901      	bls.n	800275e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e053      	b.n	8002806 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275e:	4b2d      	ldr	r3, [pc, #180]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f003 020c 	and.w	r2, r3, #12
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	429a      	cmp	r2, r3
 800276e:	d1eb      	bne.n	8002748 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002770:	4b27      	ldr	r3, [pc, #156]	; (8002810 <HAL_RCC_ClockConfig+0x1c0>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d210      	bcs.n	80027a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277e:	4b24      	ldr	r3, [pc, #144]	; (8002810 <HAL_RCC_ClockConfig+0x1c0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 0207 	bic.w	r2, r3, #7
 8002786:	4922      	ldr	r1, [pc, #136]	; (8002810 <HAL_RCC_ClockConfig+0x1c0>)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800278e:	4b20      	ldr	r3, [pc, #128]	; (8002810 <HAL_RCC_ClockConfig+0x1c0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	d001      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e032      	b.n	8002806 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d008      	beq.n	80027be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027ac:	4b19      	ldr	r3, [pc, #100]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	4916      	ldr	r1, [pc, #88]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d009      	beq.n	80027de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027ca:	4b12      	ldr	r3, [pc, #72]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	490e      	ldr	r1, [pc, #56]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027de:	f000 f821 	bl	8002824 <HAL_RCC_GetSysClockFreq>
 80027e2:	4602      	mov	r2, r0
 80027e4:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	091b      	lsrs	r3, r3, #4
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	490a      	ldr	r1, [pc, #40]	; (8002818 <HAL_RCC_ClockConfig+0x1c8>)
 80027f0:	5ccb      	ldrb	r3, [r1, r3]
 80027f2:	fa22 f303 	lsr.w	r3, r2, r3
 80027f6:	4a09      	ldr	r2, [pc, #36]	; (800281c <HAL_RCC_ClockConfig+0x1cc>)
 80027f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027fa:	4b09      	ldr	r3, [pc, #36]	; (8002820 <HAL_RCC_ClockConfig+0x1d0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff f998 	bl	8001b34 <HAL_InitTick>

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40022000 	.word	0x40022000
 8002814:	40021000 	.word	0x40021000
 8002818:	08003a68 	.word	0x08003a68
 800281c:	2000000c 	.word	0x2000000c
 8002820:	20000010 	.word	0x20000010

08002824 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002824:	b490      	push	{r4, r7}
 8002826:	b08a      	sub	sp, #40	; 0x28
 8002828:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800282a:	4b2a      	ldr	r3, [pc, #168]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800282c:	1d3c      	adds	r4, r7, #4
 800282e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002830:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002834:	f240 2301 	movw	r3, #513	; 0x201
 8002838:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
 800283e:	2300      	movs	r3, #0
 8002840:	61bb      	str	r3, [r7, #24]
 8002842:	2300      	movs	r3, #0
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800284a:	2300      	movs	r3, #0
 800284c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800284e:	4b22      	ldr	r3, [pc, #136]	; (80028d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f003 030c 	and.w	r3, r3, #12
 800285a:	2b04      	cmp	r3, #4
 800285c:	d002      	beq.n	8002864 <HAL_RCC_GetSysClockFreq+0x40>
 800285e:	2b08      	cmp	r3, #8
 8002860:	d003      	beq.n	800286a <HAL_RCC_GetSysClockFreq+0x46>
 8002862:	e02d      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002864:	4b1d      	ldr	r3, [pc, #116]	; (80028dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002866:	623b      	str	r3, [r7, #32]
      break;
 8002868:	e02d      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	0c9b      	lsrs	r3, r3, #18
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002876:	4413      	add	r3, r2
 8002878:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800287c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d013      	beq.n	80028b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002888:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	0c5b      	lsrs	r3, r3, #17
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002896:	4413      	add	r3, r2
 8002898:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800289c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	4a0e      	ldr	r2, [pc, #56]	; (80028dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80028a2:	fb02 f203 	mul.w	r2, r2, r3
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
 80028ae:	e004      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	4a0b      	ldr	r2, [pc, #44]	; (80028e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028b4:	fb02 f303 	mul.w	r3, r2, r3
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	623b      	str	r3, [r7, #32]
      break;
 80028be:	e002      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80028c2:	623b      	str	r3, [r7, #32]
      break;
 80028c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028c6:	6a3b      	ldr	r3, [r7, #32]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3728      	adds	r7, #40	; 0x28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc90      	pop	{r4, r7}
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	08003a58 	.word	0x08003a58
 80028d8:	40021000 	.word	0x40021000
 80028dc:	007a1200 	.word	0x007a1200
 80028e0:	003d0900 	.word	0x003d0900

080028e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028e8:	4b02      	ldr	r3, [pc, #8]	; (80028f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80028ea:	681b      	ldr	r3, [r3, #0]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr
 80028f4:	2000000c 	.word	0x2000000c

080028f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028fc:	f7ff fff2 	bl	80028e4 <HAL_RCC_GetHCLKFreq>
 8002900:	4602      	mov	r2, r0
 8002902:	4b05      	ldr	r3, [pc, #20]	; (8002918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	0a1b      	lsrs	r3, r3, #8
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	4903      	ldr	r1, [pc, #12]	; (800291c <HAL_RCC_GetPCLK1Freq+0x24>)
 800290e:	5ccb      	ldrb	r3, [r1, r3]
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002914:	4618      	mov	r0, r3
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40021000 	.word	0x40021000
 800291c:	08003a78 	.word	0x08003a78

08002920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002924:	f7ff ffde 	bl	80028e4 <HAL_RCC_GetHCLKFreq>
 8002928:	4602      	mov	r2, r0
 800292a:	4b05      	ldr	r3, [pc, #20]	; (8002940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	0adb      	lsrs	r3, r3, #11
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	4903      	ldr	r1, [pc, #12]	; (8002944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002936:	5ccb      	ldrb	r3, [r1, r3]
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800293c:	4618      	mov	r0, r3
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40021000 	.word	0x40021000
 8002944:	08003a78 	.word	0x08003a78

08002948 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002950:	4b0a      	ldr	r3, [pc, #40]	; (800297c <RCC_Delay+0x34>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <RCC_Delay+0x38>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	0a5b      	lsrs	r3, r3, #9
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	fb02 f303 	mul.w	r3, r2, r3
 8002962:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002964:	bf00      	nop
  }
  while (Delay --);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1e5a      	subs	r2, r3, #1
 800296a:	60fa      	str	r2, [r7, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1f9      	bne.n	8002964 <RCC_Delay+0x1c>
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr
 800297c:	2000000c 	.word	0x2000000c
 8002980:	10624dd3 	.word	0x10624dd3

08002984 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e041      	b.n	8002a1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7fe ff90 	bl	80018d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3304      	adds	r3, #4
 80029c0:	4619      	mov	r1, r3
 80029c2:	4610      	mov	r0, r2
 80029c4:	f000 fc20 	bl	8003208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d001      	beq.n	8002a3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e03a      	b.n	8002ab2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a18      	ldr	r2, [pc, #96]	; (8002abc <HAL_TIM_Base_Start_IT+0x98>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00e      	beq.n	8002a7c <HAL_TIM_Base_Start_IT+0x58>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a66:	d009      	beq.n	8002a7c <HAL_TIM_Base_Start_IT+0x58>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a14      	ldr	r2, [pc, #80]	; (8002ac0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d004      	beq.n	8002a7c <HAL_TIM_Base_Start_IT+0x58>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a13      	ldr	r2, [pc, #76]	; (8002ac4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d111      	bne.n	8002aa0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b06      	cmp	r3, #6
 8002a8c:	d010      	beq.n	8002ab0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 0201 	orr.w	r2, r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a9e:	e007      	b.n	8002ab0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr
 8002abc:	40012c00 	.word	0x40012c00
 8002ac0:	40000400 	.word	0x40000400
 8002ac4:	40000800 	.word	0x40000800

08002ac8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e041      	b.n	8002b5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d106      	bne.n	8002af4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7fe ff12 	bl	8001918 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3304      	adds	r3, #4
 8002b04:	4619      	mov	r1, r3
 8002b06:	4610      	mov	r0, r2
 8002b08:	f000 fb7e 	bl	8003208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d109      	bne.n	8002b8c <HAL_TIM_PWM_Start+0x24>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	bf14      	ite	ne
 8002b84:	2301      	movne	r3, #1
 8002b86:	2300      	moveq	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	e022      	b.n	8002bd2 <HAL_TIM_PWM_Start+0x6a>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d109      	bne.n	8002ba6 <HAL_TIM_PWM_Start+0x3e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	bf14      	ite	ne
 8002b9e:	2301      	movne	r3, #1
 8002ba0:	2300      	moveq	r3, #0
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	e015      	b.n	8002bd2 <HAL_TIM_PWM_Start+0x6a>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d109      	bne.n	8002bc0 <HAL_TIM_PWM_Start+0x58>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	bf14      	ite	ne
 8002bb8:	2301      	movne	r3, #1
 8002bba:	2300      	moveq	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	e008      	b.n	8002bd2 <HAL_TIM_PWM_Start+0x6a>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	bf14      	ite	ne
 8002bcc:	2301      	movne	r3, #1
 8002bce:	2300      	moveq	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e05e      	b.n	8002c98 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d104      	bne.n	8002bea <HAL_TIM_PWM_Start+0x82>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2202      	movs	r2, #2
 8002be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002be8:	e013      	b.n	8002c12 <HAL_TIM_PWM_Start+0xaa>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d104      	bne.n	8002bfa <HAL_TIM_PWM_Start+0x92>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bf8:	e00b      	b.n	8002c12 <HAL_TIM_PWM_Start+0xaa>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d104      	bne.n	8002c0a <HAL_TIM_PWM_Start+0xa2>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c08:	e003      	b.n	8002c12 <HAL_TIM_PWM_Start+0xaa>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2201      	movs	r2, #1
 8002c18:	6839      	ldr	r1, [r7, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 fd74 	bl	8003708 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a1e      	ldr	r2, [pc, #120]	; (8002ca0 <HAL_TIM_PWM_Start+0x138>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d107      	bne.n	8002c3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a18      	ldr	r2, [pc, #96]	; (8002ca0 <HAL_TIM_PWM_Start+0x138>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d00e      	beq.n	8002c62 <HAL_TIM_PWM_Start+0xfa>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c4c:	d009      	beq.n	8002c62 <HAL_TIM_PWM_Start+0xfa>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a14      	ldr	r2, [pc, #80]	; (8002ca4 <HAL_TIM_PWM_Start+0x13c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d004      	beq.n	8002c62 <HAL_TIM_PWM_Start+0xfa>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <HAL_TIM_PWM_Start+0x140>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d111      	bne.n	8002c86 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2b06      	cmp	r3, #6
 8002c72:	d010      	beq.n	8002c96 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0201 	orr.w	r2, r2, #1
 8002c82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c84:	e007      	b.n	8002c96 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0201 	orr.w	r2, r2, #1
 8002c94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40012c00 	.word	0x40012c00
 8002ca4:	40000400 	.word	0x40000400
 8002ca8:	40000800 	.word	0x40000800

08002cac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d122      	bne.n	8002d08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d11b      	bne.n	8002d08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f06f 0202 	mvn.w	r2, #2
 8002cd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fa6f 	bl	80031d2 <HAL_TIM_IC_CaptureCallback>
 8002cf4:	e005      	b.n	8002d02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fa62 	bl	80031c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 fa71 	bl	80031e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d122      	bne.n	8002d5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d11b      	bne.n	8002d5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f06f 0204 	mvn.w	r2, #4
 8002d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2202      	movs	r2, #2
 8002d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fa45 	bl	80031d2 <HAL_TIM_IC_CaptureCallback>
 8002d48:	e005      	b.n	8002d56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fa38 	bl	80031c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 fa47 	bl	80031e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d122      	bne.n	8002db0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d11b      	bne.n	8002db0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f06f 0208 	mvn.w	r2, #8
 8002d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2204      	movs	r2, #4
 8002d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fa1b 	bl	80031d2 <HAL_TIM_IC_CaptureCallback>
 8002d9c:	e005      	b.n	8002daa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 fa0e 	bl	80031c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 fa1d 	bl	80031e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f003 0310 	and.w	r3, r3, #16
 8002dba:	2b10      	cmp	r3, #16
 8002dbc:	d122      	bne.n	8002e04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b10      	cmp	r3, #16
 8002dca:	d11b      	bne.n	8002e04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f06f 0210 	mvn.w	r2, #16
 8002dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2208      	movs	r2, #8
 8002dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f9f1 	bl	80031d2 <HAL_TIM_IC_CaptureCallback>
 8002df0:	e005      	b.n	8002dfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f9e4 	bl	80031c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f9f3 	bl	80031e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d10e      	bne.n	8002e30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d107      	bne.n	8002e30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f06f 0201 	mvn.w	r2, #1
 8002e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7fe fb0e 	bl	800144c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3a:	2b80      	cmp	r3, #128	; 0x80
 8002e3c:	d10e      	bne.n	8002e5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e48:	2b80      	cmp	r3, #128	; 0x80
 8002e4a:	d107      	bne.n	8002e5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 fce1 	bl	800381e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e66:	2b40      	cmp	r3, #64	; 0x40
 8002e68:	d10e      	bne.n	8002e88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e74:	2b40      	cmp	r3, #64	; 0x40
 8002e76:	d107      	bne.n	8002e88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f9b7 	bl	80031f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f003 0320 	and.w	r3, r3, #32
 8002e92:	2b20      	cmp	r3, #32
 8002e94:	d10e      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f003 0320 	and.w	r3, r3, #32
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	d107      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f06f 0220 	mvn.w	r2, #32
 8002eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fcac 	bl	800380c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e0ac      	b.n	8003030 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b0c      	cmp	r3, #12
 8002ee2:	f200 809f 	bhi.w	8003024 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002ee6:	a201      	add	r2, pc, #4	; (adr r2, 8002eec <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eec:	08002f21 	.word	0x08002f21
 8002ef0:	08003025 	.word	0x08003025
 8002ef4:	08003025 	.word	0x08003025
 8002ef8:	08003025 	.word	0x08003025
 8002efc:	08002f61 	.word	0x08002f61
 8002f00:	08003025 	.word	0x08003025
 8002f04:	08003025 	.word	0x08003025
 8002f08:	08003025 	.word	0x08003025
 8002f0c:	08002fa3 	.word	0x08002fa3
 8002f10:	08003025 	.word	0x08003025
 8002f14:	08003025 	.word	0x08003025
 8002f18:	08003025 	.word	0x08003025
 8002f1c:	08002fe3 	.word	0x08002fe3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68b9      	ldr	r1, [r7, #8]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 f9d0 	bl	80032cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0208 	orr.w	r2, r2, #8
 8002f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699a      	ldr	r2, [r3, #24]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0204 	bic.w	r2, r2, #4
 8002f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6999      	ldr	r1, [r3, #24]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	691a      	ldr	r2, [r3, #16]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	619a      	str	r2, [r3, #24]
      break;
 8002f5e:	e062      	b.n	8003026 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 fa16 	bl	8003398 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6999      	ldr	r1, [r3, #24]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	021a      	lsls	r2, r3, #8
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	619a      	str	r2, [r3, #24]
      break;
 8002fa0:	e041      	b.n	8003026 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fa5f 	bl	800346c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69da      	ldr	r2, [r3, #28]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0208 	orr.w	r2, r2, #8
 8002fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69da      	ldr	r2, [r3, #28]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0204 	bic.w	r2, r2, #4
 8002fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	69d9      	ldr	r1, [r3, #28]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	61da      	str	r2, [r3, #28]
      break;
 8002fe0:	e021      	b.n	8003026 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68b9      	ldr	r1, [r7, #8]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 faa9 	bl	8003540 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	69da      	ldr	r2, [r3, #28]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	69da      	ldr	r2, [r3, #28]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800300c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	69d9      	ldr	r1, [r3, #28]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	021a      	lsls	r2, r3, #8
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	61da      	str	r2, [r3, #28]
      break;
 8003022:	e000      	b.n	8003026 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003024:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_TIM_ConfigClockSource+0x18>
 800304c:	2302      	movs	r3, #2
 800304e:	e0b3      	b.n	80031b8 <HAL_TIM_ConfigClockSource+0x180>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2202      	movs	r2, #2
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800306e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003076:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003088:	d03e      	beq.n	8003108 <HAL_TIM_ConfigClockSource+0xd0>
 800308a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800308e:	f200 8087 	bhi.w	80031a0 <HAL_TIM_ConfigClockSource+0x168>
 8003092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003096:	f000 8085 	beq.w	80031a4 <HAL_TIM_ConfigClockSource+0x16c>
 800309a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800309e:	d87f      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x168>
 80030a0:	2b70      	cmp	r3, #112	; 0x70
 80030a2:	d01a      	beq.n	80030da <HAL_TIM_ConfigClockSource+0xa2>
 80030a4:	2b70      	cmp	r3, #112	; 0x70
 80030a6:	d87b      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x168>
 80030a8:	2b60      	cmp	r3, #96	; 0x60
 80030aa:	d050      	beq.n	800314e <HAL_TIM_ConfigClockSource+0x116>
 80030ac:	2b60      	cmp	r3, #96	; 0x60
 80030ae:	d877      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x168>
 80030b0:	2b50      	cmp	r3, #80	; 0x50
 80030b2:	d03c      	beq.n	800312e <HAL_TIM_ConfigClockSource+0xf6>
 80030b4:	2b50      	cmp	r3, #80	; 0x50
 80030b6:	d873      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x168>
 80030b8:	2b40      	cmp	r3, #64	; 0x40
 80030ba:	d058      	beq.n	800316e <HAL_TIM_ConfigClockSource+0x136>
 80030bc:	2b40      	cmp	r3, #64	; 0x40
 80030be:	d86f      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x168>
 80030c0:	2b30      	cmp	r3, #48	; 0x30
 80030c2:	d064      	beq.n	800318e <HAL_TIM_ConfigClockSource+0x156>
 80030c4:	2b30      	cmp	r3, #48	; 0x30
 80030c6:	d86b      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x168>
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	d060      	beq.n	800318e <HAL_TIM_ConfigClockSource+0x156>
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	d867      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x168>
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d05c      	beq.n	800318e <HAL_TIM_ConfigClockSource+0x156>
 80030d4:	2b10      	cmp	r3, #16
 80030d6:	d05a      	beq.n	800318e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80030d8:	e062      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6899      	ldr	r1, [r3, #8]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f000 faee 	bl	80036ca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	609a      	str	r2, [r3, #8]
      break;
 8003106:	e04e      	b.n	80031a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6818      	ldr	r0, [r3, #0]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	6899      	ldr	r1, [r3, #8]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f000 fad7 	bl	80036ca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800312a:	609a      	str	r2, [r3, #8]
      break;
 800312c:	e03b      	b.n	80031a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	6859      	ldr	r1, [r3, #4]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	461a      	mov	r2, r3
 800313c:	f000 fa4e 	bl	80035dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2150      	movs	r1, #80	; 0x50
 8003146:	4618      	mov	r0, r3
 8003148:	f000 faa5 	bl	8003696 <TIM_ITRx_SetConfig>
      break;
 800314c:	e02b      	b.n	80031a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6818      	ldr	r0, [r3, #0]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	6859      	ldr	r1, [r3, #4]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	461a      	mov	r2, r3
 800315c:	f000 fa6c 	bl	8003638 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2160      	movs	r1, #96	; 0x60
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fa95 	bl	8003696 <TIM_ITRx_SetConfig>
      break;
 800316c:	e01b      	b.n	80031a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	6859      	ldr	r1, [r3, #4]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	461a      	mov	r2, r3
 800317c:	f000 fa2e 	bl	80035dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2140      	movs	r1, #64	; 0x40
 8003186:	4618      	mov	r0, r3
 8003188:	f000 fa85 	bl	8003696 <TIM_ITRx_SetConfig>
      break;
 800318c:	e00b      	b.n	80031a6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4619      	mov	r1, r3
 8003198:	4610      	mov	r0, r2
 800319a:	f000 fa7c 	bl	8003696 <TIM_ITRx_SetConfig>
        break;
 800319e:	e002      	b.n	80031a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80031a0:	bf00      	nop
 80031a2:	e000      	b.n	80031a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80031a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bc80      	pop	{r7}
 80031d0:	4770      	bx	lr

080031d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr

080031e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr

080031f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr

08003208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a29      	ldr	r2, [pc, #164]	; (80032c0 <TIM_Base_SetConfig+0xb8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00b      	beq.n	8003238 <TIM_Base_SetConfig+0x30>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003226:	d007      	beq.n	8003238 <TIM_Base_SetConfig+0x30>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a26      	ldr	r2, [pc, #152]	; (80032c4 <TIM_Base_SetConfig+0xbc>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d003      	beq.n	8003238 <TIM_Base_SetConfig+0x30>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a25      	ldr	r2, [pc, #148]	; (80032c8 <TIM_Base_SetConfig+0xc0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d108      	bne.n	800324a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a1c      	ldr	r2, [pc, #112]	; (80032c0 <TIM_Base_SetConfig+0xb8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d00b      	beq.n	800326a <TIM_Base_SetConfig+0x62>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003258:	d007      	beq.n	800326a <TIM_Base_SetConfig+0x62>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a19      	ldr	r2, [pc, #100]	; (80032c4 <TIM_Base_SetConfig+0xbc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d003      	beq.n	800326a <TIM_Base_SetConfig+0x62>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a18      	ldr	r2, [pc, #96]	; (80032c8 <TIM_Base_SetConfig+0xc0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d108      	bne.n	800327c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	4313      	orrs	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	4313      	orrs	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a07      	ldr	r2, [pc, #28]	; (80032c0 <TIM_Base_SetConfig+0xb8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d103      	bne.n	80032b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	691a      	ldr	r2, [r3, #16]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	615a      	str	r2, [r3, #20]
}
 80032b6:	bf00      	nop
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr
 80032c0:	40012c00 	.word	0x40012c00
 80032c4:	40000400 	.word	0x40000400
 80032c8:	40000800 	.word	0x40000800

080032cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	f023 0201 	bic.w	r2, r3, #1
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f023 0303 	bic.w	r3, r3, #3
 8003302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	4313      	orrs	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f023 0302 	bic.w	r3, r3, #2
 8003314:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	4313      	orrs	r3, r2
 800331e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a1c      	ldr	r2, [pc, #112]	; (8003394 <TIM_OC1_SetConfig+0xc8>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d10c      	bne.n	8003342 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f023 0308 	bic.w	r3, r3, #8
 800332e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	4313      	orrs	r3, r2
 8003338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f023 0304 	bic.w	r3, r3, #4
 8003340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a13      	ldr	r2, [pc, #76]	; (8003394 <TIM_OC1_SetConfig+0xc8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d111      	bne.n	800336e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003350:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003358:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	621a      	str	r2, [r3, #32]
}
 8003388:	bf00      	nop
 800338a:	371c      	adds	r7, #28
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	40012c00 	.word	0x40012c00

08003398 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	f023 0210 	bic.w	r2, r3, #16
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	021b      	lsls	r3, r3, #8
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4313      	orrs	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f023 0320 	bic.w	r3, r3, #32
 80033e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a1d      	ldr	r2, [pc, #116]	; (8003468 <TIM_OC2_SetConfig+0xd0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d10d      	bne.n	8003414 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003412:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a14      	ldr	r2, [pc, #80]	; (8003468 <TIM_OC2_SetConfig+0xd0>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d113      	bne.n	8003444 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003422:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800342a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	621a      	str	r2, [r3, #32]
}
 800345e:	bf00      	nop
 8003460:	371c      	adds	r7, #28
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr
 8003468:	40012c00 	.word	0x40012c00

0800346c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f023 0303 	bic.w	r3, r3, #3
 80034a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	4313      	orrs	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a1d      	ldr	r2, [pc, #116]	; (800353c <TIM_OC3_SetConfig+0xd0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d10d      	bne.n	80034e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	021b      	lsls	r3, r3, #8
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	4313      	orrs	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a14      	ldr	r2, [pc, #80]	; (800353c <TIM_OC3_SetConfig+0xd0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d113      	bne.n	8003516 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4313      	orrs	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	621a      	str	r2, [r3, #32]
}
 8003530:	bf00      	nop
 8003532:	371c      	adds	r7, #28
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40012c00 	.word	0x40012c00

08003540 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800356e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	021b      	lsls	r3, r3, #8
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4313      	orrs	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800358a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	031b      	lsls	r3, r3, #12
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	4313      	orrs	r3, r2
 8003596:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a0f      	ldr	r2, [pc, #60]	; (80035d8 <TIM_OC4_SetConfig+0x98>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d109      	bne.n	80035b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	019b      	lsls	r3, r3, #6
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	621a      	str	r2, [r3, #32]
}
 80035ce:	bf00      	nop
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr
 80035d8:	40012c00 	.word	0x40012c00

080035dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	f023 0201 	bic.w	r2, r3, #1
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	4313      	orrs	r3, r2
 8003610:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f023 030a 	bic.w	r3, r3, #10
 8003618:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	621a      	str	r2, [r3, #32]
}
 800362e:	bf00      	nop
 8003630:	371c      	adds	r7, #28
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr

08003638 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f023 0210 	bic.w	r2, r3, #16
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003662:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	031b      	lsls	r3, r3, #12
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	4313      	orrs	r3, r2
 800366c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003674:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	621a      	str	r2, [r3, #32]
}
 800368c:	bf00      	nop
 800368e:	371c      	adds	r7, #28
 8003690:	46bd      	mov	sp, r7
 8003692:	bc80      	pop	{r7}
 8003694:	4770      	bx	lr

08003696 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003696:	b480      	push	{r7}
 8003698:	b085      	sub	sp, #20
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	f043 0307 	orr.w	r3, r3, #7
 80036b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	609a      	str	r2, [r3, #8]
}
 80036c0:	bf00      	nop
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bc80      	pop	{r7}
 80036c8:	4770      	bx	lr

080036ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b087      	sub	sp, #28
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	60f8      	str	r0, [r7, #12]
 80036d2:	60b9      	str	r1, [r7, #8]
 80036d4:	607a      	str	r2, [r7, #4]
 80036d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	021a      	lsls	r2, r3, #8
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	431a      	orrs	r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	609a      	str	r2, [r3, #8]
}
 80036fe:	bf00      	nop
 8003700:	371c      	adds	r7, #28
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr

08003708 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f003 031f 	and.w	r3, r3, #31
 800371a:	2201      	movs	r2, #1
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a1a      	ldr	r2, [r3, #32]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	43db      	mvns	r3, r3
 800372a:	401a      	ands	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a1a      	ldr	r2, [r3, #32]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	fa01 f303 	lsl.w	r3, r1, r3
 8003740:	431a      	orrs	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	621a      	str	r2, [r3, #32]
}
 8003746:	bf00      	nop
 8003748:	371c      	adds	r7, #28
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr

08003750 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003764:	2302      	movs	r3, #2
 8003766:	e046      	b.n	80037f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a16      	ldr	r2, [pc, #88]	; (8003800 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d00e      	beq.n	80037ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b4:	d009      	beq.n	80037ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a12      	ldr	r2, [pc, #72]	; (8003804 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d004      	beq.n	80037ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a10      	ldr	r2, [pc, #64]	; (8003808 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d10c      	bne.n	80037e4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	4313      	orrs	r3, r2
 80037da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr
 8003800:	40012c00 	.word	0x40012c00
 8003804:	40000400 	.word	0x40000400
 8003808:	40000800 	.word	0x40000800

0800380c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr

0800381e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr

08003830 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e03f      	b.n	80038c2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fe f8ae 	bl	80019b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2224      	movs	r2, #36	; 0x24
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003872:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f829 	bl	80038cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003888:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695a      	ldr	r2, [r3, #20]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003898:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003906:	f023 030c 	bic.w	r3, r3, #12
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6812      	ldr	r2, [r2, #0]
 800390e:	68b9      	ldr	r1, [r7, #8]
 8003910:	430b      	orrs	r3, r1
 8003912:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699a      	ldr	r2, [r3, #24]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a2c      	ldr	r2, [pc, #176]	; (80039e0 <UART_SetConfig+0x114>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d103      	bne.n	800393c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003934:	f7fe fff4 	bl	8002920 <HAL_RCC_GetPCLK2Freq>
 8003938:	60f8      	str	r0, [r7, #12]
 800393a:	e002      	b.n	8003942 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800393c:	f7fe ffdc 	bl	80028f8 <HAL_RCC_GetPCLK1Freq>
 8003940:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	4613      	mov	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	009a      	lsls	r2, r3, #2
 800394c:	441a      	add	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	fbb2 f3f3 	udiv	r3, r2, r3
 8003958:	4a22      	ldr	r2, [pc, #136]	; (80039e4 <UART_SetConfig+0x118>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	0119      	lsls	r1, r3, #4
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	009a      	lsls	r2, r3, #2
 800396c:	441a      	add	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	fbb2 f2f3 	udiv	r2, r2, r3
 8003978:	4b1a      	ldr	r3, [pc, #104]	; (80039e4 <UART_SetConfig+0x118>)
 800397a:	fba3 0302 	umull	r0, r3, r3, r2
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	2064      	movs	r0, #100	; 0x64
 8003982:	fb00 f303 	mul.w	r3, r0, r3
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	3332      	adds	r3, #50	; 0x32
 800398c:	4a15      	ldr	r2, [pc, #84]	; (80039e4 <UART_SetConfig+0x118>)
 800398e:	fba2 2303 	umull	r2, r3, r2, r3
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003998:	4419      	add	r1, r3
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	009a      	lsls	r2, r3, #2
 80039a4:	441a      	add	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80039b0:	4b0c      	ldr	r3, [pc, #48]	; (80039e4 <UART_SetConfig+0x118>)
 80039b2:	fba3 0302 	umull	r0, r3, r3, r2
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	2064      	movs	r0, #100	; 0x64
 80039ba:	fb00 f303 	mul.w	r3, r0, r3
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	011b      	lsls	r3, r3, #4
 80039c2:	3332      	adds	r3, #50	; 0x32
 80039c4:	4a07      	ldr	r2, [pc, #28]	; (80039e4 <UART_SetConfig+0x118>)
 80039c6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	f003 020f 	and.w	r2, r3, #15
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	440a      	add	r2, r1
 80039d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80039d8:	bf00      	nop
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40013800 	.word	0x40013800
 80039e4:	51eb851f 	.word	0x51eb851f

080039e8 <__libc_init_array>:
 80039e8:	b570      	push	{r4, r5, r6, lr}
 80039ea:	2600      	movs	r6, #0
 80039ec:	4d0c      	ldr	r5, [pc, #48]	; (8003a20 <__libc_init_array+0x38>)
 80039ee:	4c0d      	ldr	r4, [pc, #52]	; (8003a24 <__libc_init_array+0x3c>)
 80039f0:	1b64      	subs	r4, r4, r5
 80039f2:	10a4      	asrs	r4, r4, #2
 80039f4:	42a6      	cmp	r6, r4
 80039f6:	d109      	bne.n	8003a0c <__libc_init_array+0x24>
 80039f8:	f000 f822 	bl	8003a40 <_init>
 80039fc:	2600      	movs	r6, #0
 80039fe:	4d0a      	ldr	r5, [pc, #40]	; (8003a28 <__libc_init_array+0x40>)
 8003a00:	4c0a      	ldr	r4, [pc, #40]	; (8003a2c <__libc_init_array+0x44>)
 8003a02:	1b64      	subs	r4, r4, r5
 8003a04:	10a4      	asrs	r4, r4, #2
 8003a06:	42a6      	cmp	r6, r4
 8003a08:	d105      	bne.n	8003a16 <__libc_init_array+0x2e>
 8003a0a:	bd70      	pop	{r4, r5, r6, pc}
 8003a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a10:	4798      	blx	r3
 8003a12:	3601      	adds	r6, #1
 8003a14:	e7ee      	b.n	80039f4 <__libc_init_array+0xc>
 8003a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a1a:	4798      	blx	r3
 8003a1c:	3601      	adds	r6, #1
 8003a1e:	e7f2      	b.n	8003a06 <__libc_init_array+0x1e>
 8003a20:	08003a80 	.word	0x08003a80
 8003a24:	08003a80 	.word	0x08003a80
 8003a28:	08003a80 	.word	0x08003a80
 8003a2c:	08003a84 	.word	0x08003a84

08003a30 <memset>:
 8003a30:	4603      	mov	r3, r0
 8003a32:	4402      	add	r2, r0
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d100      	bne.n	8003a3a <memset+0xa>
 8003a38:	4770      	bx	lr
 8003a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a3e:	e7f9      	b.n	8003a34 <memset+0x4>

08003a40 <_init>:
 8003a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a42:	bf00      	nop
 8003a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a46:	bc08      	pop	{r3}
 8003a48:	469e      	mov	lr, r3
 8003a4a:	4770      	bx	lr

08003a4c <_fini>:
 8003a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4e:	bf00      	nop
 8003a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a52:	bc08      	pop	{r3}
 8003a54:	469e      	mov	lr, r3
 8003a56:	4770      	bx	lr
