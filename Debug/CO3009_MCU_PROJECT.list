
CO3009_MCU_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  080051e8  080051e8  000151e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800534c  0800534c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  0800534c  0800534c  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800534c  0800534c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800534c  0800534c  0001534c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005350  08005350  00015350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  2000007c  080053d0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  080053d0  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122c0  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027d1  00000000  00000000  00032365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00034b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  00035848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e3f  00000000  00000000  00036438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f600  00000000  00000000  0004f277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ba74  00000000  00000000  0005e877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea2eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003850  00000000  00000000  000ea340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	080051d0 	.word	0x080051d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	080051d0 	.word	0x080051d0

0800014c <readKeyInput>:
static uint8_t flagForLongPress3s[NUM_OF_BUTTONS];
static uint16_t counterLongPress3s[NUM_OF_BUTTONS];

int button_flag[NUM_OF_BUTTONS];
int button_longPressed_flag[NUM_OF_BUTTONS];
void readKeyInput() {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (int i=0; i < NUM_OF_BUTTONS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e0d0      	b.n	80002fa <readKeyInput+0x1ae>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000158:	4a6c      	ldr	r2, [pc, #432]	; (800030c <readKeyInput+0x1c0>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	7819      	ldrb	r1, [r3, #0]
 8000160:	4a6b      	ldr	r2, [pc, #428]	; (8000310 <readKeyInput+0x1c4>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4413      	add	r3, r2
 8000166:	460a      	mov	r2, r1
 8000168:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 800016a:	4a6a      	ldr	r2, [pc, #424]	; (8000314 <readKeyInput+0x1c8>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	4413      	add	r3, r2
 8000170:	7819      	ldrb	r1, [r3, #0]
 8000172:	4a66      	ldr	r2, [pc, #408]	; (800030c <readKeyInput+0x1c0>)
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4413      	add	r3, r2
 8000178:	460a      	mov	r2, r1
 800017a:	701a      	strb	r2, [r3, #0]

		if(i == BTN_SELECT_INDEX) debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(A1_BTN_SELECT_GPIO_Port, A1_BTN_SELECT_Pin);
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d10b      	bne.n	800019a <readKeyInput+0x4e>
 8000182:	2102      	movs	r1, #2
 8000184:	4864      	ldr	r0, [pc, #400]	; (8000318 <readKeyInput+0x1cc>)
 8000186:	f002 fe47 	bl	8002e18 <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
 800018c:	4619      	mov	r1, r3
 800018e:	4a61      	ldr	r2, [pc, #388]	; (8000314 <readKeyInput+0x1c8>)
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	4413      	add	r3, r2
 8000194:	460a      	mov	r2, r1
 8000196:	701a      	strb	r2, [r3, #0]
 8000198:	e02b      	b.n	80001f2 <readKeyInput+0xa6>
		else if(i == BTN_MODIFY_INDEX) debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(A2_BTN_MODIFY_GPIO_Port, A2_BTN_MODIFY_Pin);
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d10b      	bne.n	80001b8 <readKeyInput+0x6c>
 80001a0:	2110      	movs	r1, #16
 80001a2:	485d      	ldr	r0, [pc, #372]	; (8000318 <readKeyInput+0x1cc>)
 80001a4:	f002 fe38 	bl	8002e18 <HAL_GPIO_ReadPin>
 80001a8:	4603      	mov	r3, r0
 80001aa:	4619      	mov	r1, r3
 80001ac:	4a59      	ldr	r2, [pc, #356]	; (8000314 <readKeyInput+0x1c8>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	4413      	add	r3, r2
 80001b2:	460a      	mov	r2, r1
 80001b4:	701a      	strb	r2, [r3, #0]
 80001b6:	e01c      	b.n	80001f2 <readKeyInput+0xa6>
		else if(i == BTN_SET_INDEX) debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(A3_BTN_SET_GPIO_Port, A3_BTN_SET_Pin);
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	2b02      	cmp	r3, #2
 80001bc:	d10b      	bne.n	80001d6 <readKeyInput+0x8a>
 80001be:	2101      	movs	r1, #1
 80001c0:	4856      	ldr	r0, [pc, #344]	; (800031c <readKeyInput+0x1d0>)
 80001c2:	f002 fe29 	bl	8002e18 <HAL_GPIO_ReadPin>
 80001c6:	4603      	mov	r3, r0
 80001c8:	4619      	mov	r1, r3
 80001ca:	4a52      	ldr	r2, [pc, #328]	; (8000314 <readKeyInput+0x1c8>)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	4413      	add	r3, r2
 80001d0:	460a      	mov	r2, r1
 80001d2:	701a      	strb	r2, [r3, #0]
 80001d4:	e00d      	b.n	80001f2 <readKeyInput+0xa6>
		else if(i == BTN_PED_INDEX )debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(A0_BTN_PED_GPIO_Port, A0_BTN_PED_Pin);
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	2b03      	cmp	r3, #3
 80001da:	d10a      	bne.n	80001f2 <readKeyInput+0xa6>
 80001dc:	2101      	movs	r1, #1
 80001de:	484e      	ldr	r0, [pc, #312]	; (8000318 <readKeyInput+0x1cc>)
 80001e0:	f002 fe1a 	bl	8002e18 <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4619      	mov	r1, r3
 80001e8:	4a4a      	ldr	r2, [pc, #296]	; (8000314 <readKeyInput+0x1c8>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4413      	add	r3, r2
 80001ee:	460a      	mov	r2, r1
 80001f0:	701a      	strb	r2, [r3, #0]


		if ((debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) && (debounceButtonBuffer1[i] == debounceButtonBuffer3[i])) {
 80001f2:	4a48      	ldr	r2, [pc, #288]	; (8000314 <readKeyInput+0x1c8>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4413      	add	r3, r2
 80001f8:	781a      	ldrb	r2, [r3, #0]
 80001fa:	4944      	ldr	r1, [pc, #272]	; (800030c <readKeyInput+0x1c0>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	440b      	add	r3, r1
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	429a      	cmp	r2, r3
 8000204:	d123      	bne.n	800024e <readKeyInput+0x102>
 8000206:	4a43      	ldr	r2, [pc, #268]	; (8000314 <readKeyInput+0x1c8>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	4413      	add	r3, r2
 800020c:	781a      	ldrb	r2, [r3, #0]
 800020e:	4940      	ldr	r1, [pc, #256]	; (8000310 <readKeyInput+0x1c4>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	440b      	add	r3, r1
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	429a      	cmp	r2, r3
 8000218:	d119      	bne.n	800024e <readKeyInput+0x102>
			if (buttonBuffer[i] == BTN_RELEASED && debounceButtonBuffer1[i] == BTN_PRESSED) {
 800021a:	4a41      	ldr	r2, [pc, #260]	; (8000320 <readKeyInput+0x1d4>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4413      	add	r3, r2
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	2b01      	cmp	r3, #1
 8000224:	d10a      	bne.n	800023c <readKeyInput+0xf0>
 8000226:	4a3b      	ldr	r2, [pc, #236]	; (8000314 <readKeyInput+0x1c8>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	4413      	add	r3, r2
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d104      	bne.n	800023c <readKeyInput+0xf0>
				button_flag[i] = 1;
 8000232:	4a3c      	ldr	r2, [pc, #240]	; (8000324 <readKeyInput+0x1d8>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2101      	movs	r1, #1
 8000238:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			buttonBuffer[i] = debounceButtonBuffer1[i];
 800023c:	4a35      	ldr	r2, [pc, #212]	; (8000314 <readKeyInput+0x1c8>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4413      	add	r3, r2
 8000242:	7819      	ldrb	r1, [r3, #0]
 8000244:	4a36      	ldr	r2, [pc, #216]	; (8000320 <readKeyInput+0x1d4>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	4413      	add	r3, r2
 800024a:	460a      	mov	r2, r1
 800024c:	701a      	strb	r2, [r3, #0]
		}

		// LONGPRESSED 3S
		if (buttonBuffer[i] == BTN_PRESSED) {
 800024e:	4a34      	ldr	r2, [pc, #208]	; (8000320 <readKeyInput+0x1d4>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	4413      	add	r3, r2
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d117      	bne.n	800028a <readKeyInput+0x13e>
			if (counterLongPress3s[i] < PRESSED_DURATION_3S/TIMER_CYCLE) {
 800025a:	4a33      	ldr	r2, [pc, #204]	; (8000328 <readKeyInput+0x1dc>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000262:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000266:	d20a      	bcs.n	800027e <readKeyInput+0x132>
				counterLongPress3s[i]++;
 8000268:	4a2f      	ldr	r2, [pc, #188]	; (8000328 <readKeyInput+0x1dc>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000270:	3301      	adds	r3, #1
 8000272:	b299      	uxth	r1, r3
 8000274:	4a2c      	ldr	r2, [pc, #176]	; (8000328 <readKeyInput+0x1dc>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800027c:	e03a      	b.n	80002f4 <readKeyInput+0x1a8>
			} else {
				flagForLongPress3s[i] = 1;
 800027e:	4a2b      	ldr	r2, [pc, #172]	; (800032c <readKeyInput+0x1e0>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	4413      	add	r3, r2
 8000284:	2201      	movs	r2, #1
 8000286:	701a      	strb	r2, [r3, #0]
 8000288:	e034      	b.n	80002f4 <readKeyInput+0x1a8>
			}
		}
		else if (buttonBuffer[i] == BTN_RELEASED && flagForLongPress3s[i] == 1 ){
 800028a:	4a25      	ldr	r2, [pc, #148]	; (8000320 <readKeyInput+0x1d4>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	4413      	add	r3, r2
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	2b01      	cmp	r3, #1
 8000294:	d11a      	bne.n	80002cc <readKeyInput+0x180>
 8000296:	4a25      	ldr	r2, [pc, #148]	; (800032c <readKeyInput+0x1e0>)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4413      	add	r3, r2
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d114      	bne.n	80002cc <readKeyInput+0x180>
			button_longPressed_flag[i] = 1;
 80002a2:	4a23      	ldr	r2, [pc, #140]	; (8000330 <readKeyInput+0x1e4>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2101      	movs	r1, #1
 80002a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			button_flag[i] = 0;
 80002ac:	4a1d      	ldr	r2, [pc, #116]	; (8000324 <readKeyInput+0x1d8>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	2100      	movs	r1, #0
 80002b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterLongPress3s[i] = 0;
 80002b6:	4a1c      	ldr	r2, [pc, #112]	; (8000328 <readKeyInput+0x1dc>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2100      	movs	r1, #0
 80002bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForLongPress3s[i] = 0;
 80002c0:	4a1a      	ldr	r2, [pc, #104]	; (800032c <readKeyInput+0x1e0>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4413      	add	r3, r2
 80002c6:	2200      	movs	r2, #0
 80002c8:	701a      	strb	r2, [r3, #0]
 80002ca:	e013      	b.n	80002f4 <readKeyInput+0x1a8>
		}
		else {
			button_longPressed_flag[i] = 0;
 80002cc:	4a18      	ldr	r2, [pc, #96]	; (8000330 <readKeyInput+0x1e4>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2100      	movs	r1, #0
 80002d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			button_flag[i] = 0;
 80002d6:	4a13      	ldr	r2, [pc, #76]	; (8000324 <readKeyInput+0x1d8>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2100      	movs	r1, #0
 80002dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterLongPress3s[i] = 0;
 80002e0:	4a11      	ldr	r2, [pc, #68]	; (8000328 <readKeyInput+0x1dc>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2100      	movs	r1, #0
 80002e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForLongPress3s[i] = 0;
 80002ea:	4a10      	ldr	r2, [pc, #64]	; (800032c <readKeyInput+0x1e0>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4413      	add	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < NUM_OF_BUTTONS; i++){
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	3301      	adds	r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2b03      	cmp	r3, #3
 80002fe:	f77f af2b 	ble.w	8000158 <readKeyInput+0xc>
		}
	}
}
 8000302:	bf00      	nop
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	200000a0 	.word	0x200000a0
 8000310:	200000a4 	.word	0x200000a4
 8000314:	2000009c 	.word	0x2000009c
 8000318:	40010800 	.word	0x40010800
 800031c:	40010c00 	.word	0x40010c00
 8000320:	20000098 	.word	0x20000098
 8000324:	200000dc 	.word	0x200000dc
 8000328:	200000ac 	.word	0x200000ac
 800032c:	200000a8 	.word	0x200000a8
 8000330:	200000cc 	.word	0x200000cc

08000334 <isPressedAndReleased>:
int isPressedAndReleased(int buttonIndex) {
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	if (button_flag[buttonIndex] == 1) {
 800033c:	4a09      	ldr	r2, [pc, #36]	; (8000364 <isPressedAndReleased+0x30>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d106      	bne.n	8000356 <isPressedAndReleased+0x22>
		button_flag[buttonIndex] = 0;
 8000348:	4a06      	ldr	r2, [pc, #24]	; (8000364 <isPressedAndReleased+0x30>)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	2100      	movs	r1, #0
 800034e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000352:	2301      	movs	r3, #1
 8000354:	e000      	b.n	8000358 <isPressedAndReleased+0x24>
	}
	return 0;
 8000356:	2300      	movs	r3, #0
}
 8000358:	4618      	mov	r0, r3
 800035a:	370c      	adds	r7, #12
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	200000dc 	.word	0x200000dc

08000368 <isLongPressedAndReleased>:

int isLongPressedAndReleased(int buttonIndex){
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	if (button_longPressed_flag[buttonIndex] == 1) {
 8000370:	4a09      	ldr	r2, [pc, #36]	; (8000398 <isLongPressedAndReleased+0x30>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000378:	2b01      	cmp	r3, #1
 800037a:	d106      	bne.n	800038a <isLongPressedAndReleased+0x22>
		button_longPressed_flag[buttonIndex] = 0;
 800037c:	4a06      	ldr	r2, [pc, #24]	; (8000398 <isLongPressedAndReleased+0x30>)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	2100      	movs	r1, #0
 8000382:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000386:	2301      	movs	r3, #1
 8000388:	e000      	b.n	800038c <isLongPressedAndReleased+0x24>
	}
	return 0;
 800038a:	2300      	movs	r3, #0
}
 800038c:	4618      	mov	r0, r3
 800038e:	370c      	adds	r7, #12
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	200000cc 	.word	0x200000cc

0800039c <is_button_pressed>:

unsigned char is_button_pressed (uint8_t index) {
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	71fb      	strb	r3, [r7, #7]
	if(index >= NUM_OF_BUTTONS) return 0;
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	2b03      	cmp	r3, #3
 80003aa:	d901      	bls.n	80003b0 <is_button_pressed+0x14>
 80003ac:	2300      	movs	r3, #0
 80003ae:	e007      	b.n	80003c0 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BTN_PRESSED);
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	4a06      	ldr	r2, [pc, #24]	; (80003cc <is_button_pressed+0x30>)
 80003b4:	5cd3      	ldrb	r3, [r2, r3]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	bf0c      	ite	eq
 80003ba:	2301      	moveq	r3, #1
 80003bc:	2300      	movne	r3, #0
 80003be:	b2db      	uxtb	r3, r3
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	20000098 	.word	0x20000098

080003d0 <is_button_pressed_3s>:
unsigned char is_button_pressed_3s(unsigned char index) {
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	71fb      	strb	r3, [r7, #7]
	if(index >= NUM_OF_BUTTONS) return 0xff ;
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	2b03      	cmp	r3, #3
 80003de:	d901      	bls.n	80003e4 <is_button_pressed_3s+0x14>
 80003e0:	23ff      	movs	r3, #255	; 0xff
 80003e2:	e007      	b.n	80003f4 <is_button_pressed_3s+0x24>
	return (flagForLongPress3s[index] == 1) ;
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	4a06      	ldr	r2, [pc, #24]	; (8000400 <is_button_pressed_3s+0x30>)
 80003e8:	5cd3      	ldrb	r3, [r2, r3]
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	bf0c      	ite	eq
 80003ee:	2301      	moveq	r3, #1
 80003f0:	2300      	movne	r3, #0
 80003f2:	b2db      	uxtb	r3, r3
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	370c      	adds	r7, #12
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	200000a8 	.word	0x200000a8

08000404 <trafficLight_automatic>:
#include "main.h"
#include <stdio.h>

char message[MAX_MESSAGE_LENGTH];

void trafficLight_automatic() {
 8000404:	b580      	push	{r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af00      	add	r7, sp, #0
	switch (state) {
 800040a:	4b7b      	ldr	r3, [pc, #492]	; (80005f8 <trafficLight_automatic+0x1f4>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b04      	cmp	r3, #4
 8000410:	f200 8340 	bhi.w	8000a94 <trafficLight_automatic+0x690>
 8000414:	a201      	add	r2, pc, #4	; (adr r2, 800041c <trafficLight_automatic+0x18>)
 8000416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800041a:	bf00      	nop
 800041c:	08000431 	.word	0x08000431
 8000420:	0800048b 	.word	0x0800048b
 8000424:	08000645 	.word	0x08000645
 8000428:	08000783 	.word	0x08000783
 800042c:	08000945 	.word	0x08000945
	case IDLE:
		state = AUTO_RED1_GREEN2;
 8000430:	4b71      	ldr	r3, [pc, #452]	; (80005f8 <trafficLight_automatic+0x1f4>)
 8000432:	2201      	movs	r2, #1
 8000434:	701a      	strb	r2, [r3, #0]
		clearTrafficDisplay();
 8000436:	f001 fc3f 	bl	8001cb8 <clearTrafficDisplay>
		segment1Counter = counter_red / DIVISION_NUMBER;
 800043a:	4b70      	ldr	r3, [pc, #448]	; (80005fc <trafficLight_automatic+0x1f8>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a70      	ldr	r2, [pc, #448]	; (8000600 <trafficLight_automatic+0x1fc>)
 8000440:	fb82 1203 	smull	r1, r2, r2, r3
 8000444:	1192      	asrs	r2, r2, #6
 8000446:	17db      	asrs	r3, r3, #31
 8000448:	1ad3      	subs	r3, r2, r3
 800044a:	4a6e      	ldr	r2, [pc, #440]	; (8000604 <trafficLight_automatic+0x200>)
 800044c:	6013      	str	r3, [r2, #0]
		segment2Counter = counter_green / DIVISION_NUMBER;
 800044e:	4b6e      	ldr	r3, [pc, #440]	; (8000608 <trafficLight_automatic+0x204>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a6b      	ldr	r2, [pc, #428]	; (8000600 <trafficLight_automatic+0x1fc>)
 8000454:	fb82 1203 	smull	r1, r2, r2, r3
 8000458:	1192      	asrs	r2, r2, #6
 800045a:	17db      	asrs	r3, r3, #31
 800045c:	1ad3      	subs	r3, r2, r3
 800045e:	4a6b      	ldr	r2, [pc, #428]	; (800060c <trafficLight_automatic+0x208>)
 8000460:	6013      	str	r3, [r2, #0]
		setTimerCounter1(DURATION_1S);
 8000462:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000466:	f001 ff51 	bl	800230c <setTimerCounter1>
		counter_pedestrian = 0;
 800046a:	4b69      	ldr	r3, [pc, #420]	; (8000610 <trafficLight_automatic+0x20c>)
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!AUTOMATIC#\r\n"), 1000);
 8000470:	4968      	ldr	r1, [pc, #416]	; (8000614 <trafficLight_automatic+0x210>)
 8000472:	4869      	ldr	r0, [pc, #420]	; (8000618 <trafficLight_automatic+0x214>)
 8000474:	f004 fa72 	bl	800495c <siprintf>
 8000478:	4603      	mov	r3, r0
 800047a:	b29a      	uxth	r2, r3
 800047c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000480:	4965      	ldr	r1, [pc, #404]	; (8000618 <trafficLight_automatic+0x214>)
 8000482:	4866      	ldr	r0, [pc, #408]	; (800061c <trafficLight_automatic+0x218>)
 8000484:	f004 f8cd 	bl	8004622 <HAL_UART_Transmit>
		break;
 8000488:	e30d      	b.n	8000aa6 <trafficLight_automatic+0x6a2>
	case AUTO_RED1_GREEN2:
		displayTrafficLight(RED_LIGHT, GREEN_LIGHT);
 800048a:	2103      	movs	r1, #3
 800048c:	2001      	movs	r0, #1
 800048e:	f001 fba7 	bl	8001be0 <displayTrafficLight>
		if (isPedestrian == 1)
 8000492:	4b63      	ldr	r3, [pc, #396]	; (8000620 <trafficLight_automatic+0x21c>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	2b01      	cmp	r3, #1
 8000498:	d102      	bne.n	80004a0 <trafficLight_automatic+0x9c>
			displayPedestrianLight(PEDESTRIAN_LIGHT_GO);
 800049a:	2004      	movs	r0, #4
 800049c:	f001 fc2a 	bl	8001cf4 <displayPedestrianLight>
		if (isPedestrian == 0)
 80004a0:	4b5f      	ldr	r3, [pc, #380]	; (8000620 <trafficLight_automatic+0x21c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d102      	bne.n	80004ae <trafficLight_automatic+0xaa>
			displayPedestrianLight(PEDESTRIAN_LIGHT_OFF);
 80004a8:	2006      	movs	r0, #6
 80004aa:	f001 fc23 	bl	8001cf4 <displayPedestrianLight>
		if (isInManual == 1) {
 80004ae:	4b5d      	ldr	r3, [pc, #372]	; (8000624 <trafficLight_automatic+0x220>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	2b01      	cmp	r3, #1
 80004b4:	d10e      	bne.n	80004d4 <trafficLight_automatic+0xd0>
			state = MANUAL_RED1_GREEN2;
 80004b6:	4b50      	ldr	r3, [pc, #320]	; (80005f8 <trafficLight_automatic+0x1f4>)
 80004b8:	220d      	movs	r2, #13
 80004ba:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!MANUAL#\r\n"), 1000);
 80004bc:	495a      	ldr	r1, [pc, #360]	; (8000628 <trafficLight_automatic+0x224>)
 80004be:	4856      	ldr	r0, [pc, #344]	; (8000618 <trafficLight_automatic+0x214>)
 80004c0:	f004 fa4c 	bl	800495c <siprintf>
 80004c4:	4603      	mov	r3, r0
 80004c6:	b29a      	uxth	r2, r3
 80004c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004cc:	4952      	ldr	r1, [pc, #328]	; (8000618 <trafficLight_automatic+0x214>)
 80004ce:	4853      	ldr	r0, [pc, #332]	; (800061c <trafficLight_automatic+0x218>)
 80004d0:	f004 f8a7 	bl	8004622 <HAL_UART_Transmit>
		}
		if (isPressedAndReleased(BTN_SELECT_INDEX)) {
 80004d4:	2000      	movs	r0, #0
 80004d6:	f7ff ff2d 	bl	8000334 <isPressedAndReleased>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d014      	beq.n	800050a <trafficLight_automatic+0x106>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!MANUAL#\r\n"), 1000);
 80004e0:	4951      	ldr	r1, [pc, #324]	; (8000628 <trafficLight_automatic+0x224>)
 80004e2:	484d      	ldr	r0, [pc, #308]	; (8000618 <trafficLight_automatic+0x214>)
 80004e4:	f004 fa3a 	bl	800495c <siprintf>
 80004e8:	4603      	mov	r3, r0
 80004ea:	b29a      	uxth	r2, r3
 80004ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f0:	4949      	ldr	r1, [pc, #292]	; (8000618 <trafficLight_automatic+0x214>)
 80004f2:	484a      	ldr	r0, [pc, #296]	; (800061c <trafficLight_automatic+0x218>)
 80004f4:	f004 f895 	bl	8004622 <HAL_UART_Transmit>
			state = MANUAL_RED1_GREEN2;
 80004f8:	4b3f      	ldr	r3, [pc, #252]	; (80005f8 <trafficLight_automatic+0x1f4>)
 80004fa:	220d      	movs	r2, #13
 80004fc:	701a      	strb	r2, [r3, #0]
			isInManual = 1;
 80004fe:	4b49      	ldr	r3, [pc, #292]	; (8000624 <trafficLight_automatic+0x220>)
 8000500:	2201      	movs	r2, #1
 8000502:	601a      	str	r2, [r3, #0]
			isInAuto = 0;
 8000504:	4b49      	ldr	r3, [pc, #292]	; (800062c <trafficLight_automatic+0x228>)
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
		}
		if (is_button_pressed_3s(BTN_SELECT_INDEX)){
 800050a:	2000      	movs	r0, #0
 800050c:	f7ff ff60 	bl	80003d0 <is_button_pressed_3s>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d00a      	beq.n	800052c <trafficLight_automatic+0x128>
			clearTrafficDisplay();
 8000516:	f001 fbcf 	bl	8001cb8 <clearTrafficDisplay>
			state = CHANGE_MODE;
 800051a:	4b37      	ldr	r3, [pc, #220]	; (80005f8 <trafficLight_automatic+0x1f4>)
 800051c:	2205      	movs	r2, #5
 800051e:	701a      	strb	r2, [r3, #0]
			isInChange = 1;
 8000520:	4b43      	ldr	r3, [pc, #268]	; (8000630 <trafficLight_automatic+0x22c>)
 8000522:	2201      	movs	r2, #1
 8000524:	601a      	str	r2, [r3, #0]
			setTimerTriggerLed(DURATION_FOR_4HZ);
 8000526:	20fa      	movs	r0, #250	; 0xfa
 8000528:	f001 fed4 	bl	80022d4 <setTimerTriggerLed>
		}
		if (isPressedAndReleased(BTN_PED_INDEX)) {
 800052c:	2003      	movs	r0, #3
 800052e:	f7ff ff01 	bl	8000334 <isPressedAndReleased>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d002      	beq.n	800053e <trafficLight_automatic+0x13a>
			isPedestrian = 1;
 8000538:	4b39      	ldr	r3, [pc, #228]	; (8000620 <trafficLight_automatic+0x21c>)
 800053a:	2201      	movs	r2, #1
 800053c:	601a      	str	r2, [r3, #0]
		}


		if (countDownTimer1_counter == 1) {
 800053e:	4b3d      	ldr	r3, [pc, #244]	; (8000634 <trafficLight_automatic+0x230>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b01      	cmp	r3, #1
 8000544:	f040 82a8 	bne.w	8000a98 <trafficLight_automatic+0x694>
			int buffer1 = segment1Counter/10;
 8000548:	4b2e      	ldr	r3, [pc, #184]	; (8000604 <trafficLight_automatic+0x200>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a3a      	ldr	r2, [pc, #232]	; (8000638 <trafficLight_automatic+0x234>)
 800054e:	fb82 1203 	smull	r1, r2, r2, r3
 8000552:	1092      	asrs	r2, r2, #2
 8000554:	17db      	asrs	r3, r3, #31
 8000556:	1ad3      	subs	r3, r2, r3
 8000558:	607b      	str	r3, [r7, #4]
			int buffer2 = segment1Counter%10;
 800055a:	4b2a      	ldr	r3, [pc, #168]	; (8000604 <trafficLight_automatic+0x200>)
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	4b36      	ldr	r3, [pc, #216]	; (8000638 <trafficLight_automatic+0x234>)
 8000560:	fb83 1302 	smull	r1, r3, r3, r2
 8000564:	1099      	asrs	r1, r3, #2
 8000566:	17d3      	asrs	r3, r2, #31
 8000568:	1ac9      	subs	r1, r1, r3
 800056a:	460b      	mov	r3, r1
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	440b      	add	r3, r1
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	1ad3      	subs	r3, r2, r3
 8000574:	603b      	str	r3, [r7, #0]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#\r\n", buffer1, buffer2), 1000);
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	4930      	ldr	r1, [pc, #192]	; (800063c <trafficLight_automatic+0x238>)
 800057c:	4826      	ldr	r0, [pc, #152]	; (8000618 <trafficLight_automatic+0x214>)
 800057e:	f004 f9ed 	bl	800495c <siprintf>
 8000582:	4603      	mov	r3, r0
 8000584:	b29a      	uxth	r2, r3
 8000586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058a:	4923      	ldr	r1, [pc, #140]	; (8000618 <trafficLight_automatic+0x214>)
 800058c:	4823      	ldr	r0, [pc, #140]	; (800061c <trafficLight_automatic+0x218>)
 800058e:	f004 f848 	bl	8004622 <HAL_UART_Transmit>
			segment1Counter--;
 8000592:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <trafficLight_automatic+0x200>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	3b01      	subs	r3, #1
 8000598:	4a1a      	ldr	r2, [pc, #104]	; (8000604 <trafficLight_automatic+0x200>)
 800059a:	6013      	str	r3, [r2, #0]
			segment2Counter--;
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <trafficLight_automatic+0x208>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	3b01      	subs	r3, #1
 80005a2:	4a1a      	ldr	r2, [pc, #104]	; (800060c <trafficLight_automatic+0x208>)
 80005a4:	6013      	str	r3, [r2, #0]
			if (segment2Counter == 0) {
 80005a6:	4b19      	ldr	r3, [pc, #100]	; (800060c <trafficLight_automatic+0x208>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d11f      	bne.n	80005ee <trafficLight_automatic+0x1ea>
				segment2Counter = counter_yellow / DIVISION_NUMBER;
 80005ae:	4b24      	ldr	r3, [pc, #144]	; (8000640 <trafficLight_automatic+0x23c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a13      	ldr	r2, [pc, #76]	; (8000600 <trafficLight_automatic+0x1fc>)
 80005b4:	fb82 1203 	smull	r1, r2, r2, r3
 80005b8:	1192      	asrs	r2, r2, #6
 80005ba:	17db      	asrs	r3, r3, #31
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	4a13      	ldr	r2, [pc, #76]	; (800060c <trafficLight_automatic+0x208>)
 80005c0:	6013      	str	r3, [r2, #0]
				state = AUTO_RED1_YELLOW2;
 80005c2:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <trafficLight_automatic+0x1f4>)
 80005c4:	2202      	movs	r2, #2
 80005c6:	701a      	strb	r2, [r3, #0]
				//buzzer_warning = 0;

				if (isPedestrian == 1) {
 80005c8:	4b15      	ldr	r3, [pc, #84]	; (8000620 <trafficLight_automatic+0x21c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d10e      	bne.n	80005ee <trafficLight_automatic+0x1ea>
					counter_pedestrian++;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <trafficLight_automatic+0x20c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <trafficLight_automatic+0x20c>)
 80005d8:	6013      	str	r3, [r2, #0]
					if (counter_pedestrian == PEDESTRIAN_LIGHT_CYCLE) {
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <trafficLight_automatic+0x20c>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b08      	cmp	r3, #8
 80005e0:	d105      	bne.n	80005ee <trafficLight_automatic+0x1ea>
						counter_pedestrian = 0;
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <trafficLight_automatic+0x20c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
						isPedestrian = 0;
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <trafficLight_automatic+0x21c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
					}
				}
			}

			setTimerCounter1(DURATION_1S);
 80005ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f2:	f001 fe8b 	bl	800230c <setTimerCounter1>
		}
		break;
 80005f6:	e24f      	b.n	8000a98 <trafficLight_automatic+0x694>
 80005f8:	20000140 	.word	0x20000140
 80005fc:	20000000 	.word	0x20000000
 8000600:	10624dd3 	.word	0x10624dd3
 8000604:	20000130 	.word	0x20000130
 8000608:	20000008 	.word	0x20000008
 800060c:	20000138 	.word	0x20000138
 8000610:	20000160 	.word	0x20000160
 8000614:	080051e8 	.word	0x080051e8
 8000618:	200000ec 	.word	0x200000ec
 800061c:	200001f4 	.word	0x200001f4
 8000620:	20000134 	.word	0x20000134
 8000624:	20000120 	.word	0x20000120
 8000628:	080051f8 	.word	0x080051f8
 800062c:	20000144 	.word	0x20000144
 8000630:	20000148 	.word	0x20000148
 8000634:	20000240 	.word	0x20000240
 8000638:	66666667 	.word	0x66666667
 800063c:	08005204 	.word	0x08005204
 8000640:	20000004 	.word	0x20000004
	case AUTO_RED1_YELLOW2:
		displayTrafficLight(RED_LIGHT, YELLOW_LIGHT);
 8000644:	2102      	movs	r1, #2
 8000646:	2001      	movs	r0, #1
 8000648:	f001 faca 	bl	8001be0 <displayTrafficLight>
		if (isPedestrian == 1)
 800064c:	4bab      	ldr	r3, [pc, #684]	; (80008fc <trafficLight_automatic+0x4f8>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d102      	bne.n	800065a <trafficLight_automatic+0x256>
			displayPedestrianLight(PEDESTRIAN_LIGHT_GO);
 8000654:	2004      	movs	r0, #4
 8000656:	f001 fb4d 	bl	8001cf4 <displayPedestrianLight>
		if (isPedestrian == 0)
 800065a:	4ba8      	ldr	r3, [pc, #672]	; (80008fc <trafficLight_automatic+0x4f8>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d102      	bne.n	8000668 <trafficLight_automatic+0x264>
			displayPedestrianLight(PEDESTRIAN_LIGHT_OFF);
 8000662:	2006      	movs	r0, #6
 8000664:	f001 fb46 	bl	8001cf4 <displayPedestrianLight>
		if (isPressedAndReleased(BTN_SELECT_INDEX)) {
 8000668:	2000      	movs	r0, #0
 800066a:	f7ff fe63 	bl	8000334 <isPressedAndReleased>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d005      	beq.n	8000680 <trafficLight_automatic+0x27c>
			isInManual = 1;
 8000674:	4ba2      	ldr	r3, [pc, #648]	; (8000900 <trafficLight_automatic+0x4fc>)
 8000676:	2201      	movs	r2, #1
 8000678:	601a      	str	r2, [r3, #0]
			isInAuto = 0;
 800067a:	4ba2      	ldr	r3, [pc, #648]	; (8000904 <trafficLight_automatic+0x500>)
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
		}
		if (isPressedAndReleased(BTN_PED_INDEX)) {
 8000680:	2003      	movs	r0, #3
 8000682:	f7ff fe57 	bl	8000334 <isPressedAndReleased>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d002      	beq.n	8000692 <trafficLight_automatic+0x28e>
			isPedestrian = 1;
 800068c:	4b9b      	ldr	r3, [pc, #620]	; (80008fc <trafficLight_automatic+0x4f8>)
 800068e:	2201      	movs	r2, #1
 8000690:	601a      	str	r2, [r3, #0]
		}

		if (is_button_pressed_3s(BTN_SELECT_INDEX)){
 8000692:	2000      	movs	r0, #0
 8000694:	f7ff fe9c 	bl	80003d0 <is_button_pressed_3s>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d00a      	beq.n	80006b4 <trafficLight_automatic+0x2b0>
			clearTrafficDisplay();
 800069e:	f001 fb0b 	bl	8001cb8 <clearTrafficDisplay>
			state = CHANGE_MODE;
 80006a2:	4b99      	ldr	r3, [pc, #612]	; (8000908 <trafficLight_automatic+0x504>)
 80006a4:	2205      	movs	r2, #5
 80006a6:	701a      	strb	r2, [r3, #0]
			isInChange = 1;
 80006a8:	4b98      	ldr	r3, [pc, #608]	; (800090c <trafficLight_automatic+0x508>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	601a      	str	r2, [r3, #0]
			setTimerTriggerLed(DURATION_FOR_4HZ);
 80006ae:	20fa      	movs	r0, #250	; 0xfa
 80006b0:	f001 fe10 	bl	80022d4 <setTimerTriggerLed>
		}
		if (countDownTimer1_counter == 1) {
 80006b4:	4b96      	ldr	r3, [pc, #600]	; (8000910 <trafficLight_automatic+0x50c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	f040 81ef 	bne.w	8000a9c <trafficLight_automatic+0x698>
			int buffer1 = segment1Counter/10;
 80006be:	4b95      	ldr	r3, [pc, #596]	; (8000914 <trafficLight_automatic+0x510>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a95      	ldr	r2, [pc, #596]	; (8000918 <trafficLight_automatic+0x514>)
 80006c4:	fb82 1203 	smull	r1, r2, r2, r3
 80006c8:	1092      	asrs	r2, r2, #2
 80006ca:	17db      	asrs	r3, r3, #31
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	60fb      	str	r3, [r7, #12]
			int buffer2 = segment1Counter%10;
 80006d0:	4b90      	ldr	r3, [pc, #576]	; (8000914 <trafficLight_automatic+0x510>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	4b90      	ldr	r3, [pc, #576]	; (8000918 <trafficLight_automatic+0x514>)
 80006d6:	fb83 1302 	smull	r1, r3, r3, r2
 80006da:	1099      	asrs	r1, r3, #2
 80006dc:	17d3      	asrs	r3, r2, #31
 80006de:	1ac9      	subs	r1, r1, r3
 80006e0:	460b      	mov	r3, r1
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	440b      	add	r3, r1
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	60bb      	str	r3, [r7, #8]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#\r\n", buffer1, buffer2), 1000);
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	68fa      	ldr	r2, [r7, #12]
 80006f0:	498a      	ldr	r1, [pc, #552]	; (800091c <trafficLight_automatic+0x518>)
 80006f2:	488b      	ldr	r0, [pc, #556]	; (8000920 <trafficLight_automatic+0x51c>)
 80006f4:	f004 f932 	bl	800495c <siprintf>
 80006f8:	4603      	mov	r3, r0
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000700:	4987      	ldr	r1, [pc, #540]	; (8000920 <trafficLight_automatic+0x51c>)
 8000702:	4888      	ldr	r0, [pc, #544]	; (8000924 <trafficLight_automatic+0x520>)
 8000704:	f003 ff8d 	bl	8004622 <HAL_UART_Transmit>
			segment1Counter--;
 8000708:	4b82      	ldr	r3, [pc, #520]	; (8000914 <trafficLight_automatic+0x510>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	3b01      	subs	r3, #1
 800070e:	4a81      	ldr	r2, [pc, #516]	; (8000914 <trafficLight_automatic+0x510>)
 8000710:	6013      	str	r3, [r2, #0]
			segment2Counter--;
 8000712:	4b85      	ldr	r3, [pc, #532]	; (8000928 <trafficLight_automatic+0x524>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	3b01      	subs	r3, #1
 8000718:	4a83      	ldr	r2, [pc, #524]	; (8000928 <trafficLight_automatic+0x524>)
 800071a:	6013      	str	r3, [r2, #0]
			if (segment2Counter <= 0) {
 800071c:	4b82      	ldr	r3, [pc, #520]	; (8000928 <trafficLight_automatic+0x524>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dc29      	bgt.n	8000778 <trafficLight_automatic+0x374>
				segment1Counter = counter_green / DIVISION_NUMBER;
 8000724:	4b81      	ldr	r3, [pc, #516]	; (800092c <trafficLight_automatic+0x528>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a81      	ldr	r2, [pc, #516]	; (8000930 <trafficLight_automatic+0x52c>)
 800072a:	fb82 1203 	smull	r1, r2, r2, r3
 800072e:	1192      	asrs	r2, r2, #6
 8000730:	17db      	asrs	r3, r3, #31
 8000732:	1ad3      	subs	r3, r2, r3
 8000734:	4a77      	ldr	r2, [pc, #476]	; (8000914 <trafficLight_automatic+0x510>)
 8000736:	6013      	str	r3, [r2, #0]
				segment2Counter = counter_red / DIVISION_NUMBER;
 8000738:	4b7e      	ldr	r3, [pc, #504]	; (8000934 <trafficLight_automatic+0x530>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a7c      	ldr	r2, [pc, #496]	; (8000930 <trafficLight_automatic+0x52c>)
 800073e:	fb82 1203 	smull	r1, r2, r2, r3
 8000742:	1192      	asrs	r2, r2, #6
 8000744:	17db      	asrs	r3, r3, #31
 8000746:	1ad3      	subs	r3, r2, r3
 8000748:	4a77      	ldr	r2, [pc, #476]	; (8000928 <trafficLight_automatic+0x524>)
 800074a:	6013      	str	r3, [r2, #0]
				state = AUTO_GREEN1_RED2;
 800074c:	4b6e      	ldr	r3, [pc, #440]	; (8000908 <trafficLight_automatic+0x504>)
 800074e:	2203      	movs	r2, #3
 8000750:	701a      	strb	r2, [r3, #0]

				if (isPedestrian == 1) {
 8000752:	4b6a      	ldr	r3, [pc, #424]	; (80008fc <trafficLight_automatic+0x4f8>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d10e      	bne.n	8000778 <trafficLight_automatic+0x374>
					counter_pedestrian++;
 800075a:	4b77      	ldr	r3, [pc, #476]	; (8000938 <trafficLight_automatic+0x534>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	3301      	adds	r3, #1
 8000760:	4a75      	ldr	r2, [pc, #468]	; (8000938 <trafficLight_automatic+0x534>)
 8000762:	6013      	str	r3, [r2, #0]
					if (counter_pedestrian == PEDESTRIAN_LIGHT_CYCLE) {
 8000764:	4b74      	ldr	r3, [pc, #464]	; (8000938 <trafficLight_automatic+0x534>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b08      	cmp	r3, #8
 800076a:	d105      	bne.n	8000778 <trafficLight_automatic+0x374>
						counter_pedestrian = 0;
 800076c:	4b72      	ldr	r3, [pc, #456]	; (8000938 <trafficLight_automatic+0x534>)
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
						isPedestrian = 0;
 8000772:	4b62      	ldr	r3, [pc, #392]	; (80008fc <trafficLight_automatic+0x4f8>)
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
					}
				}
			}

			setTimerCounter1(DURATION_1S);
 8000778:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800077c:	f001 fdc6 	bl	800230c <setTimerCounter1>
		}
		break;
 8000780:	e18c      	b.n	8000a9c <trafficLight_automatic+0x698>
	case AUTO_GREEN1_RED2:
		displayTrafficLight(GREEN_LIGHT, RED_LIGHT);
 8000782:	2101      	movs	r1, #1
 8000784:	2003      	movs	r0, #3
 8000786:	f001 fa2b 	bl	8001be0 <displayTrafficLight>
		if (isPedestrian == 1)
 800078a:	4b5c      	ldr	r3, [pc, #368]	; (80008fc <trafficLight_automatic+0x4f8>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d102      	bne.n	8000798 <trafficLight_automatic+0x394>
			displayPedestrianLight(PEDESTRIAN_LIGHT_STOP);
 8000792:	2005      	movs	r0, #5
 8000794:	f001 faae 	bl	8001cf4 <displayPedestrianLight>
		if (isPedestrian == 0)
 8000798:	4b58      	ldr	r3, [pc, #352]	; (80008fc <trafficLight_automatic+0x4f8>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d102      	bne.n	80007a6 <trafficLight_automatic+0x3a2>
			displayPedestrianLight(PEDESTRIAN_LIGHT_OFF);
 80007a0:	2006      	movs	r0, #6
 80007a2:	f001 faa7 	bl	8001cf4 <displayPedestrianLight>
		if (isInManual == 1) {
 80007a6:	4b56      	ldr	r3, [pc, #344]	; (8000900 <trafficLight_automatic+0x4fc>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d10e      	bne.n	80007cc <trafficLight_automatic+0x3c8>
			state = MANUAL_GREEN1_RED2;
 80007ae:	4b56      	ldr	r3, [pc, #344]	; (8000908 <trafficLight_automatic+0x504>)
 80007b0:	220f      	movs	r2, #15
 80007b2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!MANUAL#\r\n"), 1000);
 80007b4:	4961      	ldr	r1, [pc, #388]	; (800093c <trafficLight_automatic+0x538>)
 80007b6:	485a      	ldr	r0, [pc, #360]	; (8000920 <trafficLight_automatic+0x51c>)
 80007b8:	f004 f8d0 	bl	800495c <siprintf>
 80007bc:	4603      	mov	r3, r0
 80007be:	b29a      	uxth	r2, r3
 80007c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c4:	4956      	ldr	r1, [pc, #344]	; (8000920 <trafficLight_automatic+0x51c>)
 80007c6:	4857      	ldr	r0, [pc, #348]	; (8000924 <trafficLight_automatic+0x520>)
 80007c8:	f003 ff2b 	bl	8004622 <HAL_UART_Transmit>
		}
		if (isPressedAndReleased(BTN_SELECT_INDEX) && !isLongPressedAndReleased(BTN_SELECT_INDEX)) {
 80007cc:	2000      	movs	r0, #0
 80007ce:	f7ff fdb1 	bl	8000334 <isPressedAndReleased>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d01a      	beq.n	800080e <trafficLight_automatic+0x40a>
 80007d8:	2000      	movs	r0, #0
 80007da:	f7ff fdc5 	bl	8000368 <isLongPressedAndReleased>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d114      	bne.n	800080e <trafficLight_automatic+0x40a>
			state = MANUAL_GREEN1_RED2;
 80007e4:	4b48      	ldr	r3, [pc, #288]	; (8000908 <trafficLight_automatic+0x504>)
 80007e6:	220f      	movs	r2, #15
 80007e8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!MANUAL#\r\n"), 1000);
 80007ea:	4954      	ldr	r1, [pc, #336]	; (800093c <trafficLight_automatic+0x538>)
 80007ec:	484c      	ldr	r0, [pc, #304]	; (8000920 <trafficLight_automatic+0x51c>)
 80007ee:	f004 f8b5 	bl	800495c <siprintf>
 80007f2:	4603      	mov	r3, r0
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007fa:	4949      	ldr	r1, [pc, #292]	; (8000920 <trafficLight_automatic+0x51c>)
 80007fc:	4849      	ldr	r0, [pc, #292]	; (8000924 <trafficLight_automatic+0x520>)
 80007fe:	f003 ff10 	bl	8004622 <HAL_UART_Transmit>
			isInManual = 1;
 8000802:	4b3f      	ldr	r3, [pc, #252]	; (8000900 <trafficLight_automatic+0x4fc>)
 8000804:	2201      	movs	r2, #1
 8000806:	601a      	str	r2, [r3, #0]
			isInAuto = 0;
 8000808:	4b3e      	ldr	r3, [pc, #248]	; (8000904 <trafficLight_automatic+0x500>)
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
		}
		if (is_button_pressed_3s(BTN_SELECT_INDEX)){
 800080e:	2000      	movs	r0, #0
 8000810:	f7ff fdde 	bl	80003d0 <is_button_pressed_3s>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d00a      	beq.n	8000830 <trafficLight_automatic+0x42c>
			clearTrafficDisplay();
 800081a:	f001 fa4d 	bl	8001cb8 <clearTrafficDisplay>
			state = CHANGE_MODE;
 800081e:	4b3a      	ldr	r3, [pc, #232]	; (8000908 <trafficLight_automatic+0x504>)
 8000820:	2205      	movs	r2, #5
 8000822:	701a      	strb	r2, [r3, #0]
			isInChange = 1;
 8000824:	4b39      	ldr	r3, [pc, #228]	; (800090c <trafficLight_automatic+0x508>)
 8000826:	2201      	movs	r2, #1
 8000828:	601a      	str	r2, [r3, #0]
			setTimerTriggerLed(DURATION_FOR_4HZ);
 800082a:	20fa      	movs	r0, #250	; 0xfa
 800082c:	f001 fd52 	bl	80022d4 <setTimerTriggerLed>
		}

		if (isPressedAndReleased(BTN_PED_INDEX)) {
 8000830:	2003      	movs	r0, #3
 8000832:	f7ff fd7f 	bl	8000334 <isPressedAndReleased>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d002      	beq.n	8000842 <trafficLight_automatic+0x43e>
			isPedestrian = 1;
 800083c:	4b2f      	ldr	r3, [pc, #188]	; (80008fc <trafficLight_automatic+0x4f8>)
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]
		}
		if (countDownTimer1_counter == 1) {
 8000842:	4b33      	ldr	r3, [pc, #204]	; (8000910 <trafficLight_automatic+0x50c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b01      	cmp	r3, #1
 8000848:	f040 812a 	bne.w	8000aa0 <trafficLight_automatic+0x69c>
			int buffer1 = segment1Counter/10;
 800084c:	4b31      	ldr	r3, [pc, #196]	; (8000914 <trafficLight_automatic+0x510>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a31      	ldr	r2, [pc, #196]	; (8000918 <trafficLight_automatic+0x514>)
 8000852:	fb82 1203 	smull	r1, r2, r2, r3
 8000856:	1092      	asrs	r2, r2, #2
 8000858:	17db      	asrs	r3, r3, #31
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	617b      	str	r3, [r7, #20]
			int buffer2 = segment1Counter%10;
 800085e:	4b2d      	ldr	r3, [pc, #180]	; (8000914 <trafficLight_automatic+0x510>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	4b2d      	ldr	r3, [pc, #180]	; (8000918 <trafficLight_automatic+0x514>)
 8000864:	fb83 1302 	smull	r1, r3, r3, r2
 8000868:	1099      	asrs	r1, r3, #2
 800086a:	17d3      	asrs	r3, r2, #31
 800086c:	1ac9      	subs	r1, r1, r3
 800086e:	460b      	mov	r3, r1
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	440b      	add	r3, r1
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	613b      	str	r3, [r7, #16]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#\r\n", buffer1, buffer2), 1000);
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	4927      	ldr	r1, [pc, #156]	; (800091c <trafficLight_automatic+0x518>)
 8000880:	4827      	ldr	r0, [pc, #156]	; (8000920 <trafficLight_automatic+0x51c>)
 8000882:	f004 f86b 	bl	800495c <siprintf>
 8000886:	4603      	mov	r3, r0
 8000888:	b29a      	uxth	r2, r3
 800088a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088e:	4924      	ldr	r1, [pc, #144]	; (8000920 <trafficLight_automatic+0x51c>)
 8000890:	4824      	ldr	r0, [pc, #144]	; (8000924 <trafficLight_automatic+0x520>)
 8000892:	f003 fec6 	bl	8004622 <HAL_UART_Transmit>
			segment1Counter--;
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <trafficLight_automatic+0x510>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	3b01      	subs	r3, #1
 800089c:	4a1d      	ldr	r2, [pc, #116]	; (8000914 <trafficLight_automatic+0x510>)
 800089e:	6013      	str	r3, [r2, #0]
			segment2Counter--;
 80008a0:	4b21      	ldr	r3, [pc, #132]	; (8000928 <trafficLight_automatic+0x524>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	3b01      	subs	r3, #1
 80008a6:	4a20      	ldr	r2, [pc, #128]	; (8000928 <trafficLight_automatic+0x524>)
 80008a8:	6013      	str	r3, [r2, #0]
			if (segment1Counter <= 0) {
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <trafficLight_automatic+0x510>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	dc1f      	bgt.n	80008f2 <trafficLight_automatic+0x4ee>
				segment1Counter = counter_yellow / DIVISION_NUMBER;
 80008b2:	4b23      	ldr	r3, [pc, #140]	; (8000940 <trafficLight_automatic+0x53c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a1e      	ldr	r2, [pc, #120]	; (8000930 <trafficLight_automatic+0x52c>)
 80008b8:	fb82 1203 	smull	r1, r2, r2, r3
 80008bc:	1192      	asrs	r2, r2, #6
 80008be:	17db      	asrs	r3, r3, #31
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	4a14      	ldr	r2, [pc, #80]	; (8000914 <trafficLight_automatic+0x510>)
 80008c4:	6013      	str	r3, [r2, #0]
				state = AUTO_YELLOW1_RED2;
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <trafficLight_automatic+0x504>)
 80008c8:	2204      	movs	r2, #4
 80008ca:	701a      	strb	r2, [r3, #0]

				if (isPedestrian == 1) {
 80008cc:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <trafficLight_automatic+0x4f8>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d10e      	bne.n	80008f2 <trafficLight_automatic+0x4ee>
					counter_pedestrian++;
 80008d4:	4b18      	ldr	r3, [pc, #96]	; (8000938 <trafficLight_automatic+0x534>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	3301      	adds	r3, #1
 80008da:	4a17      	ldr	r2, [pc, #92]	; (8000938 <trafficLight_automatic+0x534>)
 80008dc:	6013      	str	r3, [r2, #0]
					if (counter_pedestrian == PEDESTRIAN_LIGHT_CYCLE) {
 80008de:	4b16      	ldr	r3, [pc, #88]	; (8000938 <trafficLight_automatic+0x534>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b08      	cmp	r3, #8
 80008e4:	d105      	bne.n	80008f2 <trafficLight_automatic+0x4ee>
						counter_pedestrian = 0;
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <trafficLight_automatic+0x534>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
						isPedestrian = 0;
 80008ec:	4b03      	ldr	r3, [pc, #12]	; (80008fc <trafficLight_automatic+0x4f8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
					}
				}
			}

			setTimerCounter1(DURATION_1S);
 80008f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008f6:	f001 fd09 	bl	800230c <setTimerCounter1>
		}
		break;
 80008fa:	e0d1      	b.n	8000aa0 <trafficLight_automatic+0x69c>
 80008fc:	20000134 	.word	0x20000134
 8000900:	20000120 	.word	0x20000120
 8000904:	20000144 	.word	0x20000144
 8000908:	20000140 	.word	0x20000140
 800090c:	20000148 	.word	0x20000148
 8000910:	20000240 	.word	0x20000240
 8000914:	20000130 	.word	0x20000130
 8000918:	66666667 	.word	0x66666667
 800091c:	08005204 	.word	0x08005204
 8000920:	200000ec 	.word	0x200000ec
 8000924:	200001f4 	.word	0x200001f4
 8000928:	20000138 	.word	0x20000138
 800092c:	20000008 	.word	0x20000008
 8000930:	10624dd3 	.word	0x10624dd3
 8000934:	20000000 	.word	0x20000000
 8000938:	20000160 	.word	0x20000160
 800093c:	080051f8 	.word	0x080051f8
 8000940:	20000004 	.word	0x20000004
	case AUTO_YELLOW1_RED2:
		displayTrafficLight(YELLOW_LIGHT, RED_LIGHT);
 8000944:	2101      	movs	r1, #1
 8000946:	2002      	movs	r0, #2
 8000948:	f001 f94a 	bl	8001be0 <displayTrafficLight>
		if (isPedestrian == 1)
 800094c:	4b58      	ldr	r3, [pc, #352]	; (8000ab0 <trafficLight_automatic+0x6ac>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d102      	bne.n	800095a <trafficLight_automatic+0x556>
			displayPedestrianLight(PEDESTRIAN_LIGHT_STOP);
 8000954:	2005      	movs	r0, #5
 8000956:	f001 f9cd 	bl	8001cf4 <displayPedestrianLight>
		if (isPedestrian == 0)
 800095a:	4b55      	ldr	r3, [pc, #340]	; (8000ab0 <trafficLight_automatic+0x6ac>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d102      	bne.n	8000968 <trafficLight_automatic+0x564>
			displayPedestrianLight(PEDESTRIAN_LIGHT_OFF);
 8000962:	2006      	movs	r0, #6
 8000964:	f001 f9c6 	bl	8001cf4 <displayPedestrianLight>
		if (isPressedAndReleased(BTN_SELECT_INDEX)) {
 8000968:	2000      	movs	r0, #0
 800096a:	f7ff fce3 	bl	8000334 <isPressedAndReleased>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d005      	beq.n	8000980 <trafficLight_automatic+0x57c>
			isInManual = 1;
 8000974:	4b4f      	ldr	r3, [pc, #316]	; (8000ab4 <trafficLight_automatic+0x6b0>)
 8000976:	2201      	movs	r2, #1
 8000978:	601a      	str	r2, [r3, #0]
			isInAuto = 0;
 800097a:	4b4f      	ldr	r3, [pc, #316]	; (8000ab8 <trafficLight_automatic+0x6b4>)
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
		}
		if (is_button_pressed_3s(BTN_SELECT_INDEX)){
 8000980:	2000      	movs	r0, #0
 8000982:	f7ff fd25 	bl	80003d0 <is_button_pressed_3s>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d00a      	beq.n	80009a2 <trafficLight_automatic+0x59e>
			clearTrafficDisplay();
 800098c:	f001 f994 	bl	8001cb8 <clearTrafficDisplay>
			state = CHANGE_MODE;
 8000990:	4b4a      	ldr	r3, [pc, #296]	; (8000abc <trafficLight_automatic+0x6b8>)
 8000992:	2205      	movs	r2, #5
 8000994:	701a      	strb	r2, [r3, #0]
			isInChange = 1;
 8000996:	4b4a      	ldr	r3, [pc, #296]	; (8000ac0 <trafficLight_automatic+0x6bc>)
 8000998:	2201      	movs	r2, #1
 800099a:	601a      	str	r2, [r3, #0]
			setTimerTriggerLed(DURATION_FOR_4HZ);
 800099c:	20fa      	movs	r0, #250	; 0xfa
 800099e:	f001 fc99 	bl	80022d4 <setTimerTriggerLed>
		}

		if (isPressedAndReleased(BTN_PED_INDEX)) {
 80009a2:	2003      	movs	r0, #3
 80009a4:	f7ff fcc6 	bl	8000334 <isPressedAndReleased>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d002      	beq.n	80009b4 <trafficLight_automatic+0x5b0>
			isPedestrian = 1;
 80009ae:	4b40      	ldr	r3, [pc, #256]	; (8000ab0 <trafficLight_automatic+0x6ac>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	601a      	str	r2, [r3, #0]
		}

		if (isPedestrian == 1) {
 80009b4:	4b3e      	ldr	r3, [pc, #248]	; (8000ab0 <trafficLight_automatic+0x6ac>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d102      	bne.n	80009c2 <trafficLight_automatic+0x5be>
			buzzer_warning = 1;
 80009bc:	4b41      	ldr	r3, [pc, #260]	; (8000ac4 <trafficLight_automatic+0x6c0>)
 80009be:	2201      	movs	r2, #1
 80009c0:	601a      	str	r2, [r3, #0]
		}

		if (countDownTimer1_counter == 1) {
 80009c2:	4b41      	ldr	r3, [pc, #260]	; (8000ac8 <trafficLight_automatic+0x6c4>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d16c      	bne.n	8000aa4 <trafficLight_automatic+0x6a0>
			int buffer1 = segment1Counter/10;
 80009ca:	4b40      	ldr	r3, [pc, #256]	; (8000acc <trafficLight_automatic+0x6c8>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a40      	ldr	r2, [pc, #256]	; (8000ad0 <trafficLight_automatic+0x6cc>)
 80009d0:	fb82 1203 	smull	r1, r2, r2, r3
 80009d4:	1092      	asrs	r2, r2, #2
 80009d6:	17db      	asrs	r3, r3, #31
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	61fb      	str	r3, [r7, #28]
			int buffer2 = segment1Counter%10;
 80009dc:	4b3b      	ldr	r3, [pc, #236]	; (8000acc <trafficLight_automatic+0x6c8>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b3b      	ldr	r3, [pc, #236]	; (8000ad0 <trafficLight_automatic+0x6cc>)
 80009e2:	fb83 1302 	smull	r1, r3, r3, r2
 80009e6:	1099      	asrs	r1, r3, #2
 80009e8:	17d3      	asrs	r3, r2, #31
 80009ea:	1ac9      	subs	r1, r1, r3
 80009ec:	460b      	mov	r3, r1
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	440b      	add	r3, r1
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	61bb      	str	r3, [r7, #24]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#\r\n", buffer1, buffer2), 1000);
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	69fa      	ldr	r2, [r7, #28]
 80009fc:	4935      	ldr	r1, [pc, #212]	; (8000ad4 <trafficLight_automatic+0x6d0>)
 80009fe:	4836      	ldr	r0, [pc, #216]	; (8000ad8 <trafficLight_automatic+0x6d4>)
 8000a00:	f003 ffac 	bl	800495c <siprintf>
 8000a04:	4603      	mov	r3, r0
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0c:	4932      	ldr	r1, [pc, #200]	; (8000ad8 <trafficLight_automatic+0x6d4>)
 8000a0e:	4833      	ldr	r0, [pc, #204]	; (8000adc <trafficLight_automatic+0x6d8>)
 8000a10:	f003 fe07 	bl	8004622 <HAL_UART_Transmit>
			segment1Counter--;
 8000a14:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <trafficLight_automatic+0x6c8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	4a2c      	ldr	r2, [pc, #176]	; (8000acc <trafficLight_automatic+0x6c8>)
 8000a1c:	6013      	str	r3, [r2, #0]
			segment2Counter--;
 8000a1e:	4b30      	ldr	r3, [pc, #192]	; (8000ae0 <trafficLight_automatic+0x6dc>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	4a2e      	ldr	r2, [pc, #184]	; (8000ae0 <trafficLight_automatic+0x6dc>)
 8000a26:	6013      	str	r3, [r2, #0]
			if (segment1Counter <= 0) {
 8000a28:	4b28      	ldr	r3, [pc, #160]	; (8000acc <trafficLight_automatic+0x6c8>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	dc2c      	bgt.n	8000a8a <trafficLight_automatic+0x686>
				segment1Counter = counter_red / DIVISION_NUMBER;
 8000a30:	4b2c      	ldr	r3, [pc, #176]	; (8000ae4 <trafficLight_automatic+0x6e0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a2c      	ldr	r2, [pc, #176]	; (8000ae8 <trafficLight_automatic+0x6e4>)
 8000a36:	fb82 1203 	smull	r1, r2, r2, r3
 8000a3a:	1192      	asrs	r2, r2, #6
 8000a3c:	17db      	asrs	r3, r3, #31
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	4a22      	ldr	r2, [pc, #136]	; (8000acc <trafficLight_automatic+0x6c8>)
 8000a42:	6013      	str	r3, [r2, #0]
				segment2Counter = counter_green / DIVISION_NUMBER;
 8000a44:	4b29      	ldr	r3, [pc, #164]	; (8000aec <trafficLight_automatic+0x6e8>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a27      	ldr	r2, [pc, #156]	; (8000ae8 <trafficLight_automatic+0x6e4>)
 8000a4a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a4e:	1192      	asrs	r2, r2, #6
 8000a50:	17db      	asrs	r3, r3, #31
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	4a22      	ldr	r2, [pc, #136]	; (8000ae0 <trafficLight_automatic+0x6dc>)
 8000a56:	6013      	str	r3, [r2, #0]
				state = AUTO_RED1_GREEN2;
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <trafficLight_automatic+0x6b8>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	701a      	strb	r2, [r3, #0]
				buzzer_warning = 0;
 8000a5e:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <trafficLight_automatic+0x6c0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]

				if (isPedestrian == 1) {
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <trafficLight_automatic+0x6ac>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d10e      	bne.n	8000a8a <trafficLight_automatic+0x686>
					counter_pedestrian++;
 8000a6c:	4b20      	ldr	r3, [pc, #128]	; (8000af0 <trafficLight_automatic+0x6ec>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	3301      	adds	r3, #1
 8000a72:	4a1f      	ldr	r2, [pc, #124]	; (8000af0 <trafficLight_automatic+0x6ec>)
 8000a74:	6013      	str	r3, [r2, #0]
					if (counter_pedestrian == PEDESTRIAN_LIGHT_CYCLE) {
 8000a76:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <trafficLight_automatic+0x6ec>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2b08      	cmp	r3, #8
 8000a7c:	d105      	bne.n	8000a8a <trafficLight_automatic+0x686>
						counter_pedestrian = 0;
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <trafficLight_automatic+0x6ec>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
						isPedestrian = 0;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <trafficLight_automatic+0x6ac>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
					}
				}
			}
			setTimerCounter1(DURATION_1S);
 8000a8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a8e:	f001 fc3d 	bl	800230c <setTimerCounter1>
		}

		break;
 8000a92:	e007      	b.n	8000aa4 <trafficLight_automatic+0x6a0>
	default:
		break;
 8000a94:	bf00      	nop
 8000a96:	e006      	b.n	8000aa6 <trafficLight_automatic+0x6a2>
		break;
 8000a98:	bf00      	nop
 8000a9a:	e004      	b.n	8000aa6 <trafficLight_automatic+0x6a2>
		break;
 8000a9c:	bf00      	nop
 8000a9e:	e002      	b.n	8000aa6 <trafficLight_automatic+0x6a2>
		break;
 8000aa0:	bf00      	nop
 8000aa2:	e000      	b.n	8000aa6 <trafficLight_automatic+0x6a2>
		break;
 8000aa4:	bf00      	nop
	}
}
 8000aa6:	bf00      	nop
 8000aa8:	3720      	adds	r7, #32
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000134 	.word	0x20000134
 8000ab4:	20000120 	.word	0x20000120
 8000ab8:	20000144 	.word	0x20000144
 8000abc:	20000140 	.word	0x20000140
 8000ac0:	20000148 	.word	0x20000148
 8000ac4:	200000b4 	.word	0x200000b4
 8000ac8:	20000240 	.word	0x20000240
 8000acc:	20000130 	.word	0x20000130
 8000ad0:	66666667 	.word	0x66666667
 8000ad4:	08005204 	.word	0x08005204
 8000ad8:	200000ec 	.word	0x200000ec
 8000adc:	200001f4 	.word	0x200001f4
 8000ae0:	20000138 	.word	0x20000138
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	10624dd3 	.word	0x10624dd3
 8000aec:	20000008 	.word	0x20000008
 8000af0:	20000160 	.word	0x20000160

08000af4 <trafficLight_change>:
#include "software_timer.h"
#include "led_segment_control.h"
#include <stdio.h>


void trafficLight_change(){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b0a0      	sub	sp, #128	; 0x80
 8000af8:	af00      	add	r7, sp, #0
	switch(state){
 8000afa:	4bb6      	ldr	r3, [pc, #728]	; (8000dd4 <trafficLight_change+0x2e0>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	3b05      	subs	r3, #5
 8000b00:	2b06      	cmp	r3, #6
 8000b02:	f200 866d 	bhi.w	80017e0 <trafficLight_change+0xcec>
 8000b06:	a201      	add	r2, pc, #4	; (adr r2, 8000b0c <trafficLight_change+0x18>)
 8000b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0c:	08000b29 	.word	0x08000b29
 8000b10:	08000b81 	.word	0x08000b81
 8000b14:	08000c8f 	.word	0x08000c8f
 8000b18:	08000e21 	.word	0x08000e21
 8000b1c:	08000f63 	.word	0x08000f63
 8000b20:	08001171 	.word	0x08001171
 8000b24:	08001369 	.word	0x08001369
	case CHANGE_MODE:
		isRedMode = 1;
 8000b28:	4bab      	ldr	r3, [pc, #684]	; (8000dd8 <trafficLight_change+0x2e4>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	601a      	str	r2, [r3, #0]
		isYellowMode = 0;
 8000b2e:	4bab      	ldr	r3, [pc, #684]	; (8000ddc <trafficLight_change+0x2e8>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
		isGreenMode = 0;
 8000b34:	4baa      	ldr	r3, [pc, #680]	; (8000de0 <trafficLight_change+0x2ec>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
		isInChange = 1;
 8000b3a:	4baa      	ldr	r3, [pc, #680]	; (8000de4 <trafficLight_change+0x2f0>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	601a      	str	r2, [r3, #0]
		//------
		state = CHANGE_MODE_RED;
 8000b40:	4ba4      	ldr	r3, [pc, #656]	; (8000dd4 <trafficLight_change+0x2e0>)
 8000b42:	2206      	movs	r2, #6
 8000b44:	701a      	strb	r2, [r3, #0]
		tempCounter = counter_red / DIVISION_NUMBER;
 8000b46:	4ba8      	ldr	r3, [pc, #672]	; (8000de8 <trafficLight_change+0x2f4>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4aa8      	ldr	r2, [pc, #672]	; (8000dec <trafficLight_change+0x2f8>)
 8000b4c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b50:	1192      	asrs	r2, r2, #6
 8000b52:	17db      	asrs	r3, r3, #31
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	4aa6      	ldr	r2, [pc, #664]	; (8000df0 <trafficLight_change+0x2fc>)
 8000b58:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!CHANGE#\r\n"), 1000);
 8000b5a:	49a6      	ldr	r1, [pc, #664]	; (8000df4 <trafficLight_change+0x300>)
 8000b5c:	48a6      	ldr	r0, [pc, #664]	; (8000df8 <trafficLight_change+0x304>)
 8000b5e:	f003 fefd 	bl	800495c <siprintf>
 8000b62:	4603      	mov	r3, r0
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6a:	49a3      	ldr	r1, [pc, #652]	; (8000df8 <trafficLight_change+0x304>)
 8000b6c:	48a3      	ldr	r0, [pc, #652]	; (8000dfc <trafficLight_change+0x308>)
 8000b6e:	f003 fd58 	bl	8004622 <HAL_UART_Transmit>
		clearTrafficDisplay();
 8000b72:	f001 f8a1 	bl	8001cb8 <clearTrafficDisplay>
		setTimerTriggerLed(DURATION_FOR_4HZ);
 8000b76:	20fa      	movs	r0, #250	; 0xfa
 8000b78:	f001 fbac 	bl	80022d4 <setTimerTriggerLed>
		//------
		break;
 8000b7c:	f000 be3d 	b.w	80017fa <trafficLight_change+0xd06>
	case CHANGE_MODE_RED:
		isRedMode = 1;
 8000b80:	4b95      	ldr	r3, [pc, #596]	; (8000dd8 <trafficLight_change+0x2e4>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	601a      	str	r2, [r3, #0]
		isYellowMode = 0;
 8000b86:	4b95      	ldr	r3, [pc, #596]	; (8000ddc <trafficLight_change+0x2e8>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
		isGreenMode = 0;
 8000b8c:	4b94      	ldr	r3, [pc, #592]	; (8000de0 <trafficLight_change+0x2ec>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 8000b92:	2000      	movs	r0, #0
 8000b94:	f7ff fbce 	bl	8000334 <isPressedAndReleased>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d00e      	beq.n	8000bbc <trafficLight_change+0xc8>
			tempCounter = counter_yellow/DIVISION_NUMBER;
 8000b9e:	4b98      	ldr	r3, [pc, #608]	; (8000e00 <trafficLight_change+0x30c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a92      	ldr	r2, [pc, #584]	; (8000dec <trafficLight_change+0x2f8>)
 8000ba4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba8:	1192      	asrs	r2, r2, #6
 8000baa:	17db      	asrs	r3, r3, #31
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	4a90      	ldr	r2, [pc, #576]	; (8000df0 <trafficLight_change+0x2fc>)
 8000bb0:	6013      	str	r3, [r2, #0]
			clearTrafficDisplay();
 8000bb2:	f001 f881 	bl	8001cb8 <clearTrafficDisplay>
			state = CHANGE_MODE_YELLOW;
 8000bb6:	4b87      	ldr	r3, [pc, #540]	; (8000dd4 <trafficLight_change+0x2e0>)
 8000bb8:	2207      	movs	r2, #7
 8000bba:	701a      	strb	r2, [r3, #0]
		}
		if(isPressedAndReleased(BTN_MODIFY_INDEX)){
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f7ff fbb9 	bl	8000334 <isPressedAndReleased>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d002      	beq.n	8000bce <trafficLight_change+0xda>
			state = MODIFY_PRESSED;
 8000bc8:	4b82      	ldr	r3, [pc, #520]	; (8000dd4 <trafficLight_change+0x2e0>)
 8000bca:	2209      	movs	r2, #9
 8000bcc:	701a      	strb	r2, [r3, #0]
		}
		if(is_button_pressed(BTN_MODIFY_INDEX)){
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f7ff fbe4 	bl	800039c <is_button_pressed>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d03d      	beq.n	8000c56 <trafficLight_change+0x162>
			if(is_button_pressed_3s(BTN_MODIFY_INDEX)){
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f7ff fbf8 	bl	80003d0 <is_button_pressed_3s>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d037      	beq.n	8000c56 <trafficLight_change+0x162>
				state = MODIFY_LONGPRESSED;
 8000be6:	4b7b      	ldr	r3, [pc, #492]	; (8000dd4 <trafficLight_change+0x2e0>)
 8000be8:	220a      	movs	r2, #10
 8000bea:	701a      	strb	r2, [r3, #0]
				tempCounter += 10;
 8000bec:	4b80      	ldr	r3, [pc, #512]	; (8000df0 <trafficLight_change+0x2fc>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	330a      	adds	r3, #10
 8000bf2:	4a7f      	ldr	r2, [pc, #508]	; (8000df0 <trafficLight_change+0x2fc>)
 8000bf4:	6013      	str	r3, [r2, #0]
				int buffer1 = tempCounter/10;
 8000bf6:	4b7e      	ldr	r3, [pc, #504]	; (8000df0 <trafficLight_change+0x2fc>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a82      	ldr	r2, [pc, #520]	; (8000e04 <trafficLight_change+0x310>)
 8000bfc:	fb82 1203 	smull	r1, r2, r2, r3
 8000c00:	1092      	asrs	r2, r2, #2
 8000c02:	17db      	asrs	r3, r3, #31
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	607b      	str	r3, [r7, #4]
				int buffer2 = tempCounter%10;
 8000c08:	4b79      	ldr	r3, [pc, #484]	; (8000df0 <trafficLight_change+0x2fc>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b7d      	ldr	r3, [pc, #500]	; (8000e04 <trafficLight_change+0x310>)
 8000c0e:	fb83 1302 	smull	r1, r3, r3, r2
 8000c12:	1099      	asrs	r1, r3, #2
 8000c14:	17d3      	asrs	r3, r2, #31
 8000c16:	1ac9      	subs	r1, r1, r3
 8000c18:	460b      	mov	r3, r1
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	603b      	str	r3, [r7, #0]
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#RED\r\n", buffer1, buffer2), 1000);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	4977      	ldr	r1, [pc, #476]	; (8000e08 <trafficLight_change+0x314>)
 8000c2a:	4873      	ldr	r0, [pc, #460]	; (8000df8 <trafficLight_change+0x304>)
 8000c2c:	f003 fe96 	bl	800495c <siprintf>
 8000c30:	4603      	mov	r3, r0
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c38:	496f      	ldr	r1, [pc, #444]	; (8000df8 <trafficLight_change+0x304>)
 8000c3a:	4870      	ldr	r0, [pc, #448]	; (8000dfc <trafficLight_change+0x308>)
 8000c3c:	f003 fcf1 	bl	8004622 <HAL_UART_Transmit>
				if(tempCounter > MAX_SEGMENT_VALUE) {
 8000c40:	4b6b      	ldr	r3, [pc, #428]	; (8000df0 <trafficLight_change+0x2fc>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b63      	cmp	r3, #99	; 0x63
 8000c46:	dd02      	ble.n	8000c4e <trafficLight_change+0x15a>
					tempCounter = 0;
 8000c48:	4b69      	ldr	r3, [pc, #420]	; (8000df0 <trafficLight_change+0x2fc>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
				}
				setTimerModify(DURATION_1S);
 8000c4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c52:	f001 fb23 	bl	800229c <setTimerModify>
			}
		}
		if(isPressedAndReleased(BTN_SET_INDEX)){
 8000c56:	2002      	movs	r0, #2
 8000c58:	f7ff fb6c 	bl	8000334 <isPressedAndReleased>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f000 85c0 	beq.w	80017e4 <trafficLight_change+0xcf0>
			state = SET_PRESSED;
 8000c64:	4b5b      	ldr	r3, [pc, #364]	; (8000dd4 <trafficLight_change+0x2e0>)
 8000c66:	220b      	movs	r2, #11
 8000c68:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:SET#RED\r\n"), 1000);
 8000c6a:	4968      	ldr	r1, [pc, #416]	; (8000e0c <trafficLight_change+0x318>)
 8000c6c:	4862      	ldr	r0, [pc, #392]	; (8000df8 <trafficLight_change+0x304>)
 8000c6e:	f003 fe75 	bl	800495c <siprintf>
 8000c72:	4603      	mov	r3, r0
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7a:	495f      	ldr	r1, [pc, #380]	; (8000df8 <trafficLight_change+0x304>)
 8000c7c:	485f      	ldr	r0, [pc, #380]	; (8000dfc <trafficLight_change+0x308>)
 8000c7e:	f003 fcd0 	bl	8004622 <HAL_UART_Transmit>
			setTimerWait(DURATION_3S);
 8000c82:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c86:	f001 faed 	bl	8002264 <setTimerWait>
		}
		break;
 8000c8a:	f000 bdab 	b.w	80017e4 <trafficLight_change+0xcf0>
	case CHANGE_MODE_YELLOW:
		isRedMode = 0;
 8000c8e:	4b52      	ldr	r3, [pc, #328]	; (8000dd8 <trafficLight_change+0x2e4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
		isYellowMode = 1;
 8000c94:	4b51      	ldr	r3, [pc, #324]	; (8000ddc <trafficLight_change+0x2e8>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	601a      	str	r2, [r3, #0]
		isGreenMode = 0;
 8000c9a:	4b51      	ldr	r3, [pc, #324]	; (8000de0 <trafficLight_change+0x2ec>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]

		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f7ff fb47 	bl	8000334 <isPressedAndReleased>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d00e      	beq.n	8000cca <trafficLight_change+0x1d6>
			tempCounter = counter_green/DIVISION_NUMBER;
 8000cac:	4b58      	ldr	r3, [pc, #352]	; (8000e10 <trafficLight_change+0x31c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a4e      	ldr	r2, [pc, #312]	; (8000dec <trafficLight_change+0x2f8>)
 8000cb2:	fb82 1203 	smull	r1, r2, r2, r3
 8000cb6:	1192      	asrs	r2, r2, #6
 8000cb8:	17db      	asrs	r3, r3, #31
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	4a4c      	ldr	r2, [pc, #304]	; (8000df0 <trafficLight_change+0x2fc>)
 8000cbe:	6013      	str	r3, [r2, #0]
			clearTrafficDisplay();
 8000cc0:	f000 fffa 	bl	8001cb8 <clearTrafficDisplay>
			state = CHANGE_MODE_GREEN;
 8000cc4:	4b43      	ldr	r3, [pc, #268]	; (8000dd4 <trafficLight_change+0x2e0>)
 8000cc6:	2208      	movs	r2, #8
 8000cc8:	701a      	strb	r2, [r3, #0]
		}
		if(isPressedAndReleased(BTN_MODIFY_INDEX)){
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f7ff fb32 	bl	8000334 <isPressedAndReleased>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d002      	beq.n	8000cdc <trafficLight_change+0x1e8>
			state = MODIFY_PRESSED;
 8000cd6:	4b3f      	ldr	r3, [pc, #252]	; (8000dd4 <trafficLight_change+0x2e0>)
 8000cd8:	2209      	movs	r2, #9
 8000cda:	701a      	strb	r2, [r3, #0]
		}
		if(is_button_pressed(BTN_MODIFY_INDEX)){
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f7ff fb5d 	bl	800039c <is_button_pressed>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d059      	beq.n	8000d9c <trafficLight_change+0x2a8>
			if(is_button_pressed_3s(BTN_MODIFY_INDEX)){
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f7ff fb71 	bl	80003d0 <is_button_pressed_3s>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d053      	beq.n	8000d9c <trafficLight_change+0x2a8>
				state = MODIFY_LONGPRESSED;
 8000cf4:	4b37      	ldr	r3, [pc, #220]	; (8000dd4 <trafficLight_change+0x2e0>)
 8000cf6:	220a      	movs	r2, #10
 8000cf8:	701a      	strb	r2, [r3, #0]
				tempCounter += 10;
 8000cfa:	4b3d      	ldr	r3, [pc, #244]	; (8000df0 <trafficLight_change+0x2fc>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	330a      	adds	r3, #10
 8000d00:	4a3b      	ldr	r2, [pc, #236]	; (8000df0 <trafficLight_change+0x2fc>)
 8000d02:	6013      	str	r3, [r2, #0]
				int buffer1 = tempCounter/10;
 8000d04:	4b3a      	ldr	r3, [pc, #232]	; (8000df0 <trafficLight_change+0x2fc>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a3e      	ldr	r2, [pc, #248]	; (8000e04 <trafficLight_change+0x310>)
 8000d0a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d0e:	1092      	asrs	r2, r2, #2
 8000d10:	17db      	asrs	r3, r3, #31
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	60fb      	str	r3, [r7, #12]
				int buffer2 = tempCounter%10;
 8000d16:	4b36      	ldr	r3, [pc, #216]	; (8000df0 <trafficLight_change+0x2fc>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	4b3a      	ldr	r3, [pc, #232]	; (8000e04 <trafficLight_change+0x310>)
 8000d1c:	fb83 1302 	smull	r1, r3, r3, r2
 8000d20:	1099      	asrs	r1, r3, #2
 8000d22:	17d3      	asrs	r3, r2, #31
 8000d24:	1ac9      	subs	r1, r1, r3
 8000d26:	460b      	mov	r3, r1
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	60bb      	str	r3, [r7, #8]
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#YEL\r\n", buffer1, buffer2), 1000);
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	4937      	ldr	r1, [pc, #220]	; (8000e14 <trafficLight_change+0x320>)
 8000d38:	482f      	ldr	r0, [pc, #188]	; (8000df8 <trafficLight_change+0x304>)
 8000d3a:	f003 fe0f 	bl	800495c <siprintf>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d46:	492c      	ldr	r1, [pc, #176]	; (8000df8 <trafficLight_change+0x304>)
 8000d48:	482c      	ldr	r0, [pc, #176]	; (8000dfc <trafficLight_change+0x308>)
 8000d4a:	f003 fc6a 	bl	8004622 <HAL_UART_Transmit>
				if(tempCounter > MAX_SEGMENT_VALUE) {
 8000d4e:	4b28      	ldr	r3, [pc, #160]	; (8000df0 <trafficLight_change+0x2fc>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b63      	cmp	r3, #99	; 0x63
 8000d54:	dd02      	ble.n	8000d5c <trafficLight_change+0x268>
					tempCounter = 0;
 8000d56:	4b26      	ldr	r3, [pc, #152]	; (8000df0 <trafficLight_change+0x2fc>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
				}
				if((tempCounter + counter_green/DIVISION_NUMBER) > MAX_SEGMENT_VALUE){
 8000d5c:	4b2c      	ldr	r3, [pc, #176]	; (8000e10 <trafficLight_change+0x31c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a22      	ldr	r2, [pc, #136]	; (8000dec <trafficLight_change+0x2f8>)
 8000d62:	fb82 1203 	smull	r1, r2, r2, r3
 8000d66:	1192      	asrs	r2, r2, #6
 8000d68:	17db      	asrs	r3, r3, #31
 8000d6a:	1ad2      	subs	r2, r2, r3
 8000d6c:	4b20      	ldr	r3, [pc, #128]	; (8000df0 <trafficLight_change+0x2fc>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4413      	add	r3, r2
 8000d72:	2b63      	cmp	r3, #99	; 0x63
 8000d74:	dd0e      	ble.n	8000d94 <trafficLight_change+0x2a0>
					HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:RED_SYNC_OVERFLOW\r\n"), 1000);
 8000d76:	4928      	ldr	r1, [pc, #160]	; (8000e18 <trafficLight_change+0x324>)
 8000d78:	481f      	ldr	r0, [pc, #124]	; (8000df8 <trafficLight_change+0x304>)
 8000d7a:	f003 fdef 	bl	800495c <siprintf>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d86:	491c      	ldr	r1, [pc, #112]	; (8000df8 <trafficLight_change+0x304>)
 8000d88:	481c      	ldr	r0, [pc, #112]	; (8000dfc <trafficLight_change+0x308>)
 8000d8a:	f003 fc4a 	bl	8004622 <HAL_UART_Transmit>
					tempCounter = 0;
 8000d8e:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <trafficLight_change+0x2fc>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
				}
				setTimerModify(DURATION_1S);
 8000d94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d98:	f001 fa80 	bl	800229c <setTimerModify>
			}
		}
		if(isPressedAndReleased(BTN_SET_INDEX)){
 8000d9c:	2002      	movs	r0, #2
 8000d9e:	f7ff fac9 	bl	8000334 <isPressedAndReleased>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	f000 851f 	beq.w	80017e8 <trafficLight_change+0xcf4>
			state = SET_PRESSED;
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <trafficLight_change+0x2e0>)
 8000dac:	220b      	movs	r2, #11
 8000dae:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:SET#YEL\r\n"), 1000);
 8000db0:	491a      	ldr	r1, [pc, #104]	; (8000e1c <trafficLight_change+0x328>)
 8000db2:	4811      	ldr	r0, [pc, #68]	; (8000df8 <trafficLight_change+0x304>)
 8000db4:	f003 fdd2 	bl	800495c <siprintf>
 8000db8:	4603      	mov	r3, r0
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc0:	490d      	ldr	r1, [pc, #52]	; (8000df8 <trafficLight_change+0x304>)
 8000dc2:	480e      	ldr	r0, [pc, #56]	; (8000dfc <trafficLight_change+0x308>)
 8000dc4:	f003 fc2d 	bl	8004622 <HAL_UART_Transmit>
			setTimerWait(DURATION_3S);
 8000dc8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000dcc:	f001 fa4a 	bl	8002264 <setTimerWait>
		}
		break;
 8000dd0:	f000 bd0a 	b.w	80017e8 <trafficLight_change+0xcf4>
 8000dd4:	20000140 	.word	0x20000140
 8000dd8:	2000012c 	.word	0x2000012c
 8000ddc:	20000128 	.word	0x20000128
 8000de0:	2000014c 	.word	0x2000014c
 8000de4:	20000148 	.word	0x20000148
 8000de8:	20000000 	.word	0x20000000
 8000dec:	10624dd3 	.word	0x10624dd3
 8000df0:	2000013c 	.word	0x2000013c
 8000df4:	08005214 	.word	0x08005214
 8000df8:	200000ec 	.word	0x200000ec
 8000dfc:	200001f4 	.word	0x200001f4
 8000e00:	20000004 	.word	0x20000004
 8000e04:	66666667 	.word	0x66666667
 8000e08:	08005220 	.word	0x08005220
 8000e0c:	08005234 	.word	0x08005234
 8000e10:	20000008 	.word	0x20000008
 8000e14:	08005244 	.word	0x08005244
 8000e18:	08005258 	.word	0x08005258
 8000e1c:	08005274 	.word	0x08005274
	case CHANGE_MODE_GREEN:
		isRedMode = 0;
 8000e20:	4b97      	ldr	r3, [pc, #604]	; (8001080 <trafficLight_change+0x58c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
		isYellowMode = 0;
 8000e26:	4b97      	ldr	r3, [pc, #604]	; (8001084 <trafficLight_change+0x590>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
		isGreenMode = 1;
 8000e2c:	4b96      	ldr	r3, [pc, #600]	; (8001088 <trafficLight_change+0x594>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	601a      	str	r2, [r3, #0]

		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff fa7e 	bl	8000334 <isPressedAndReleased>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d00c      	beq.n	8000e58 <trafficLight_change+0x364>
			tempCounter = counter_red/DIVISION_NUMBER;
 8000e3e:	4b93      	ldr	r3, [pc, #588]	; (800108c <trafficLight_change+0x598>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a93      	ldr	r2, [pc, #588]	; (8001090 <trafficLight_change+0x59c>)
 8000e44:	fb82 1203 	smull	r1, r2, r2, r3
 8000e48:	1192      	asrs	r2, r2, #6
 8000e4a:	17db      	asrs	r3, r3, #31
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	4a91      	ldr	r2, [pc, #580]	; (8001094 <trafficLight_change+0x5a0>)
 8000e50:	6013      	str	r3, [r2, #0]
			state = CHANGE_MODE_RED;
 8000e52:	4b91      	ldr	r3, [pc, #580]	; (8001098 <trafficLight_change+0x5a4>)
 8000e54:	2206      	movs	r2, #6
 8000e56:	701a      	strb	r2, [r3, #0]
		}
		if(isPressedAndReleased(BTN_MODIFY_INDEX)){
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f7ff fa6b 	bl	8000334 <isPressedAndReleased>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d002      	beq.n	8000e6a <trafficLight_change+0x376>
			state = MODIFY_PRESSED;
 8000e64:	4b8c      	ldr	r3, [pc, #560]	; (8001098 <trafficLight_change+0x5a4>)
 8000e66:	2209      	movs	r2, #9
 8000e68:	701a      	strb	r2, [r3, #0]
		}
		if(is_button_pressed(BTN_MODIFY_INDEX)){
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f7ff fa96 	bl	800039c <is_button_pressed>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d059      	beq.n	8000f2a <trafficLight_change+0x436>
			if(is_button_pressed_3s(BTN_MODIFY_INDEX)){
 8000e76:	2001      	movs	r0, #1
 8000e78:	f7ff faaa 	bl	80003d0 <is_button_pressed_3s>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d053      	beq.n	8000f2a <trafficLight_change+0x436>
				state = MODIFY_LONGPRESSED;
 8000e82:	4b85      	ldr	r3, [pc, #532]	; (8001098 <trafficLight_change+0x5a4>)
 8000e84:	220a      	movs	r2, #10
 8000e86:	701a      	strb	r2, [r3, #0]
				tempCounter += 10;
 8000e88:	4b82      	ldr	r3, [pc, #520]	; (8001094 <trafficLight_change+0x5a0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	330a      	adds	r3, #10
 8000e8e:	4a81      	ldr	r2, [pc, #516]	; (8001094 <trafficLight_change+0x5a0>)
 8000e90:	6013      	str	r3, [r2, #0]
				int buffer1 = tempCounter/10;
 8000e92:	4b80      	ldr	r3, [pc, #512]	; (8001094 <trafficLight_change+0x5a0>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a81      	ldr	r2, [pc, #516]	; (800109c <trafficLight_change+0x5a8>)
 8000e98:	fb82 1203 	smull	r1, r2, r2, r3
 8000e9c:	1092      	asrs	r2, r2, #2
 8000e9e:	17db      	asrs	r3, r3, #31
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	617b      	str	r3, [r7, #20]
				int buffer2 = tempCounter%10;
 8000ea4:	4b7b      	ldr	r3, [pc, #492]	; (8001094 <trafficLight_change+0x5a0>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b7c      	ldr	r3, [pc, #496]	; (800109c <trafficLight_change+0x5a8>)
 8000eaa:	fb83 1302 	smull	r1, r3, r3, r2
 8000eae:	1099      	asrs	r1, r3, #2
 8000eb0:	17d3      	asrs	r3, r2, #31
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	440b      	add	r3, r1
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	613b      	str	r3, [r7, #16]
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#GRE\r\n", buffer1, buffer2), 1000);
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	4976      	ldr	r1, [pc, #472]	; (80010a0 <trafficLight_change+0x5ac>)
 8000ec6:	4877      	ldr	r0, [pc, #476]	; (80010a4 <trafficLight_change+0x5b0>)
 8000ec8:	f003 fd48 	bl	800495c <siprintf>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed4:	4973      	ldr	r1, [pc, #460]	; (80010a4 <trafficLight_change+0x5b0>)
 8000ed6:	4874      	ldr	r0, [pc, #464]	; (80010a8 <trafficLight_change+0x5b4>)
 8000ed8:	f003 fba3 	bl	8004622 <HAL_UART_Transmit>
				if(tempCounter > MAX_SEGMENT_VALUE) {
 8000edc:	4b6d      	ldr	r3, [pc, #436]	; (8001094 <trafficLight_change+0x5a0>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b63      	cmp	r3, #99	; 0x63
 8000ee2:	dd02      	ble.n	8000eea <trafficLight_change+0x3f6>
					tempCounter = 0;
 8000ee4:	4b6b      	ldr	r3, [pc, #428]	; (8001094 <trafficLight_change+0x5a0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
				}
				if((tempCounter + counter_yellow/DIVISION_NUMBER) > MAX_SEGMENT_VALUE){
 8000eea:	4b70      	ldr	r3, [pc, #448]	; (80010ac <trafficLight_change+0x5b8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a68      	ldr	r2, [pc, #416]	; (8001090 <trafficLight_change+0x59c>)
 8000ef0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ef4:	1192      	asrs	r2, r2, #6
 8000ef6:	17db      	asrs	r3, r3, #31
 8000ef8:	1ad2      	subs	r2, r2, r3
 8000efa:	4b66      	ldr	r3, [pc, #408]	; (8001094 <trafficLight_change+0x5a0>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	2b63      	cmp	r3, #99	; 0x63
 8000f02:	dd0e      	ble.n	8000f22 <trafficLight_change+0x42e>
					HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:RED_SYNC_OVERFLOW\r\n"), 1000);
 8000f04:	496a      	ldr	r1, [pc, #424]	; (80010b0 <trafficLight_change+0x5bc>)
 8000f06:	4867      	ldr	r0, [pc, #412]	; (80010a4 <trafficLight_change+0x5b0>)
 8000f08:	f003 fd28 	bl	800495c <siprintf>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f14:	4963      	ldr	r1, [pc, #396]	; (80010a4 <trafficLight_change+0x5b0>)
 8000f16:	4864      	ldr	r0, [pc, #400]	; (80010a8 <trafficLight_change+0x5b4>)
 8000f18:	f003 fb83 	bl	8004622 <HAL_UART_Transmit>
					tempCounter = 0;
 8000f1c:	4b5d      	ldr	r3, [pc, #372]	; (8001094 <trafficLight_change+0x5a0>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
				}
				setTimerModify(DURATION_1S);
 8000f22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f26:	f001 f9b9 	bl	800229c <setTimerModify>
			}
		}
		if(isPressedAndReleased(BTN_SET_INDEX)){
 8000f2a:	2002      	movs	r0, #2
 8000f2c:	f7ff fa02 	bl	8000334 <isPressedAndReleased>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 845a 	beq.w	80017ec <trafficLight_change+0xcf8>
			state = SET_PRESSED;
 8000f38:	4b57      	ldr	r3, [pc, #348]	; (8001098 <trafficLight_change+0x5a4>)
 8000f3a:	220b      	movs	r2, #11
 8000f3c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:SET#GRE\r\n"), 1000);
 8000f3e:	495d      	ldr	r1, [pc, #372]	; (80010b4 <trafficLight_change+0x5c0>)
 8000f40:	4858      	ldr	r0, [pc, #352]	; (80010a4 <trafficLight_change+0x5b0>)
 8000f42:	f003 fd0b 	bl	800495c <siprintf>
 8000f46:	4603      	mov	r3, r0
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4e:	4955      	ldr	r1, [pc, #340]	; (80010a4 <trafficLight_change+0x5b0>)
 8000f50:	4855      	ldr	r0, [pc, #340]	; (80010a8 <trafficLight_change+0x5b4>)
 8000f52:	f003 fb66 	bl	8004622 <HAL_UART_Transmit>
			setTimerWait(DURATION_3S);
 8000f56:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f5a:	f001 f983 	bl	8002264 <setTimerWait>
		}
		break;
 8000f5e:	f000 bc45 	b.w	80017ec <trafficLight_change+0xcf8>
	case MODIFY_PRESSED:
		if(isRedMode == 1){
 8000f62:	4b47      	ldr	r3, [pc, #284]	; (8001080 <trafficLight_change+0x58c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d135      	bne.n	8000fd6 <trafficLight_change+0x4e2>
			tempCounter += 1;
 8000f6a:	4b4a      	ldr	r3, [pc, #296]	; (8001094 <trafficLight_change+0x5a0>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	4a48      	ldr	r2, [pc, #288]	; (8001094 <trafficLight_change+0x5a0>)
 8000f72:	6013      	str	r3, [r2, #0]
			int buffer1 = tempCounter/10;
 8000f74:	4b47      	ldr	r3, [pc, #284]	; (8001094 <trafficLight_change+0x5a0>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a48      	ldr	r2, [pc, #288]	; (800109c <trafficLight_change+0x5a8>)
 8000f7a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f7e:	1092      	asrs	r2, r2, #2
 8000f80:	17db      	asrs	r3, r3, #31
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	61fb      	str	r3, [r7, #28]
			int buffer2 = tempCounter%10;
 8000f86:	4b43      	ldr	r3, [pc, #268]	; (8001094 <trafficLight_change+0x5a0>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	4b44      	ldr	r3, [pc, #272]	; (800109c <trafficLight_change+0x5a8>)
 8000f8c:	fb83 1302 	smull	r1, r3, r3, r2
 8000f90:	1099      	asrs	r1, r3, #2
 8000f92:	17d3      	asrs	r3, r2, #31
 8000f94:	1ac9      	subs	r1, r1, r3
 8000f96:	460b      	mov	r3, r1
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	61bb      	str	r3, [r7, #24]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#RED\r\n", buffer1, buffer2), 1000);
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	69fa      	ldr	r2, [r7, #28]
 8000fa6:	4944      	ldr	r1, [pc, #272]	; (80010b8 <trafficLight_change+0x5c4>)
 8000fa8:	483e      	ldr	r0, [pc, #248]	; (80010a4 <trafficLight_change+0x5b0>)
 8000faa:	f003 fcd7 	bl	800495c <siprintf>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb6:	493b      	ldr	r1, [pc, #236]	; (80010a4 <trafficLight_change+0x5b0>)
 8000fb8:	483b      	ldr	r0, [pc, #236]	; (80010a8 <trafficLight_change+0x5b4>)
 8000fba:	f003 fb32 	bl	8004622 <HAL_UART_Transmit>
			if(tempCounter > MAX_SEGMENT_VALUE){
 8000fbe:	4b35      	ldr	r3, [pc, #212]	; (8001094 <trafficLight_change+0x5a0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b63      	cmp	r3, #99	; 0x63
 8000fc4:	dd02      	ble.n	8000fcc <trafficLight_change+0x4d8>
				tempCounter = 0;
 8000fc6:	4b33      	ldr	r3, [pc, #204]	; (8001094 <trafficLight_change+0x5a0>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
			}
			state = CHANGE_MODE_RED;
 8000fcc:	4b32      	ldr	r3, [pc, #200]	; (8001098 <trafficLight_change+0x5a4>)
 8000fce:	2206      	movs	r2, #6
 8000fd0:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:RED_SYNC_OVERFLOW\r\n"), 1000);
				tempCounter = 0;
			}
			state = CHANGE_MODE_GREEN;
		}
		break;
 8000fd2:	f000 bc0d 	b.w	80017f0 <trafficLight_change+0xcfc>
		else if(isYellowMode == 1){
 8000fd6:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <trafficLight_change+0x590>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d172      	bne.n	80010c4 <trafficLight_change+0x5d0>
			tempCounter += 1;
 8000fde:	4b2d      	ldr	r3, [pc, #180]	; (8001094 <trafficLight_change+0x5a0>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	4a2b      	ldr	r2, [pc, #172]	; (8001094 <trafficLight_change+0x5a0>)
 8000fe6:	6013      	str	r3, [r2, #0]
			int buffer1 = tempCounter/10;
 8000fe8:	4b2a      	ldr	r3, [pc, #168]	; (8001094 <trafficLight_change+0x5a0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a2b      	ldr	r2, [pc, #172]	; (800109c <trafficLight_change+0x5a8>)
 8000fee:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff2:	1092      	asrs	r2, r2, #2
 8000ff4:	17db      	asrs	r3, r3, #31
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
			int buffer2 = tempCounter%10;
 8000ffa:	4b26      	ldr	r3, [pc, #152]	; (8001094 <trafficLight_change+0x5a0>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4b27      	ldr	r3, [pc, #156]	; (800109c <trafficLight_change+0x5a8>)
 8001000:	fb83 1302 	smull	r1, r3, r3, r2
 8001004:	1099      	asrs	r1, r3, #2
 8001006:	17d3      	asrs	r3, r2, #31
 8001008:	1ac9      	subs	r1, r1, r3
 800100a:	460b      	mov	r3, r1
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	440b      	add	r3, r1
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	623b      	str	r3, [r7, #32]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#YEL\r\n", buffer1, buffer2), 1000);
 8001016:	6a3b      	ldr	r3, [r7, #32]
 8001018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800101a:	4928      	ldr	r1, [pc, #160]	; (80010bc <trafficLight_change+0x5c8>)
 800101c:	4821      	ldr	r0, [pc, #132]	; (80010a4 <trafficLight_change+0x5b0>)
 800101e:	f003 fc9d 	bl	800495c <siprintf>
 8001022:	4603      	mov	r3, r0
 8001024:	b29a      	uxth	r2, r3
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	491e      	ldr	r1, [pc, #120]	; (80010a4 <trafficLight_change+0x5b0>)
 800102c:	481e      	ldr	r0, [pc, #120]	; (80010a8 <trafficLight_change+0x5b4>)
 800102e:	f003 faf8 	bl	8004622 <HAL_UART_Transmit>
			if(tempCounter > MAX_SEGMENT_VALUE){
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <trafficLight_change+0x5a0>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b63      	cmp	r3, #99	; 0x63
 8001038:	dd02      	ble.n	8001040 <trafficLight_change+0x54c>
				tempCounter =0;
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <trafficLight_change+0x5a0>)
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
			if((tempCounter + counter_green/DIVISION_NUMBER) > MAX_SEGMENT_VALUE){
 8001040:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <trafficLight_change+0x5cc>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a12      	ldr	r2, [pc, #72]	; (8001090 <trafficLight_change+0x59c>)
 8001046:	fb82 1203 	smull	r1, r2, r2, r3
 800104a:	1192      	asrs	r2, r2, #6
 800104c:	17db      	asrs	r3, r3, #31
 800104e:	1ad2      	subs	r2, r2, r3
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <trafficLight_change+0x5a0>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4413      	add	r3, r2
 8001056:	2b63      	cmp	r3, #99	; 0x63
 8001058:	dd0e      	ble.n	8001078 <trafficLight_change+0x584>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:RED_SYNC_OVERFLOW\r\n"), 1000);
 800105a:	4915      	ldr	r1, [pc, #84]	; (80010b0 <trafficLight_change+0x5bc>)
 800105c:	4811      	ldr	r0, [pc, #68]	; (80010a4 <trafficLight_change+0x5b0>)
 800105e:	f003 fc7d 	bl	800495c <siprintf>
 8001062:	4603      	mov	r3, r0
 8001064:	b29a      	uxth	r2, r3
 8001066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106a:	490e      	ldr	r1, [pc, #56]	; (80010a4 <trafficLight_change+0x5b0>)
 800106c:	480e      	ldr	r0, [pc, #56]	; (80010a8 <trafficLight_change+0x5b4>)
 800106e:	f003 fad8 	bl	8004622 <HAL_UART_Transmit>
				tempCounter = 0;
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <trafficLight_change+0x5a0>)
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
			state = CHANGE_MODE_YELLOW;
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <trafficLight_change+0x5a4>)
 800107a:	2207      	movs	r2, #7
 800107c:	701a      	strb	r2, [r3, #0]
		break;
 800107e:	e3b7      	b.n	80017f0 <trafficLight_change+0xcfc>
 8001080:	2000012c 	.word	0x2000012c
 8001084:	20000128 	.word	0x20000128
 8001088:	2000014c 	.word	0x2000014c
 800108c:	20000000 	.word	0x20000000
 8001090:	10624dd3 	.word	0x10624dd3
 8001094:	2000013c 	.word	0x2000013c
 8001098:	20000140 	.word	0x20000140
 800109c:	66666667 	.word	0x66666667
 80010a0:	08005284 	.word	0x08005284
 80010a4:	200000ec 	.word	0x200000ec
 80010a8:	200001f4 	.word	0x200001f4
 80010ac:	20000004 	.word	0x20000004
 80010b0:	08005258 	.word	0x08005258
 80010b4:	08005298 	.word	0x08005298
 80010b8:	08005220 	.word	0x08005220
 80010bc:	08005244 	.word	0x08005244
 80010c0:	20000008 	.word	0x20000008
		else if(isGreenMode == 1){
 80010c4:	4b96      	ldr	r3, [pc, #600]	; (8001320 <trafficLight_change+0x82c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	f040 8391 	bne.w	80017f0 <trafficLight_change+0xcfc>
			tempCounter += 1;
 80010ce:	4b95      	ldr	r3, [pc, #596]	; (8001324 <trafficLight_change+0x830>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	4a93      	ldr	r2, [pc, #588]	; (8001324 <trafficLight_change+0x830>)
 80010d6:	6013      	str	r3, [r2, #0]
			int buffer1 = tempCounter/10;
 80010d8:	4b92      	ldr	r3, [pc, #584]	; (8001324 <trafficLight_change+0x830>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a92      	ldr	r2, [pc, #584]	; (8001328 <trafficLight_change+0x834>)
 80010de:	fb82 1203 	smull	r1, r2, r2, r3
 80010e2:	1092      	asrs	r2, r2, #2
 80010e4:	17db      	asrs	r3, r3, #31
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
			int buffer2 = tempCounter%10;
 80010ea:	4b8e      	ldr	r3, [pc, #568]	; (8001324 <trafficLight_change+0x830>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4b8e      	ldr	r3, [pc, #568]	; (8001328 <trafficLight_change+0x834>)
 80010f0:	fb83 1302 	smull	r1, r3, r3, r2
 80010f4:	1099      	asrs	r1, r3, #2
 80010f6:	17d3      	asrs	r3, r2, #31
 80010f8:	1ac9      	subs	r1, r1, r3
 80010fa:	460b      	mov	r3, r1
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	440b      	add	r3, r1
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#GRE\r\n", buffer1, buffer2), 1000);
 8001106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800110a:	4988      	ldr	r1, [pc, #544]	; (800132c <trafficLight_change+0x838>)
 800110c:	4888      	ldr	r0, [pc, #544]	; (8001330 <trafficLight_change+0x83c>)
 800110e:	f003 fc25 	bl	800495c <siprintf>
 8001112:	4603      	mov	r3, r0
 8001114:	b29a      	uxth	r2, r3
 8001116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111a:	4985      	ldr	r1, [pc, #532]	; (8001330 <trafficLight_change+0x83c>)
 800111c:	4885      	ldr	r0, [pc, #532]	; (8001334 <trafficLight_change+0x840>)
 800111e:	f003 fa80 	bl	8004622 <HAL_UART_Transmit>
			if(tempCounter > MAX_SEGMENT_VALUE){
 8001122:	4b80      	ldr	r3, [pc, #512]	; (8001324 <trafficLight_change+0x830>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b63      	cmp	r3, #99	; 0x63
 8001128:	dd02      	ble.n	8001130 <trafficLight_change+0x63c>
				tempCounter = 0;
 800112a:	4b7e      	ldr	r3, [pc, #504]	; (8001324 <trafficLight_change+0x830>)
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
			if((tempCounter + counter_yellow/DIVISION_NUMBER) > MAX_SEGMENT_VALUE){
 8001130:	4b81      	ldr	r3, [pc, #516]	; (8001338 <trafficLight_change+0x844>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a81      	ldr	r2, [pc, #516]	; (800133c <trafficLight_change+0x848>)
 8001136:	fb82 1203 	smull	r1, r2, r2, r3
 800113a:	1192      	asrs	r2, r2, #6
 800113c:	17db      	asrs	r3, r3, #31
 800113e:	1ad2      	subs	r2, r2, r3
 8001140:	4b78      	ldr	r3, [pc, #480]	; (8001324 <trafficLight_change+0x830>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4413      	add	r3, r2
 8001146:	2b63      	cmp	r3, #99	; 0x63
 8001148:	dd0e      	ble.n	8001168 <trafficLight_change+0x674>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:RED_SYNC_OVERFLOW\r\n"), 1000);
 800114a:	497d      	ldr	r1, [pc, #500]	; (8001340 <trafficLight_change+0x84c>)
 800114c:	4878      	ldr	r0, [pc, #480]	; (8001330 <trafficLight_change+0x83c>)
 800114e:	f003 fc05 	bl	800495c <siprintf>
 8001152:	4603      	mov	r3, r0
 8001154:	b29a      	uxth	r2, r3
 8001156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115a:	4975      	ldr	r1, [pc, #468]	; (8001330 <trafficLight_change+0x83c>)
 800115c:	4875      	ldr	r0, [pc, #468]	; (8001334 <trafficLight_change+0x840>)
 800115e:	f003 fa60 	bl	8004622 <HAL_UART_Transmit>
				tempCounter = 0;
 8001162:	4b70      	ldr	r3, [pc, #448]	; (8001324 <trafficLight_change+0x830>)
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
			state = CHANGE_MODE_GREEN;
 8001168:	4b76      	ldr	r3, [pc, #472]	; (8001344 <trafficLight_change+0x850>)
 800116a:	2208      	movs	r2, #8
 800116c:	701a      	strb	r2, [r3, #0]
		break;
 800116e:	e33f      	b.n	80017f0 <trafficLight_change+0xcfc>
	case MODIFY_LONGPRESSED:
		if(scanFreqTimer_flag == 1){
 8001170:	4b75      	ldr	r3, [pc, #468]	; (8001348 <trafficLight_change+0x854>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d10e      	bne.n	8001196 <trafficLight_change+0x6a2>
			segmentIndexManual++;
 8001178:	4b74      	ldr	r3, [pc, #464]	; (800134c <trafficLight_change+0x858>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	4a73      	ldr	r2, [pc, #460]	; (800134c <trafficLight_change+0x858>)
 8001180:	6013      	str	r3, [r2, #0]
			if(segmentIndexManual >= SEGMENT_IN_A_ROW) segmentIndexManual = 0;
 8001182:	4b72      	ldr	r3, [pc, #456]	; (800134c <trafficLight_change+0x858>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b01      	cmp	r3, #1
 8001188:	dd02      	ble.n	8001190 <trafficLight_change+0x69c>
 800118a:	4b70      	ldr	r3, [pc, #448]	; (800134c <trafficLight_change+0x858>)
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
			setTimerScanFreq(DURATION_FOR_5HZ);
 8001190:	20c8      	movs	r0, #200	; 0xc8
 8001192:	f001 f8d7 	bl	8002344 <setTimerScanFreq>
		}
		if(modifyTimer_flag == 1){
 8001196:	4b6e      	ldr	r3, [pc, #440]	; (8001350 <trafficLight_change+0x85c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b01      	cmp	r3, #1
 800119c:	f040 80a0 	bne.w	80012e0 <trafficLight_change+0x7ec>
			tempCounter += 10;
 80011a0:	4b60      	ldr	r3, [pc, #384]	; (8001324 <trafficLight_change+0x830>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	330a      	adds	r3, #10
 80011a6:	4a5f      	ldr	r2, [pc, #380]	; (8001324 <trafficLight_change+0x830>)
 80011a8:	6013      	str	r3, [r2, #0]
			if (isYellowMode == 1){
 80011aa:	4b6a      	ldr	r3, [pc, #424]	; (8001354 <trafficLight_change+0x860>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d11c      	bne.n	80011ec <trafficLight_change+0x6f8>
				if((tempCounter + counter_green/DIVISION_NUMBER) > MAX_SEGMENT_VALUE){
 80011b2:	4b69      	ldr	r3, [pc, #420]	; (8001358 <trafficLight_change+0x864>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a61      	ldr	r2, [pc, #388]	; (800133c <trafficLight_change+0x848>)
 80011b8:	fb82 1203 	smull	r1, r2, r2, r3
 80011bc:	1192      	asrs	r2, r2, #6
 80011be:	17db      	asrs	r3, r3, #31
 80011c0:	1ad2      	subs	r2, r2, r3
 80011c2:	4b58      	ldr	r3, [pc, #352]	; (8001324 <trafficLight_change+0x830>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	2b63      	cmp	r3, #99	; 0x63
 80011ca:	dd2f      	ble.n	800122c <trafficLight_change+0x738>
					HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:RED_SYNC_OVERFLOW\r\n"), 1000);
 80011cc:	495c      	ldr	r1, [pc, #368]	; (8001340 <trafficLight_change+0x84c>)
 80011ce:	4858      	ldr	r0, [pc, #352]	; (8001330 <trafficLight_change+0x83c>)
 80011d0:	f003 fbc4 	bl	800495c <siprintf>
 80011d4:	4603      	mov	r3, r0
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011dc:	4954      	ldr	r1, [pc, #336]	; (8001330 <trafficLight_change+0x83c>)
 80011de:	4855      	ldr	r0, [pc, #340]	; (8001334 <trafficLight_change+0x840>)
 80011e0:	f003 fa1f 	bl	8004622 <HAL_UART_Transmit>
					tempCounter = 0;
 80011e4:	4b4f      	ldr	r3, [pc, #316]	; (8001324 <trafficLight_change+0x830>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	e01f      	b.n	800122c <trafficLight_change+0x738>
				}
			}

			else if (isGreenMode == 1){
 80011ec:	4b4c      	ldr	r3, [pc, #304]	; (8001320 <trafficLight_change+0x82c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d11b      	bne.n	800122c <trafficLight_change+0x738>
				if((tempCounter + counter_yellow/DIVISION_NUMBER) > MAX_SEGMENT_VALUE){
 80011f4:	4b50      	ldr	r3, [pc, #320]	; (8001338 <trafficLight_change+0x844>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a50      	ldr	r2, [pc, #320]	; (800133c <trafficLight_change+0x848>)
 80011fa:	fb82 1203 	smull	r1, r2, r2, r3
 80011fe:	1192      	asrs	r2, r2, #6
 8001200:	17db      	asrs	r3, r3, #31
 8001202:	1ad2      	subs	r2, r2, r3
 8001204:	4b47      	ldr	r3, [pc, #284]	; (8001324 <trafficLight_change+0x830>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4413      	add	r3, r2
 800120a:	2b63      	cmp	r3, #99	; 0x63
 800120c:	dd0e      	ble.n	800122c <trafficLight_change+0x738>
					HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:RED_SYNC_OVERFLOW\r\n"), 1000);
 800120e:	494c      	ldr	r1, [pc, #304]	; (8001340 <trafficLight_change+0x84c>)
 8001210:	4847      	ldr	r0, [pc, #284]	; (8001330 <trafficLight_change+0x83c>)
 8001212:	f003 fba3 	bl	800495c <siprintf>
 8001216:	4603      	mov	r3, r0
 8001218:	b29a      	uxth	r2, r3
 800121a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121e:	4944      	ldr	r1, [pc, #272]	; (8001330 <trafficLight_change+0x83c>)
 8001220:	4844      	ldr	r0, [pc, #272]	; (8001334 <trafficLight_change+0x840>)
 8001222:	f003 f9fe 	bl	8004622 <HAL_UART_Transmit>
					tempCounter = 0;
 8001226:	4b3f      	ldr	r3, [pc, #252]	; (8001324 <trafficLight_change+0x830>)
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
				}
			}

			int buffer1 = tempCounter/10;
 800122c:	4b3d      	ldr	r3, [pc, #244]	; (8001324 <trafficLight_change+0x830>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a3d      	ldr	r2, [pc, #244]	; (8001328 <trafficLight_change+0x834>)
 8001232:	fb82 1203 	smull	r1, r2, r2, r3
 8001236:	1092      	asrs	r2, r2, #2
 8001238:	17db      	asrs	r3, r3, #31
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	637b      	str	r3, [r7, #52]	; 0x34
			int buffer2 = tempCounter%10;
 800123e:	4b39      	ldr	r3, [pc, #228]	; (8001324 <trafficLight_change+0x830>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	4b39      	ldr	r3, [pc, #228]	; (8001328 <trafficLight_change+0x834>)
 8001244:	fb83 1302 	smull	r1, r3, r3, r2
 8001248:	1099      	asrs	r1, r3, #2
 800124a:	17d3      	asrs	r3, r2, #31
 800124c:	1ac9      	subs	r1, r1, r3
 800124e:	460b      	mov	r3, r1
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	440b      	add	r3, r1
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	633b      	str	r3, [r7, #48]	; 0x30
			if(isRedMode == 1)
 800125a:	4b40      	ldr	r3, [pc, #256]	; (800135c <trafficLight_change+0x868>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d10e      	bne.n	8001280 <trafficLight_change+0x78c>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#RED\r\n", buffer1, buffer2), 1000);
 8001262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001264:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001266:	493e      	ldr	r1, [pc, #248]	; (8001360 <trafficLight_change+0x86c>)
 8001268:	4831      	ldr	r0, [pc, #196]	; (8001330 <trafficLight_change+0x83c>)
 800126a:	f003 fb77 	bl	800495c <siprintf>
 800126e:	4603      	mov	r3, r0
 8001270:	b29a      	uxth	r2, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	492e      	ldr	r1, [pc, #184]	; (8001330 <trafficLight_change+0x83c>)
 8001278:	482e      	ldr	r0, [pc, #184]	; (8001334 <trafficLight_change+0x840>)
 800127a:	f003 f9d2 	bl	8004622 <HAL_UART_Transmit>
 800127e:	e024      	b.n	80012ca <trafficLight_change+0x7d6>
			else if(isYellowMode == 1)
 8001280:	4b34      	ldr	r3, [pc, #208]	; (8001354 <trafficLight_change+0x860>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d10e      	bne.n	80012a6 <trafficLight_change+0x7b2>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#YEL\r\n", buffer1, buffer2), 1000);
 8001288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800128a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800128c:	4935      	ldr	r1, [pc, #212]	; (8001364 <trafficLight_change+0x870>)
 800128e:	4828      	ldr	r0, [pc, #160]	; (8001330 <trafficLight_change+0x83c>)
 8001290:	f003 fb64 	bl	800495c <siprintf>
 8001294:	4603      	mov	r3, r0
 8001296:	b29a      	uxth	r2, r3
 8001298:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129c:	4924      	ldr	r1, [pc, #144]	; (8001330 <trafficLight_change+0x83c>)
 800129e:	4825      	ldr	r0, [pc, #148]	; (8001334 <trafficLight_change+0x840>)
 80012a0:	f003 f9bf 	bl	8004622 <HAL_UART_Transmit>
 80012a4:	e011      	b.n	80012ca <trafficLight_change+0x7d6>
			else if(isGreenMode == 1)
 80012a6:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <trafficLight_change+0x82c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d10d      	bne.n	80012ca <trafficLight_change+0x7d6>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#GRE\r\n", buffer1, buffer2), 1000);
 80012ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012b2:	491e      	ldr	r1, [pc, #120]	; (800132c <trafficLight_change+0x838>)
 80012b4:	481e      	ldr	r0, [pc, #120]	; (8001330 <trafficLight_change+0x83c>)
 80012b6:	f003 fb51 	bl	800495c <siprintf>
 80012ba:	4603      	mov	r3, r0
 80012bc:	b29a      	uxth	r2, r3
 80012be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c2:	491b      	ldr	r1, [pc, #108]	; (8001330 <trafficLight_change+0x83c>)
 80012c4:	481b      	ldr	r0, [pc, #108]	; (8001334 <trafficLight_change+0x840>)
 80012c6:	f003 f9ac 	bl	8004622 <HAL_UART_Transmit>

			if(tempCounter > MAX_SEGMENT_VALUE) {
 80012ca:	4b16      	ldr	r3, [pc, #88]	; (8001324 <trafficLight_change+0x830>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b63      	cmp	r3, #99	; 0x63
 80012d0:	dd02      	ble.n	80012d8 <trafficLight_change+0x7e4>
				tempCounter = 0;
 80012d2:	4b14      	ldr	r3, [pc, #80]	; (8001324 <trafficLight_change+0x830>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
			}
			setTimerModify(DURATION_1S);
 80012d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012dc:	f000 ffde 	bl	800229c <setTimerModify>
		}
		if(!is_button_pressed(BTN_MODIFY_INDEX)){
 80012e0:	2001      	movs	r0, #1
 80012e2:	f7ff f85b 	bl	800039c <is_button_pressed>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f040 8283 	bne.w	80017f4 <trafficLight_change+0xd00>
			if(isRedMode == 1) state = CHANGE_MODE_RED;
 80012ee:	4b1b      	ldr	r3, [pc, #108]	; (800135c <trafficLight_change+0x868>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d103      	bne.n	80012fe <trafficLight_change+0x80a>
 80012f6:	4b13      	ldr	r3, [pc, #76]	; (8001344 <trafficLight_change+0x850>)
 80012f8:	2206      	movs	r2, #6
 80012fa:	701a      	strb	r2, [r3, #0]
			else if(isYellowMode == 1) state = CHANGE_MODE_YELLOW;
			else if(isGreenMode == 1) state = CHANGE_MODE_GREEN;
		}

		break;
 80012fc:	e27a      	b.n	80017f4 <trafficLight_change+0xd00>
			else if(isYellowMode == 1) state = CHANGE_MODE_YELLOW;
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <trafficLight_change+0x860>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d103      	bne.n	800130e <trafficLight_change+0x81a>
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <trafficLight_change+0x850>)
 8001308:	2207      	movs	r2, #7
 800130a:	701a      	strb	r2, [r3, #0]
		break;
 800130c:	e272      	b.n	80017f4 <trafficLight_change+0xd00>
			else if(isGreenMode == 1) state = CHANGE_MODE_GREEN;
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <trafficLight_change+0x82c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b01      	cmp	r3, #1
 8001314:	f040 826e 	bne.w	80017f4 <trafficLight_change+0xd00>
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <trafficLight_change+0x850>)
 800131a:	2208      	movs	r2, #8
 800131c:	701a      	strb	r2, [r3, #0]
		break;
 800131e:	e269      	b.n	80017f4 <trafficLight_change+0xd00>
 8001320:	2000014c 	.word	0x2000014c
 8001324:	2000013c 	.word	0x2000013c
 8001328:	66666667 	.word	0x66666667
 800132c:	08005284 	.word	0x08005284
 8001330:	200000ec 	.word	0x200000ec
 8001334:	200001f4 	.word	0x200001f4
 8001338:	20000004 	.word	0x20000004
 800133c:	10624dd3 	.word	0x10624dd3
 8001340:	08005258 	.word	0x08005258
 8001344:	20000140 	.word	0x20000140
 8001348:	20000264 	.word	0x20000264
 800134c:	20000124 	.word	0x20000124
 8001350:	2000025c 	.word	0x2000025c
 8001354:	20000128 	.word	0x20000128
 8001358:	20000008 	.word	0x20000008
 800135c:	2000012c 	.word	0x2000012c
 8001360:	08005220 	.word	0x08005220
 8001364:	08005244 	.word	0x08005244
	case SET_PRESSED:
		if(isRedMode == 1){
 8001368:	4ba1      	ldr	r3, [pc, #644]	; (80015f0 <trafficLight_change+0xafc>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b01      	cmp	r3, #1
 800136e:	f040 809d 	bne.w	80014ac <trafficLight_change+0x9b8>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:SYNC\r\n"), 1000);
 8001372:	49a0      	ldr	r1, [pc, #640]	; (80015f4 <trafficLight_change+0xb00>)
 8001374:	48a0      	ldr	r0, [pc, #640]	; (80015f8 <trafficLight_change+0xb04>)
 8001376:	f003 faf1 	bl	800495c <siprintf>
 800137a:	4603      	mov	r3, r0
 800137c:	b29a      	uxth	r2, r3
 800137e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001382:	499d      	ldr	r1, [pc, #628]	; (80015f8 <trafficLight_change+0xb04>)
 8001384:	489d      	ldr	r0, [pc, #628]	; (80015fc <trafficLight_change+0xb08>)
 8001386:	f003 f94c 	bl	8004622 <HAL_UART_Transmit>
			counter_red = tempCounter * DIVISION_NUMBER;
 800138a:	4b9d      	ldr	r3, [pc, #628]	; (8001600 <trafficLight_change+0xb0c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001392:	fb02 f303 	mul.w	r3, r2, r3
 8001396:	4a9b      	ldr	r2, [pc, #620]	; (8001604 <trafficLight_change+0xb10>)
 8001398:	6013      	str	r3, [r2, #0]
			counter_green = counter_red - counter_yellow;
 800139a:	4b9a      	ldr	r3, [pc, #616]	; (8001604 <trafficLight_change+0xb10>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	4b9a      	ldr	r3, [pc, #616]	; (8001608 <trafficLight_change+0xb14>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	4a99      	ldr	r2, [pc, #612]	; (800160c <trafficLight_change+0xb18>)
 80013a6:	6013      	str	r3, [r2, #0]

			int bufferRed_1 = (counter_red/DIVISION_NUMBER) / 10;
 80013a8:	4b96      	ldr	r3, [pc, #600]	; (8001604 <trafficLight_change+0xb10>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a98      	ldr	r2, [pc, #608]	; (8001610 <trafficLight_change+0xb1c>)
 80013ae:	fb82 1203 	smull	r1, r2, r2, r3
 80013b2:	1312      	asrs	r2, r2, #12
 80013b4:	17db      	asrs	r3, r3, #31
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	64fb      	str	r3, [r7, #76]	; 0x4c
			int bufferRed_2 = (counter_red/DIVISION_NUMBER) % 10;
 80013ba:	4b92      	ldr	r3, [pc, #584]	; (8001604 <trafficLight_change+0xb10>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a95      	ldr	r2, [pc, #596]	; (8001614 <trafficLight_change+0xb20>)
 80013c0:	fb82 1203 	smull	r1, r2, r2, r3
 80013c4:	1192      	asrs	r2, r2, #6
 80013c6:	17db      	asrs	r3, r3, #31
 80013c8:	1ad2      	subs	r2, r2, r3
 80013ca:	4b93      	ldr	r3, [pc, #588]	; (8001618 <trafficLight_change+0xb24>)
 80013cc:	fb83 1302 	smull	r1, r3, r3, r2
 80013d0:	1099      	asrs	r1, r3, #2
 80013d2:	17d3      	asrs	r3, r2, #31
 80013d4:	1ac9      	subs	r1, r1, r3
 80013d6:	460b      	mov	r3, r1
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	440b      	add	r3, r1
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	64bb      	str	r3, [r7, #72]	; 0x48
			int bufferYel_1 = (counter_yellow/DIVISION_NUMBER) / 10;
 80013e2:	4b89      	ldr	r3, [pc, #548]	; (8001608 <trafficLight_change+0xb14>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a8a      	ldr	r2, [pc, #552]	; (8001610 <trafficLight_change+0xb1c>)
 80013e8:	fb82 1203 	smull	r1, r2, r2, r3
 80013ec:	1312      	asrs	r2, r2, #12
 80013ee:	17db      	asrs	r3, r3, #31
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	647b      	str	r3, [r7, #68]	; 0x44
			int bufferYel_2 = (counter_yellow/DIVISION_NUMBER) % 10;
 80013f4:	4b84      	ldr	r3, [pc, #528]	; (8001608 <trafficLight_change+0xb14>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a86      	ldr	r2, [pc, #536]	; (8001614 <trafficLight_change+0xb20>)
 80013fa:	fb82 1203 	smull	r1, r2, r2, r3
 80013fe:	1192      	asrs	r2, r2, #6
 8001400:	17db      	asrs	r3, r3, #31
 8001402:	1ad2      	subs	r2, r2, r3
 8001404:	4b84      	ldr	r3, [pc, #528]	; (8001618 <trafficLight_change+0xb24>)
 8001406:	fb83 1302 	smull	r1, r3, r3, r2
 800140a:	1099      	asrs	r1, r3, #2
 800140c:	17d3      	asrs	r3, r2, #31
 800140e:	1ac9      	subs	r1, r1, r3
 8001410:	460b      	mov	r3, r1
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	440b      	add	r3, r1
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	643b      	str	r3, [r7, #64]	; 0x40
			int bufferGre_1 = (counter_green/DIVISION_NUMBER) / 10;
 800141c:	4b7b      	ldr	r3, [pc, #492]	; (800160c <trafficLight_change+0xb18>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a7b      	ldr	r2, [pc, #492]	; (8001610 <trafficLight_change+0xb1c>)
 8001422:	fb82 1203 	smull	r1, r2, r2, r3
 8001426:	1312      	asrs	r2, r2, #12
 8001428:	17db      	asrs	r3, r3, #31
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	63fb      	str	r3, [r7, #60]	; 0x3c
			int bufferGre_2 = (counter_green/DIVISION_NUMBER) % 10;
 800142e:	4b77      	ldr	r3, [pc, #476]	; (800160c <trafficLight_change+0xb18>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a78      	ldr	r2, [pc, #480]	; (8001614 <trafficLight_change+0xb20>)
 8001434:	fb82 1203 	smull	r1, r2, r2, r3
 8001438:	1192      	asrs	r2, r2, #6
 800143a:	17db      	asrs	r3, r3, #31
 800143c:	1ad2      	subs	r2, r2, r3
 800143e:	4b76      	ldr	r3, [pc, #472]	; (8001618 <trafficLight_change+0xb24>)
 8001440:	fb83 1302 	smull	r1, r3, r3, r2
 8001444:	1099      	asrs	r1, r3, #2
 8001446:	17d3      	asrs	r3, r2, #31
 8001448:	1ac9      	subs	r1, r1, r3
 800144a:	460b      	mov	r3, r1
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	440b      	add	r3, r1
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	63bb      	str	r3, [r7, #56]	; 0x38
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#NEWRED\r\n", bufferRed_1, bufferRed_2), 1000);
 8001456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001458:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800145a:	4970      	ldr	r1, [pc, #448]	; (800161c <trafficLight_change+0xb28>)
 800145c:	4866      	ldr	r0, [pc, #408]	; (80015f8 <trafficLight_change+0xb04>)
 800145e:	f003 fa7d 	bl	800495c <siprintf>
 8001462:	4603      	mov	r3, r0
 8001464:	b29a      	uxth	r2, r3
 8001466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146a:	4963      	ldr	r1, [pc, #396]	; (80015f8 <trafficLight_change+0xb04>)
 800146c:	4863      	ldr	r0, [pc, #396]	; (80015fc <trafficLight_change+0xb08>)
 800146e:	f003 f8d8 	bl	8004622 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#NEWYEL\r\n", bufferYel_1, bufferYel_2), 1000);
 8001472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001474:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001476:	496a      	ldr	r1, [pc, #424]	; (8001620 <trafficLight_change+0xb2c>)
 8001478:	485f      	ldr	r0, [pc, #380]	; (80015f8 <trafficLight_change+0xb04>)
 800147a:	f003 fa6f 	bl	800495c <siprintf>
 800147e:	4603      	mov	r3, r0
 8001480:	b29a      	uxth	r2, r3
 8001482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001486:	495c      	ldr	r1, [pc, #368]	; (80015f8 <trafficLight_change+0xb04>)
 8001488:	485c      	ldr	r0, [pc, #368]	; (80015fc <trafficLight_change+0xb08>)
 800148a:	f003 f8ca 	bl	8004622 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#NEWYEL\r\n", bufferGre_1, bufferGre_2), 1000);
 800148e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001490:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001492:	4963      	ldr	r1, [pc, #396]	; (8001620 <trafficLight_change+0xb2c>)
 8001494:	4858      	ldr	r0, [pc, #352]	; (80015f8 <trafficLight_change+0xb04>)
 8001496:	f003 fa61 	bl	800495c <siprintf>
 800149a:	4603      	mov	r3, r0
 800149c:	b29a      	uxth	r2, r3
 800149e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a2:	4955      	ldr	r1, [pc, #340]	; (80015f8 <trafficLight_change+0xb04>)
 80014a4:	4855      	ldr	r0, [pc, #340]	; (80015fc <trafficLight_change+0xb08>)
 80014a6:	f003 f8bc 	bl	8004622 <HAL_UART_Transmit>
 80014aa:	e15e      	b.n	800176a <trafficLight_change+0xc76>
		}
		else if (isYellowMode == 1) {
 80014ac:	4b5d      	ldr	r3, [pc, #372]	; (8001624 <trafficLight_change+0xb30>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	f040 80b9 	bne.w	8001628 <trafficLight_change+0xb34>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:SYNC\r\n"), 1000);
 80014b6:	494f      	ldr	r1, [pc, #316]	; (80015f4 <trafficLight_change+0xb00>)
 80014b8:	484f      	ldr	r0, [pc, #316]	; (80015f8 <trafficLight_change+0xb04>)
 80014ba:	f003 fa4f 	bl	800495c <siprintf>
 80014be:	4603      	mov	r3, r0
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c6:	494c      	ldr	r1, [pc, #304]	; (80015f8 <trafficLight_change+0xb04>)
 80014c8:	484c      	ldr	r0, [pc, #304]	; (80015fc <trafficLight_change+0xb08>)
 80014ca:	f003 f8aa 	bl	8004622 <HAL_UART_Transmit>
			counter_yellow = tempCounter * DIVISION_NUMBER;
 80014ce:	4b4c      	ldr	r3, [pc, #304]	; (8001600 <trafficLight_change+0xb0c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014d6:	fb02 f303 	mul.w	r3, r2, r3
 80014da:	4a4b      	ldr	r2, [pc, #300]	; (8001608 <trafficLight_change+0xb14>)
 80014dc:	6013      	str	r3, [r2, #0]
			counter_red = counter_yellow + counter_green;
 80014de:	4b4a      	ldr	r3, [pc, #296]	; (8001608 <trafficLight_change+0xb14>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4b4a      	ldr	r3, [pc, #296]	; (800160c <trafficLight_change+0xb18>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	4a46      	ldr	r2, [pc, #280]	; (8001604 <trafficLight_change+0xb10>)
 80014ea:	6013      	str	r3, [r2, #0]

			int bufferRed_1 = (counter_red/DIVISION_NUMBER) / 10;
 80014ec:	4b45      	ldr	r3, [pc, #276]	; (8001604 <trafficLight_change+0xb10>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a47      	ldr	r2, [pc, #284]	; (8001610 <trafficLight_change+0xb1c>)
 80014f2:	fb82 1203 	smull	r1, r2, r2, r3
 80014f6:	1312      	asrs	r2, r2, #12
 80014f8:	17db      	asrs	r3, r3, #31
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	667b      	str	r3, [r7, #100]	; 0x64
			int bufferRed_2 = (counter_red/DIVISION_NUMBER) % 10;
 80014fe:	4b41      	ldr	r3, [pc, #260]	; (8001604 <trafficLight_change+0xb10>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a44      	ldr	r2, [pc, #272]	; (8001614 <trafficLight_change+0xb20>)
 8001504:	fb82 1203 	smull	r1, r2, r2, r3
 8001508:	1192      	asrs	r2, r2, #6
 800150a:	17db      	asrs	r3, r3, #31
 800150c:	1ad2      	subs	r2, r2, r3
 800150e:	4b42      	ldr	r3, [pc, #264]	; (8001618 <trafficLight_change+0xb24>)
 8001510:	fb83 1302 	smull	r1, r3, r3, r2
 8001514:	1099      	asrs	r1, r3, #2
 8001516:	17d3      	asrs	r3, r2, #31
 8001518:	1ac9      	subs	r1, r1, r3
 800151a:	460b      	mov	r3, r1
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	663b      	str	r3, [r7, #96]	; 0x60
			int bufferYel_1 = (counter_yellow/DIVISION_NUMBER) / 10;
 8001526:	4b38      	ldr	r3, [pc, #224]	; (8001608 <trafficLight_change+0xb14>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a39      	ldr	r2, [pc, #228]	; (8001610 <trafficLight_change+0xb1c>)
 800152c:	fb82 1203 	smull	r1, r2, r2, r3
 8001530:	1312      	asrs	r2, r2, #12
 8001532:	17db      	asrs	r3, r3, #31
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	65fb      	str	r3, [r7, #92]	; 0x5c
			int bufferYel_2 = (counter_yellow/DIVISION_NUMBER) % 10;
 8001538:	4b33      	ldr	r3, [pc, #204]	; (8001608 <trafficLight_change+0xb14>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a35      	ldr	r2, [pc, #212]	; (8001614 <trafficLight_change+0xb20>)
 800153e:	fb82 1203 	smull	r1, r2, r2, r3
 8001542:	1192      	asrs	r2, r2, #6
 8001544:	17db      	asrs	r3, r3, #31
 8001546:	1ad2      	subs	r2, r2, r3
 8001548:	4b33      	ldr	r3, [pc, #204]	; (8001618 <trafficLight_change+0xb24>)
 800154a:	fb83 1302 	smull	r1, r3, r3, r2
 800154e:	1099      	asrs	r1, r3, #2
 8001550:	17d3      	asrs	r3, r2, #31
 8001552:	1ac9      	subs	r1, r1, r3
 8001554:	460b      	mov	r3, r1
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	65bb      	str	r3, [r7, #88]	; 0x58
			int bufferGre_1 = (counter_green/DIVISION_NUMBER) / 10;
 8001560:	4b2a      	ldr	r3, [pc, #168]	; (800160c <trafficLight_change+0xb18>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a2a      	ldr	r2, [pc, #168]	; (8001610 <trafficLight_change+0xb1c>)
 8001566:	fb82 1203 	smull	r1, r2, r2, r3
 800156a:	1312      	asrs	r2, r2, #12
 800156c:	17db      	asrs	r3, r3, #31
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	657b      	str	r3, [r7, #84]	; 0x54
			int bufferGre_2 = (counter_green/DIVISION_NUMBER) % 10;
 8001572:	4b26      	ldr	r3, [pc, #152]	; (800160c <trafficLight_change+0xb18>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a27      	ldr	r2, [pc, #156]	; (8001614 <trafficLight_change+0xb20>)
 8001578:	fb82 1203 	smull	r1, r2, r2, r3
 800157c:	1192      	asrs	r2, r2, #6
 800157e:	17db      	asrs	r3, r3, #31
 8001580:	1ad2      	subs	r2, r2, r3
 8001582:	4b25      	ldr	r3, [pc, #148]	; (8001618 <trafficLight_change+0xb24>)
 8001584:	fb83 1302 	smull	r1, r3, r3, r2
 8001588:	1099      	asrs	r1, r3, #2
 800158a:	17d3      	asrs	r3, r2, #31
 800158c:	1ac9      	subs	r1, r1, r3
 800158e:	460b      	mov	r3, r1
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	440b      	add	r3, r1
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	653b      	str	r3, [r7, #80]	; 0x50
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#NEWRED\r\n", bufferRed_1, bufferRed_2), 1000);
 800159a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800159c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800159e:	491f      	ldr	r1, [pc, #124]	; (800161c <trafficLight_change+0xb28>)
 80015a0:	4815      	ldr	r0, [pc, #84]	; (80015f8 <trafficLight_change+0xb04>)
 80015a2:	f003 f9db 	bl	800495c <siprintf>
 80015a6:	4603      	mov	r3, r0
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ae:	4912      	ldr	r1, [pc, #72]	; (80015f8 <trafficLight_change+0xb04>)
 80015b0:	4812      	ldr	r0, [pc, #72]	; (80015fc <trafficLight_change+0xb08>)
 80015b2:	f003 f836 	bl	8004622 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#NEWYEL\r\n", bufferYel_1, bufferYel_2), 1000);
 80015b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80015ba:	4919      	ldr	r1, [pc, #100]	; (8001620 <trafficLight_change+0xb2c>)
 80015bc:	480e      	ldr	r0, [pc, #56]	; (80015f8 <trafficLight_change+0xb04>)
 80015be:	f003 f9cd 	bl	800495c <siprintf>
 80015c2:	4603      	mov	r3, r0
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ca:	490b      	ldr	r1, [pc, #44]	; (80015f8 <trafficLight_change+0xb04>)
 80015cc:	480b      	ldr	r0, [pc, #44]	; (80015fc <trafficLight_change+0xb08>)
 80015ce:	f003 f828 	bl	8004622 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#NEWYEL\r\n", bufferGre_1, bufferGre_2), 1000);
 80015d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80015d6:	4912      	ldr	r1, [pc, #72]	; (8001620 <trafficLight_change+0xb2c>)
 80015d8:	4807      	ldr	r0, [pc, #28]	; (80015f8 <trafficLight_change+0xb04>)
 80015da:	f003 f9bf 	bl	800495c <siprintf>
 80015de:	4603      	mov	r3, r0
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e6:	4904      	ldr	r1, [pc, #16]	; (80015f8 <trafficLight_change+0xb04>)
 80015e8:	4804      	ldr	r0, [pc, #16]	; (80015fc <trafficLight_change+0xb08>)
 80015ea:	f003 f81a 	bl	8004622 <HAL_UART_Transmit>
 80015ee:	e0bc      	b.n	800176a <trafficLight_change+0xc76>
 80015f0:	2000012c 	.word	0x2000012c
 80015f4:	080052a8 	.word	0x080052a8
 80015f8:	200000ec 	.word	0x200000ec
 80015fc:	200001f4 	.word	0x200001f4
 8001600:	2000013c 	.word	0x2000013c
 8001604:	20000000 	.word	0x20000000
 8001608:	20000004 	.word	0x20000004
 800160c:	20000008 	.word	0x20000008
 8001610:	68db8bad 	.word	0x68db8bad
 8001614:	10624dd3 	.word	0x10624dd3
 8001618:	66666667 	.word	0x66666667
 800161c:	080052b8 	.word	0x080052b8
 8001620:	080052cc 	.word	0x080052cc
 8001624:	20000128 	.word	0x20000128
		}
		else if (isGreenMode == 1) {
 8001628:	4b76      	ldr	r3, [pc, #472]	; (8001804 <trafficLight_change+0xd10>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b01      	cmp	r3, #1
 800162e:	f040 809c 	bne.w	800176a <trafficLight_change+0xc76>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:SYNC\r\n"), 1000);
 8001632:	4975      	ldr	r1, [pc, #468]	; (8001808 <trafficLight_change+0xd14>)
 8001634:	4875      	ldr	r0, [pc, #468]	; (800180c <trafficLight_change+0xd18>)
 8001636:	f003 f991 	bl	800495c <siprintf>
 800163a:	4603      	mov	r3, r0
 800163c:	b29a      	uxth	r2, r3
 800163e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001642:	4972      	ldr	r1, [pc, #456]	; (800180c <trafficLight_change+0xd18>)
 8001644:	4872      	ldr	r0, [pc, #456]	; (8001810 <trafficLight_change+0xd1c>)
 8001646:	f002 ffec 	bl	8004622 <HAL_UART_Transmit>
			counter_green = tempCounter * DIVISION_NUMBER;
 800164a:	4b72      	ldr	r3, [pc, #456]	; (8001814 <trafficLight_change+0xd20>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001652:	fb02 f303 	mul.w	r3, r2, r3
 8001656:	4a70      	ldr	r2, [pc, #448]	; (8001818 <trafficLight_change+0xd24>)
 8001658:	6013      	str	r3, [r2, #0]
			counter_red = counter_yellow + counter_green;
 800165a:	4b70      	ldr	r3, [pc, #448]	; (800181c <trafficLight_change+0xd28>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	4b6e      	ldr	r3, [pc, #440]	; (8001818 <trafficLight_change+0xd24>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4413      	add	r3, r2
 8001664:	4a6e      	ldr	r2, [pc, #440]	; (8001820 <trafficLight_change+0xd2c>)
 8001666:	6013      	str	r3, [r2, #0]

			int bufferRed_1 = (counter_red/DIVISION_NUMBER) / 10;
 8001668:	4b6d      	ldr	r3, [pc, #436]	; (8001820 <trafficLight_change+0xd2c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a6d      	ldr	r2, [pc, #436]	; (8001824 <trafficLight_change+0xd30>)
 800166e:	fb82 1203 	smull	r1, r2, r2, r3
 8001672:	1312      	asrs	r2, r2, #12
 8001674:	17db      	asrs	r3, r3, #31
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	67fb      	str	r3, [r7, #124]	; 0x7c
			int bufferRed_2 = (counter_red/DIVISION_NUMBER) % 10;
 800167a:	4b69      	ldr	r3, [pc, #420]	; (8001820 <trafficLight_change+0xd2c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a6a      	ldr	r2, [pc, #424]	; (8001828 <trafficLight_change+0xd34>)
 8001680:	fb82 1203 	smull	r1, r2, r2, r3
 8001684:	1192      	asrs	r2, r2, #6
 8001686:	17db      	asrs	r3, r3, #31
 8001688:	1ad2      	subs	r2, r2, r3
 800168a:	4b68      	ldr	r3, [pc, #416]	; (800182c <trafficLight_change+0xd38>)
 800168c:	fb83 1302 	smull	r1, r3, r3, r2
 8001690:	1099      	asrs	r1, r3, #2
 8001692:	17d3      	asrs	r3, r2, #31
 8001694:	1ac9      	subs	r1, r1, r3
 8001696:	460b      	mov	r3, r1
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	440b      	add	r3, r1
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	67bb      	str	r3, [r7, #120]	; 0x78
			int bufferYel_1 = (counter_yellow/DIVISION_NUMBER) / 10;
 80016a2:	4b5e      	ldr	r3, [pc, #376]	; (800181c <trafficLight_change+0xd28>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a5f      	ldr	r2, [pc, #380]	; (8001824 <trafficLight_change+0xd30>)
 80016a8:	fb82 1203 	smull	r1, r2, r2, r3
 80016ac:	1312      	asrs	r2, r2, #12
 80016ae:	17db      	asrs	r3, r3, #31
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	677b      	str	r3, [r7, #116]	; 0x74
			int bufferYel_2 = (counter_yellow/DIVISION_NUMBER) % 10;
 80016b4:	4b59      	ldr	r3, [pc, #356]	; (800181c <trafficLight_change+0xd28>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a5b      	ldr	r2, [pc, #364]	; (8001828 <trafficLight_change+0xd34>)
 80016ba:	fb82 1203 	smull	r1, r2, r2, r3
 80016be:	1192      	asrs	r2, r2, #6
 80016c0:	17db      	asrs	r3, r3, #31
 80016c2:	1ad2      	subs	r2, r2, r3
 80016c4:	4b59      	ldr	r3, [pc, #356]	; (800182c <trafficLight_change+0xd38>)
 80016c6:	fb83 1302 	smull	r1, r3, r3, r2
 80016ca:	1099      	asrs	r1, r3, #2
 80016cc:	17d3      	asrs	r3, r2, #31
 80016ce:	1ac9      	subs	r1, r1, r3
 80016d0:	460b      	mov	r3, r1
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	673b      	str	r3, [r7, #112]	; 0x70
			int bufferGre_1 = (counter_green/DIVISION_NUMBER) / 10;
 80016dc:	4b4e      	ldr	r3, [pc, #312]	; (8001818 <trafficLight_change+0xd24>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a50      	ldr	r2, [pc, #320]	; (8001824 <trafficLight_change+0xd30>)
 80016e2:	fb82 1203 	smull	r1, r2, r2, r3
 80016e6:	1312      	asrs	r2, r2, #12
 80016e8:	17db      	asrs	r3, r3, #31
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	66fb      	str	r3, [r7, #108]	; 0x6c
			int bufferGre_2 = (counter_green/DIVISION_NUMBER) % 10;
 80016ee:	4b4a      	ldr	r3, [pc, #296]	; (8001818 <trafficLight_change+0xd24>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a4d      	ldr	r2, [pc, #308]	; (8001828 <trafficLight_change+0xd34>)
 80016f4:	fb82 1203 	smull	r1, r2, r2, r3
 80016f8:	1192      	asrs	r2, r2, #6
 80016fa:	17db      	asrs	r3, r3, #31
 80016fc:	1ad2      	subs	r2, r2, r3
 80016fe:	4b4b      	ldr	r3, [pc, #300]	; (800182c <trafficLight_change+0xd38>)
 8001700:	fb83 1302 	smull	r1, r3, r3, r2
 8001704:	1099      	asrs	r1, r3, #2
 8001706:	17d3      	asrs	r3, r2, #31
 8001708:	1ac9      	subs	r1, r1, r3
 800170a:	460b      	mov	r3, r1
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	440b      	add	r3, r1
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	66bb      	str	r3, [r7, #104]	; 0x68
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#NEWRED\r\n", bufferRed_1, bufferRed_2), 1000);
 8001716:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001718:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800171a:	4945      	ldr	r1, [pc, #276]	; (8001830 <trafficLight_change+0xd3c>)
 800171c:	483b      	ldr	r0, [pc, #236]	; (800180c <trafficLight_change+0xd18>)
 800171e:	f003 f91d 	bl	800495c <siprintf>
 8001722:	4603      	mov	r3, r0
 8001724:	b29a      	uxth	r2, r3
 8001726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172a:	4938      	ldr	r1, [pc, #224]	; (800180c <trafficLight_change+0xd18>)
 800172c:	4838      	ldr	r0, [pc, #224]	; (8001810 <trafficLight_change+0xd1c>)
 800172e:	f002 ff78 	bl	8004622 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#NEWYEL\r\n", bufferYel_1, bufferYel_2), 1000);
 8001732:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001734:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001736:	493f      	ldr	r1, [pc, #252]	; (8001834 <trafficLight_change+0xd40>)
 8001738:	4834      	ldr	r0, [pc, #208]	; (800180c <trafficLight_change+0xd18>)
 800173a:	f003 f90f 	bl	800495c <siprintf>
 800173e:	4603      	mov	r3, r0
 8001740:	b29a      	uxth	r2, r3
 8001742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001746:	4931      	ldr	r1, [pc, #196]	; (800180c <trafficLight_change+0xd18>)
 8001748:	4831      	ldr	r0, [pc, #196]	; (8001810 <trafficLight_change+0xd1c>)
 800174a:	f002 ff6a 	bl	8004622 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#NEWYEL\r\n", bufferGre_1, bufferGre_2), 1000);
 800174e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001750:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001752:	4938      	ldr	r1, [pc, #224]	; (8001834 <trafficLight_change+0xd40>)
 8001754:	482d      	ldr	r0, [pc, #180]	; (800180c <trafficLight_change+0xd18>)
 8001756:	f003 f901 	bl	800495c <siprintf>
 800175a:	4603      	mov	r3, r0
 800175c:	b29a      	uxth	r2, r3
 800175e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001762:	492a      	ldr	r1, [pc, #168]	; (800180c <trafficLight_change+0xd18>)
 8001764:	482a      	ldr	r0, [pc, #168]	; (8001810 <trafficLight_change+0xd1c>)
 8001766:	f002 ff5c 	bl	8004622 <HAL_UART_Transmit>
		}
		isRedMode = 0;
 800176a:	4b33      	ldr	r3, [pc, #204]	; (8001838 <trafficLight_change+0xd44>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
		isYellowMode = 0;
 8001770:	4b32      	ldr	r3, [pc, #200]	; (800183c <trafficLight_change+0xd48>)
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
		isGreenMode = 0;
 8001776:	4b23      	ldr	r3, [pc, #140]	; (8001804 <trafficLight_change+0xd10>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
		isInChange = 0;
 800177c:	4b30      	ldr	r3, [pc, #192]	; (8001840 <trafficLight_change+0xd4c>)
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
		isInManual = 0;
 8001782:	4b30      	ldr	r3, [pc, #192]	; (8001844 <trafficLight_change+0xd50>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
		scanFreqTimer_flag = 0;
 8001788:	4b2f      	ldr	r3, [pc, #188]	; (8001848 <trafficLight_change+0xd54>)
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
		tempCounter = 0;
 800178e:	4b21      	ldr	r3, [pc, #132]	; (8001814 <trafficLight_change+0xd20>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
		clearTrafficDisplay();
 8001794:	f000 fa90 	bl	8001cb8 <clearTrafficDisplay>
		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 8001798:	2000      	movs	r0, #0
 800179a:	f7fe fdcb 	bl	8000334 <isPressedAndReleased>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d015      	beq.n	80017d0 <trafficLight_change+0xcdc>
			isInChange = 1;
 80017a4:	4b26      	ldr	r3, [pc, #152]	; (8001840 <trafficLight_change+0xd4c>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	601a      	str	r2, [r3, #0]
			setTimerTriggerLed(DURATION_FOR_4HZ);
 80017aa:	20fa      	movs	r0, #250	; 0xfa
 80017ac:	f000 fd92 	bl	80022d4 <setTimerTriggerLed>
			setTimerScanFreq(DURATION_FOR_5HZ);
 80017b0:	20c8      	movs	r0, #200	; 0xc8
 80017b2:	f000 fdc7 	bl	8002344 <setTimerScanFreq>
			tempCounter = counter_red/DIVISION_NUMBER;
 80017b6:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <trafficLight_change+0xd2c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a1b      	ldr	r2, [pc, #108]	; (8001828 <trafficLight_change+0xd34>)
 80017bc:	fb82 1203 	smull	r1, r2, r2, r3
 80017c0:	1192      	asrs	r2, r2, #6
 80017c2:	17db      	asrs	r3, r3, #31
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	4a13      	ldr	r2, [pc, #76]	; (8001814 <trafficLight_change+0xd20>)
 80017c8:	6013      	str	r3, [r2, #0]

			state = CHANGE_MODE_RED;
 80017ca:	4b20      	ldr	r3, [pc, #128]	; (800184c <trafficLight_change+0xd58>)
 80017cc:	2206      	movs	r2, #6
 80017ce:	701a      	strb	r2, [r3, #0]
		}
		if(waitTimer_flag == 1){
 80017d0:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <trafficLight_change+0xd5c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d10f      	bne.n	80017f8 <trafficLight_change+0xd04>
			state = IDLE;
 80017d8:	4b1c      	ldr	r3, [pc, #112]	; (800184c <trafficLight_change+0xd58>)
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
		}
		break;
 80017de:	e00b      	b.n	80017f8 <trafficLight_change+0xd04>
	default:
		break;
 80017e0:	bf00      	nop
 80017e2:	e00a      	b.n	80017fa <trafficLight_change+0xd06>
		break;
 80017e4:	bf00      	nop
 80017e6:	e008      	b.n	80017fa <trafficLight_change+0xd06>
		break;
 80017e8:	bf00      	nop
 80017ea:	e006      	b.n	80017fa <trafficLight_change+0xd06>
		break;
 80017ec:	bf00      	nop
 80017ee:	e004      	b.n	80017fa <trafficLight_change+0xd06>
		break;
 80017f0:	bf00      	nop
 80017f2:	e002      	b.n	80017fa <trafficLight_change+0xd06>
		break;
 80017f4:	bf00      	nop
 80017f6:	e000      	b.n	80017fa <trafficLight_change+0xd06>
		break;
 80017f8:	bf00      	nop
	}
}
 80017fa:	bf00      	nop
 80017fc:	3780      	adds	r7, #128	; 0x80
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	2000014c 	.word	0x2000014c
 8001808:	080052a8 	.word	0x080052a8
 800180c:	200000ec 	.word	0x200000ec
 8001810:	200001f4 	.word	0x200001f4
 8001814:	2000013c 	.word	0x2000013c
 8001818:	20000008 	.word	0x20000008
 800181c:	20000004 	.word	0x20000004
 8001820:	20000000 	.word	0x20000000
 8001824:	68db8bad 	.word	0x68db8bad
 8001828:	10624dd3 	.word	0x10624dd3
 800182c:	66666667 	.word	0x66666667
 8001830:	080052b8 	.word	0x080052b8
 8001834:	080052cc 	.word	0x080052cc
 8001838:	2000012c 	.word	0x2000012c
 800183c:	20000128 	.word	0x20000128
 8001840:	20000148 	.word	0x20000148
 8001844:	20000120 	.word	0x20000120
 8001848:	20000264 	.word	0x20000264
 800184c:	20000140 	.word	0x20000140
 8001850:	20000268 	.word	0x20000268

08001854 <triggerLed>:

void triggerLed(){
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	if(timerLed_flag == 1){
 8001858:	4b2e      	ldr	r3, [pc, #184]	; (8001914 <triggerLed+0xc0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d157      	bne.n	8001910 <triggerLed+0xbc>
		if (isRedMode == 1 && isInChange == 1){
 8001860:	4b2d      	ldr	r3, [pc, #180]	; (8001918 <triggerLed+0xc4>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d119      	bne.n	800189c <triggerLed+0x48>
 8001868:	4b2c      	ldr	r3, [pc, #176]	; (800191c <triggerLed+0xc8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d115      	bne.n	800189c <triggerLed+0x48>
			//HAL_GPIO_WritePin(D2_RED_LED1_GPIO_Port, D2_RED_LED1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(D3_GREEN_LED1_GPIO_Port, D3_GREEN_LED1_Pin, GPIO_PIN_RESET);
 8001870:	2200      	movs	r2, #0
 8001872:	2108      	movs	r1, #8
 8001874:	482a      	ldr	r0, [pc, #168]	; (8001920 <triggerLed+0xcc>)
 8001876:	f001 fae6 	bl	8002e46 <HAL_GPIO_WritePin>
			//HAL_GPIO_WritePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin, GPIO_PIN_RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	2110      	movs	r1, #16
 800187e:	4828      	ldr	r0, [pc, #160]	; (8001920 <triggerLed+0xcc>)
 8001880:	f001 fae1 	bl	8002e46 <HAL_GPIO_WritePin>

			HAL_GPIO_TogglePin(D2_RED_LED1_GPIO_Port, D2_RED_LED1_Pin);
 8001884:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001888:	4826      	ldr	r0, [pc, #152]	; (8001924 <triggerLed+0xd0>)
 800188a:	f001 faf4 	bl	8002e76 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin);
 800188e:	2120      	movs	r1, #32
 8001890:	4823      	ldr	r0, [pc, #140]	; (8001920 <triggerLed+0xcc>)
 8001892:	f001 faf0 	bl	8002e76 <HAL_GPIO_TogglePin>

			setTimerTriggerLed(DURATION_FOR_4HZ);
 8001896:	20fa      	movs	r0, #250	; 0xfa
 8001898:	f000 fd1c 	bl	80022d4 <setTimerTriggerLed>
		}
		if (isYellowMode == 1 && isInChange == 1){
 800189c:	4b22      	ldr	r3, [pc, #136]	; (8001928 <triggerLed+0xd4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d117      	bne.n	80018d4 <triggerLed+0x80>
 80018a4:	4b1d      	ldr	r3, [pc, #116]	; (800191c <triggerLed+0xc8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d113      	bne.n	80018d4 <triggerLed+0x80>
//			HAL_GPIO_WritePin(D2_RED_LED1_GPIO_Port, D2_RED_LED1_Pin, GPIO_PIN_RESET);
//			HAL_GPIO_WritePin(D3_GREEN_LED1_GPIO_Port, D3_GREEN_LED1_Pin, GPIO_PIN_RESET);
//			HAL_GPIO_WritePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin, GPIO_PIN_RESET);
//			HAL_GPIO_WritePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin, GPIO_PIN_RESET);

			HAL_GPIO_TogglePin(D2_RED_LED1_GPIO_Port, D2_RED_LED1_Pin);
 80018ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018b0:	481c      	ldr	r0, [pc, #112]	; (8001924 <triggerLed+0xd0>)
 80018b2:	f001 fae0 	bl	8002e76 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(D3_GREEN_LED1_GPIO_Port, D3_GREEN_LED1_Pin);
 80018b6:	2108      	movs	r1, #8
 80018b8:	4819      	ldr	r0, [pc, #100]	; (8001920 <triggerLed+0xcc>)
 80018ba:	f001 fadc 	bl	8002e76 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin);
 80018be:	2120      	movs	r1, #32
 80018c0:	4817      	ldr	r0, [pc, #92]	; (8001920 <triggerLed+0xcc>)
 80018c2:	f001 fad8 	bl	8002e76 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin);
 80018c6:	2110      	movs	r1, #16
 80018c8:	4815      	ldr	r0, [pc, #84]	; (8001920 <triggerLed+0xcc>)
 80018ca:	f001 fad4 	bl	8002e76 <HAL_GPIO_TogglePin>

			setTimerTriggerLed(DURATION_FOR_4HZ);
 80018ce:	20fa      	movs	r0, #250	; 0xfa
 80018d0:	f000 fd00 	bl	80022d4 <setTimerTriggerLed>
		}
		if (isGreenMode == 1 && isInChange == 1){
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <triggerLed+0xd8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d119      	bne.n	8001910 <triggerLed+0xbc>
 80018dc:	4b0f      	ldr	r3, [pc, #60]	; (800191c <triggerLed+0xc8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d115      	bne.n	8001910 <triggerLed+0xbc>
			HAL_GPIO_WritePin(D2_RED_LED1_GPIO_Port, D2_RED_LED1_Pin, GPIO_PIN_RESET);
 80018e4:	2200      	movs	r2, #0
 80018e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018ea:	480e      	ldr	r0, [pc, #56]	; (8001924 <triggerLed+0xd0>)
 80018ec:	f001 faab 	bl	8002e46 <HAL_GPIO_WritePin>
			//HAL_GPIO_WritePin(D3_GREEN_LED1_GPIO_Port, D3_GREEN_LED1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin, GPIO_PIN_RESET);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2120      	movs	r1, #32
 80018f4:	480a      	ldr	r0, [pc, #40]	; (8001920 <triggerLed+0xcc>)
 80018f6:	f001 faa6 	bl	8002e46 <HAL_GPIO_WritePin>
			//HAL_GPIO_WritePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin, GPIO_PIN_RESET);

			HAL_GPIO_TogglePin(D3_GREEN_LED1_GPIO_Port, D3_GREEN_LED1_Pin);
 80018fa:	2108      	movs	r1, #8
 80018fc:	4808      	ldr	r0, [pc, #32]	; (8001920 <triggerLed+0xcc>)
 80018fe:	f001 faba 	bl	8002e76 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin);
 8001902:	2110      	movs	r1, #16
 8001904:	4806      	ldr	r0, [pc, #24]	; (8001920 <triggerLed+0xcc>)
 8001906:	f001 fab6 	bl	8002e76 <HAL_GPIO_TogglePin>

			setTimerTriggerLed(DURATION_FOR_4HZ);
 800190a:	20fa      	movs	r0, #250	; 0xfa
 800190c:	f000 fce2 	bl	80022d4 <setTimerTriggerLed>
		}
	}
}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000250 	.word	0x20000250
 8001918:	2000012c 	.word	0x2000012c
 800191c:	20000148 	.word	0x20000148
 8001920:	40010c00 	.word	0x40010c00
 8001924:	40010800 	.word	0x40010800
 8001928:	20000128 	.word	0x20000128
 800192c:	2000014c 	.word	0x2000014c

08001930 <trafficLight_manual>:
#include "button.h"
#include "software_timer.h"
#include "led_segment_control.h"
#include <stdio.h>

void trafficLight_manual(){
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
	switch(state){
 8001934:	4b9d      	ldr	r3, [pc, #628]	; (8001bac <trafficLight_manual+0x27c>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	3b0d      	subs	r3, #13
 800193a:	2b03      	cmp	r3, #3
 800193c:	f200 812a 	bhi.w	8001b94 <trafficLight_manual+0x264>
 8001940:	a201      	add	r2, pc, #4	; (adr r2, 8001948 <trafficLight_manual+0x18>)
 8001942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001946:	bf00      	nop
 8001948:	08001959 	.word	0x08001959
 800194c:	080019cd 	.word	0x080019cd
 8001950:	08001a79 	.word	0x08001a79
 8001954:	08001aeb 	.word	0x08001aeb
	case MANUAL_RED1_GREEN2:
		displayTrafficLight(RED_LIGHT, GREEN_LIGHT);
 8001958:	2103      	movs	r1, #3
 800195a:	2001      	movs	r0, #1
 800195c:	f000 f940 	bl	8001be0 <displayTrafficLight>
		if(isPressedAndReleased(BTN_MODIFY_INDEX)){
 8001960:	2001      	movs	r0, #1
 8001962:	f7fe fce7 	bl	8000334 <isPressedAndReleased>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d007      	beq.n	800197c <trafficLight_manual+0x4c>
			state = MANUAL_RED1_YELLOW2;
 800196c:	4b8f      	ldr	r3, [pc, #572]	; (8001bac <trafficLight_manual+0x27c>)
 800196e:	220e      	movs	r2, #14
 8001970:	701a      	strb	r2, [r3, #0]
			setTimerTraffic1(counter_yellow);
 8001972:	4b8f      	ldr	r3, [pc, #572]	; (8001bb0 <trafficLight_manual+0x280>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f000 fc58 	bl	800222c <setTimerTraffic1>
		}
		if(isPressedAndReleased(BTN_SET_INDEX)){
 800197c:	2002      	movs	r0, #2
 800197e:	f7fe fcd9 	bl	8000334 <isPressedAndReleased>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d016      	beq.n	80019b6 <trafficLight_manual+0x86>
			isInAuto = 1;
 8001988:	4b8a      	ldr	r3, [pc, #552]	; (8001bb4 <trafficLight_manual+0x284>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!AUTOMATIC#\r\n"), 1000);
 800198e:	498a      	ldr	r1, [pc, #552]	; (8001bb8 <trafficLight_manual+0x288>)
 8001990:	488a      	ldr	r0, [pc, #552]	; (8001bbc <trafficLight_manual+0x28c>)
 8001992:	f002 ffe3 	bl	800495c <siprintf>
 8001996:	4603      	mov	r3, r0
 8001998:	b29a      	uxth	r2, r3
 800199a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800199e:	4987      	ldr	r1, [pc, #540]	; (8001bbc <trafficLight_manual+0x28c>)
 80019a0:	4887      	ldr	r0, [pc, #540]	; (8001bc0 <trafficLight_manual+0x290>)
 80019a2:	f002 fe3e 	bl	8004622 <HAL_UART_Transmit>
			state = MANUAL_RED1_YELLOW2;
 80019a6:	4b81      	ldr	r3, [pc, #516]	; (8001bac <trafficLight_manual+0x27c>)
 80019a8:	220e      	movs	r2, #14
 80019aa:	701a      	strb	r2, [r3, #0]
			setTimerTraffic1(counter_yellow);
 80019ac:	4b80      	ldr	r3, [pc, #512]	; (8001bb0 <trafficLight_manual+0x280>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 fc3b 	bl	800222c <setTimerTraffic1>
		}
		//------
		if (isLongPressedAndReleased(BTN_SELECT_INDEX)) {
 80019b6:	2000      	movs	r0, #0
 80019b8:	f7fe fcd6 	bl	8000368 <isLongPressedAndReleased>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 80ea 	beq.w	8001b98 <trafficLight_manual+0x268>
			state = CHANGE_MODE;
 80019c4:	4b79      	ldr	r3, [pc, #484]	; (8001bac <trafficLight_manual+0x27c>)
 80019c6:	2205      	movs	r2, #5
 80019c8:	701a      	strb	r2, [r3, #0]
		}
		//------
		break;
 80019ca:	e0e5      	b.n	8001b98 <trafficLight_manual+0x268>
	case MANUAL_RED1_YELLOW2:
		displayTrafficLight(RED_LIGHT, YELLOW_LIGHT);
 80019cc:	2102      	movs	r1, #2
 80019ce:	2001      	movs	r0, #1
 80019d0:	f000 f906 	bl	8001be0 <displayTrafficLight>
		if(isPressedAndReleased(BTN_SET_INDEX)){
 80019d4:	2002      	movs	r0, #2
 80019d6:	f7fe fcad 	bl	8000334 <isPressedAndReleased>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00e      	beq.n	80019fe <trafficLight_manual+0xce>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!AUTOMATIC#\r\n"), 1000);
 80019e0:	4975      	ldr	r1, [pc, #468]	; (8001bb8 <trafficLight_manual+0x288>)
 80019e2:	4876      	ldr	r0, [pc, #472]	; (8001bbc <trafficLight_manual+0x28c>)
 80019e4:	f002 ffba 	bl	800495c <siprintf>
 80019e8:	4603      	mov	r3, r0
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f0:	4972      	ldr	r1, [pc, #456]	; (8001bbc <trafficLight_manual+0x28c>)
 80019f2:	4873      	ldr	r0, [pc, #460]	; (8001bc0 <trafficLight_manual+0x290>)
 80019f4:	f002 fe15 	bl	8004622 <HAL_UART_Transmit>
			isInAuto = 1;
 80019f8:	4b6e      	ldr	r3, [pc, #440]	; (8001bb4 <trafficLight_manual+0x284>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]
		}
		if(trafficTimer1_flag == 1 && isInAuto == 0){
 80019fe:	4b71      	ldr	r3, [pc, #452]	; (8001bc4 <trafficLight_manual+0x294>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d107      	bne.n	8001a16 <trafficLight_manual+0xe6>
 8001a06:	4b6b      	ldr	r3, [pc, #428]	; (8001bb4 <trafficLight_manual+0x284>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d103      	bne.n	8001a16 <trafficLight_manual+0xe6>
			state = MANUAL_GREEN1_RED2;
 8001a0e:	4b67      	ldr	r3, [pc, #412]	; (8001bac <trafficLight_manual+0x27c>)
 8001a10:	220f      	movs	r2, #15
 8001a12:	701a      	strb	r2, [r3, #0]
 8001a14:	e025      	b.n	8001a62 <trafficLight_manual+0x132>
		}
		else if (trafficTimer1_flag == 1 && isInAuto == 1){
 8001a16:	4b6b      	ldr	r3, [pc, #428]	; (8001bc4 <trafficLight_manual+0x294>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d121      	bne.n	8001a62 <trafficLight_manual+0x132>
 8001a1e:	4b65      	ldr	r3, [pc, #404]	; (8001bb4 <trafficLight_manual+0x284>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d11d      	bne.n	8001a62 <trafficLight_manual+0x132>
			isInManual = 0;
 8001a26:	4b68      	ldr	r3, [pc, #416]	; (8001bc8 <trafficLight_manual+0x298>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
			segment1Counter = counter_green / DIVISION_NUMBER;
 8001a2c:	4b67      	ldr	r3, [pc, #412]	; (8001bcc <trafficLight_manual+0x29c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a67      	ldr	r2, [pc, #412]	; (8001bd0 <trafficLight_manual+0x2a0>)
 8001a32:	fb82 1203 	smull	r1, r2, r2, r3
 8001a36:	1192      	asrs	r2, r2, #6
 8001a38:	17db      	asrs	r3, r3, #31
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	4a65      	ldr	r2, [pc, #404]	; (8001bd4 <trafficLight_manual+0x2a4>)
 8001a3e:	6013      	str	r3, [r2, #0]
			segment2Counter = counter_red / DIVISION_NUMBER;
 8001a40:	4b65      	ldr	r3, [pc, #404]	; (8001bd8 <trafficLight_manual+0x2a8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a62      	ldr	r2, [pc, #392]	; (8001bd0 <trafficLight_manual+0x2a0>)
 8001a46:	fb82 1203 	smull	r1, r2, r2, r3
 8001a4a:	1192      	asrs	r2, r2, #6
 8001a4c:	17db      	asrs	r3, r3, #31
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	4a62      	ldr	r2, [pc, #392]	; (8001bdc <trafficLight_manual+0x2ac>)
 8001a52:	6013      	str	r3, [r2, #0]
			state = AUTO_GREEN1_RED2;
 8001a54:	4b55      	ldr	r3, [pc, #340]	; (8001bac <trafficLight_manual+0x27c>)
 8001a56:	2203      	movs	r2, #3
 8001a58:	701a      	strb	r2, [r3, #0]
			setTimerCounter1(DURATION_1S);
 8001a5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a5e:	f000 fc55 	bl	800230c <setTimerCounter1>
		}
		//------
		if (isLongPressedAndReleased(BTN_SELECT_INDEX)) {
 8001a62:	2000      	movs	r0, #0
 8001a64:	f7fe fc80 	bl	8000368 <isLongPressedAndReleased>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 8096 	beq.w	8001b9c <trafficLight_manual+0x26c>
			state = CHANGE_MODE;
 8001a70:	4b4e      	ldr	r3, [pc, #312]	; (8001bac <trafficLight_manual+0x27c>)
 8001a72:	2205      	movs	r2, #5
 8001a74:	701a      	strb	r2, [r3, #0]
		}
		//------
		break;
 8001a76:	e091      	b.n	8001b9c <trafficLight_manual+0x26c>
	case MANUAL_GREEN1_RED2:
		displayTrafficLight(GREEN_LIGHT, RED_LIGHT);
 8001a78:	2101      	movs	r1, #1
 8001a7a:	2003      	movs	r0, #3
 8001a7c:	f000 f8b0 	bl	8001be0 <displayTrafficLight>
		if(isPressedAndReleased(BTN_SET_INDEX)){
 8001a80:	2002      	movs	r0, #2
 8001a82:	f7fe fc57 	bl	8000334 <isPressedAndReleased>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d016      	beq.n	8001aba <trafficLight_manual+0x18a>
			isInAuto = 1;
 8001a8c:	4b49      	ldr	r3, [pc, #292]	; (8001bb4 <trafficLight_manual+0x284>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!AUTOMATIC#\r\n"), 1000);
 8001a92:	4949      	ldr	r1, [pc, #292]	; (8001bb8 <trafficLight_manual+0x288>)
 8001a94:	4849      	ldr	r0, [pc, #292]	; (8001bbc <trafficLight_manual+0x28c>)
 8001a96:	f002 ff61 	bl	800495c <siprintf>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa2:	4946      	ldr	r1, [pc, #280]	; (8001bbc <trafficLight_manual+0x28c>)
 8001aa4:	4846      	ldr	r0, [pc, #280]	; (8001bc0 <trafficLight_manual+0x290>)
 8001aa6:	f002 fdbc 	bl	8004622 <HAL_UART_Transmit>
			state = MANUAL_YELLOW1_RED2;
 8001aaa:	4b40      	ldr	r3, [pc, #256]	; (8001bac <trafficLight_manual+0x27c>)
 8001aac:	2210      	movs	r2, #16
 8001aae:	701a      	strb	r2, [r3, #0]
			setTimerTraffic1(counter_yellow);
 8001ab0:	4b3f      	ldr	r3, [pc, #252]	; (8001bb0 <trafficLight_manual+0x280>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f000 fbb9 	bl	800222c <setTimerTraffic1>
		}
		if(isPressedAndReleased(BTN_MODIFY_INDEX)){
 8001aba:	2001      	movs	r0, #1
 8001abc:	f7fe fc3a 	bl	8000334 <isPressedAndReleased>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d007      	beq.n	8001ad6 <trafficLight_manual+0x1a6>
			state = MANUAL_YELLOW1_RED2;
 8001ac6:	4b39      	ldr	r3, [pc, #228]	; (8001bac <trafficLight_manual+0x27c>)
 8001ac8:	2210      	movs	r2, #16
 8001aca:	701a      	strb	r2, [r3, #0]
			setTimerTraffic1(counter_yellow);
 8001acc:	4b38      	ldr	r3, [pc, #224]	; (8001bb0 <trafficLight_manual+0x280>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 fbab 	bl	800222c <setTimerTraffic1>
		}
		//------
		if (isLongPressedAndReleased(BTN_SELECT_INDEX)) {
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f7fe fc46 	bl	8000368 <isLongPressedAndReleased>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d05e      	beq.n	8001ba0 <trafficLight_manual+0x270>
			state = CHANGE_MODE;
 8001ae2:	4b32      	ldr	r3, [pc, #200]	; (8001bac <trafficLight_manual+0x27c>)
 8001ae4:	2205      	movs	r2, #5
 8001ae6:	701a      	strb	r2, [r3, #0]
		}
		//------
		break;
 8001ae8:	e05a      	b.n	8001ba0 <trafficLight_manual+0x270>
	case MANUAL_YELLOW1_RED2:
		if(isPressedAndReleased(BTN_SET_INDEX)){
 8001aea:	2002      	movs	r0, #2
 8001aec:	f7fe fc22 	bl	8000334 <isPressedAndReleased>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00e      	beq.n	8001b14 <trafficLight_manual+0x1e4>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!AUTOMATIC#\r\n"), 1000);
 8001af6:	4930      	ldr	r1, [pc, #192]	; (8001bb8 <trafficLight_manual+0x288>)
 8001af8:	4830      	ldr	r0, [pc, #192]	; (8001bbc <trafficLight_manual+0x28c>)
 8001afa:	f002 ff2f 	bl	800495c <siprintf>
 8001afe:	4603      	mov	r3, r0
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b06:	492d      	ldr	r1, [pc, #180]	; (8001bbc <trafficLight_manual+0x28c>)
 8001b08:	482d      	ldr	r0, [pc, #180]	; (8001bc0 <trafficLight_manual+0x290>)
 8001b0a:	f002 fd8a 	bl	8004622 <HAL_UART_Transmit>
			isInAuto = 1;
 8001b0e:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <trafficLight_manual+0x284>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	601a      	str	r2, [r3, #0]
		}
		displayTrafficLight(YELLOW_LIGHT, RED_LIGHT);
 8001b14:	2101      	movs	r1, #1
 8001b16:	2002      	movs	r0, #2
 8001b18:	f000 f862 	bl	8001be0 <displayTrafficLight>
		if(trafficTimer1_flag == 1 && isInAuto == 0){
 8001b1c:	4b29      	ldr	r3, [pc, #164]	; (8001bc4 <trafficLight_manual+0x294>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d107      	bne.n	8001b34 <trafficLight_manual+0x204>
 8001b24:	4b23      	ldr	r3, [pc, #140]	; (8001bb4 <trafficLight_manual+0x284>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d103      	bne.n	8001b34 <trafficLight_manual+0x204>
			state = MANUAL_RED1_GREEN2;
 8001b2c:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <trafficLight_manual+0x27c>)
 8001b2e:	220d      	movs	r2, #13
 8001b30:	701a      	strb	r2, [r3, #0]
 8001b32:	e025      	b.n	8001b80 <trafficLight_manual+0x250>
		}
		else if (trafficTimer1_flag == 1 && isInAuto == 1){
 8001b34:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <trafficLight_manual+0x294>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d121      	bne.n	8001b80 <trafficLight_manual+0x250>
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <trafficLight_manual+0x284>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d11d      	bne.n	8001b80 <trafficLight_manual+0x250>
			isInManual = 0;
 8001b44:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <trafficLight_manual+0x298>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
			segment1Counter = counter_red / DIVISION_NUMBER;
 8001b4a:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <trafficLight_manual+0x2a8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a20      	ldr	r2, [pc, #128]	; (8001bd0 <trafficLight_manual+0x2a0>)
 8001b50:	fb82 1203 	smull	r1, r2, r2, r3
 8001b54:	1192      	asrs	r2, r2, #6
 8001b56:	17db      	asrs	r3, r3, #31
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	4a1e      	ldr	r2, [pc, #120]	; (8001bd4 <trafficLight_manual+0x2a4>)
 8001b5c:	6013      	str	r3, [r2, #0]
			segment2Counter = counter_green / DIVISION_NUMBER;
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <trafficLight_manual+0x29c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a1b      	ldr	r2, [pc, #108]	; (8001bd0 <trafficLight_manual+0x2a0>)
 8001b64:	fb82 1203 	smull	r1, r2, r2, r3
 8001b68:	1192      	asrs	r2, r2, #6
 8001b6a:	17db      	asrs	r3, r3, #31
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	4a1b      	ldr	r2, [pc, #108]	; (8001bdc <trafficLight_manual+0x2ac>)
 8001b70:	6013      	str	r3, [r2, #0]
			state = AUTO_RED1_GREEN2;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <trafficLight_manual+0x27c>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	701a      	strb	r2, [r3, #0]
			setTimerCounter1(DURATION_1S);
 8001b78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b7c:	f000 fbc6 	bl	800230c <setTimerCounter1>
		}
		//------
		if (isLongPressedAndReleased(BTN_SELECT_INDEX)) {
 8001b80:	2000      	movs	r0, #0
 8001b82:	f7fe fbf1 	bl	8000368 <isLongPressedAndReleased>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00b      	beq.n	8001ba4 <trafficLight_manual+0x274>
			state = CHANGE_MODE;
 8001b8c:	4b07      	ldr	r3, [pc, #28]	; (8001bac <trafficLight_manual+0x27c>)
 8001b8e:	2205      	movs	r2, #5
 8001b90:	701a      	strb	r2, [r3, #0]
		}
		//------
		break;
 8001b92:	e007      	b.n	8001ba4 <trafficLight_manual+0x274>
	default:
		break;
 8001b94:	bf00      	nop
 8001b96:	e006      	b.n	8001ba6 <trafficLight_manual+0x276>
		break;
 8001b98:	bf00      	nop
 8001b9a:	e004      	b.n	8001ba6 <trafficLight_manual+0x276>
		break;
 8001b9c:	bf00      	nop
 8001b9e:	e002      	b.n	8001ba6 <trafficLight_manual+0x276>
		break;
 8001ba0:	bf00      	nop
 8001ba2:	e000      	b.n	8001ba6 <trafficLight_manual+0x276>
		break;
 8001ba4:	bf00      	nop
	}
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000140 	.word	0x20000140
 8001bb0:	20000004 	.word	0x20000004
 8001bb4:	20000144 	.word	0x20000144
 8001bb8:	080052e0 	.word	0x080052e0
 8001bbc:	200000ec 	.word	0x200000ec
 8001bc0:	200001f4 	.word	0x200001f4
 8001bc4:	20000274 	.word	0x20000274
 8001bc8:	20000120 	.word	0x20000120
 8001bcc:	20000008 	.word	0x20000008
 8001bd0:	10624dd3 	.word	0x10624dd3
 8001bd4:	20000130 	.word	0x20000130
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	20000138 	.word	0x20000138

08001be0 <displayTrafficLight>:

#include "led_segment_control.h"
#include "main.h"
#include "global.h"
#include "software_timer.h"
void displayTrafficLight(int light1, int light2){
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
	switch(light1){
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	d021      	beq.n	8001c34 <displayTrafficLight+0x54>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	dc2a      	bgt.n	8001c4c <displayTrafficLight+0x6c>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d003      	beq.n	8001c04 <displayTrafficLight+0x24>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d00c      	beq.n	8001c1c <displayTrafficLight+0x3c>
 8001c02:	e023      	b.n	8001c4c <displayTrafficLight+0x6c>
	case RED_LIGHT:
		HAL_GPIO_WritePin(D2_RED_LED1_GPIO_Port, D2_RED_LED1_Pin, GPIO_PIN_SET);
 8001c04:	2201      	movs	r2, #1
 8001c06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c0a:	4829      	ldr	r0, [pc, #164]	; (8001cb0 <displayTrafficLight+0xd0>)
 8001c0c:	f001 f91b 	bl	8002e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GREEN_LED1_GPIO_Port, D3_GREEN_LED1_Pin, GPIO_PIN_RESET);
 8001c10:	2200      	movs	r2, #0
 8001c12:	2108      	movs	r1, #8
 8001c14:	4827      	ldr	r0, [pc, #156]	; (8001cb4 <displayTrafficLight+0xd4>)
 8001c16:	f001 f916 	bl	8002e46 <HAL_GPIO_WritePin>
		break;
 8001c1a:	e017      	b.n	8001c4c <displayTrafficLight+0x6c>
	case YELLOW_LIGHT:
		HAL_GPIO_WritePin(D2_RED_LED1_GPIO_Port, D2_RED_LED1_Pin, GPIO_PIN_SET);
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c22:	4823      	ldr	r0, [pc, #140]	; (8001cb0 <displayTrafficLight+0xd0>)
 8001c24:	f001 f90f 	bl	8002e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GREEN_LED1_GPIO_Port, D3_GREEN_LED1_Pin, GPIO_PIN_SET);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	2108      	movs	r1, #8
 8001c2c:	4821      	ldr	r0, [pc, #132]	; (8001cb4 <displayTrafficLight+0xd4>)
 8001c2e:	f001 f90a 	bl	8002e46 <HAL_GPIO_WritePin>
		break;
 8001c32:	e00b      	b.n	8001c4c <displayTrafficLight+0x6c>
	case GREEN_LIGHT:
		HAL_GPIO_WritePin(D2_RED_LED1_GPIO_Port, D2_RED_LED1_Pin, GPIO_PIN_RESET);
 8001c34:	2200      	movs	r2, #0
 8001c36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c3a:	481d      	ldr	r0, [pc, #116]	; (8001cb0 <displayTrafficLight+0xd0>)
 8001c3c:	f001 f903 	bl	8002e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GREEN_LED1_GPIO_Port, D3_GREEN_LED1_Pin, GPIO_PIN_SET);
 8001c40:	2201      	movs	r2, #1
 8001c42:	2108      	movs	r1, #8
 8001c44:	481b      	ldr	r0, [pc, #108]	; (8001cb4 <displayTrafficLight+0xd4>)
 8001c46:	f001 f8fe 	bl	8002e46 <HAL_GPIO_WritePin>
		break;
 8001c4a:	bf00      	nop
	}
	switch(light2){
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d01f      	beq.n	8001c92 <displayTrafficLight+0xb2>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	dc27      	bgt.n	8001ca8 <displayTrafficLight+0xc8>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d003      	beq.n	8001c66 <displayTrafficLight+0x86>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d00b      	beq.n	8001c7c <displayTrafficLight+0x9c>
	case GREEN_LIGHT:
		HAL_GPIO_WritePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin, GPIO_PIN_SET);
		break;
	}
}
 8001c64:	e020      	b.n	8001ca8 <displayTrafficLight+0xc8>
		HAL_GPIO_WritePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin, GPIO_PIN_SET);
 8001c66:	2201      	movs	r2, #1
 8001c68:	2120      	movs	r1, #32
 8001c6a:	4812      	ldr	r0, [pc, #72]	; (8001cb4 <displayTrafficLight+0xd4>)
 8001c6c:	f001 f8eb 	bl	8002e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin, GPIO_PIN_RESET);
 8001c70:	2200      	movs	r2, #0
 8001c72:	2110      	movs	r1, #16
 8001c74:	480f      	ldr	r0, [pc, #60]	; (8001cb4 <displayTrafficLight+0xd4>)
 8001c76:	f001 f8e6 	bl	8002e46 <HAL_GPIO_WritePin>
		break;
 8001c7a:	e015      	b.n	8001ca8 <displayTrafficLight+0xc8>
		HAL_GPIO_WritePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin, GPIO_PIN_SET);
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	2120      	movs	r1, #32
 8001c80:	480c      	ldr	r0, [pc, #48]	; (8001cb4 <displayTrafficLight+0xd4>)
 8001c82:	f001 f8e0 	bl	8002e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin, GPIO_PIN_SET);
 8001c86:	2201      	movs	r2, #1
 8001c88:	2110      	movs	r1, #16
 8001c8a:	480a      	ldr	r0, [pc, #40]	; (8001cb4 <displayTrafficLight+0xd4>)
 8001c8c:	f001 f8db 	bl	8002e46 <HAL_GPIO_WritePin>
		break;
 8001c90:	e00a      	b.n	8001ca8 <displayTrafficLight+0xc8>
		HAL_GPIO_WritePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin, GPIO_PIN_RESET);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2120      	movs	r1, #32
 8001c96:	4807      	ldr	r0, [pc, #28]	; (8001cb4 <displayTrafficLight+0xd4>)
 8001c98:	f001 f8d5 	bl	8002e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin, GPIO_PIN_SET);
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	2110      	movs	r1, #16
 8001ca0:	4804      	ldr	r0, [pc, #16]	; (8001cb4 <displayTrafficLight+0xd4>)
 8001ca2:	f001 f8d0 	bl	8002e46 <HAL_GPIO_WritePin>
		break;
 8001ca6:	bf00      	nop
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40010800 	.word	0x40010800
 8001cb4:	40010c00 	.word	0x40010c00

08001cb8 <clearTrafficDisplay>:

void clearTrafficDisplay(){
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_RED_LED1_GPIO_Port, D2_RED_LED1_Pin, GPIO_PIN_RESET);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cc2:	480a      	ldr	r0, [pc, #40]	; (8001cec <clearTrafficDisplay+0x34>)
 8001cc4:	f001 f8bf 	bl	8002e46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GREEN_LED1_GPIO_Port, D3_GREEN_LED1_Pin, GPIO_PIN_RESET);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2108      	movs	r1, #8
 8001ccc:	4808      	ldr	r0, [pc, #32]	; (8001cf0 <clearTrafficDisplay+0x38>)
 8001cce:	f001 f8ba 	bl	8002e46 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin, GPIO_PIN_RESET);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2120      	movs	r1, #32
 8001cd6:	4806      	ldr	r0, [pc, #24]	; (8001cf0 <clearTrafficDisplay+0x38>)
 8001cd8:	f001 f8b5 	bl	8002e46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin, GPIO_PIN_RESET);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2110      	movs	r1, #16
 8001ce0:	4803      	ldr	r0, [pc, #12]	; (8001cf0 <clearTrafficDisplay+0x38>)
 8001ce2:	f001 f8b0 	bl	8002e46 <HAL_GPIO_WritePin>
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40010800 	.word	0x40010800
 8001cf0:	40010c00 	.word	0x40010c00

08001cf4 <displayPedestrianLight>:

void displayPedestrianLight(int status){
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	switch(status){
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d023      	beq.n	8001d4a <displayPedestrianLight+0x56>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b06      	cmp	r3, #6
 8001d06:	dc2c      	bgt.n	8001d62 <displayPedestrianLight+0x6e>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d003      	beq.n	8001d16 <displayPedestrianLight+0x22>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b05      	cmp	r3, #5
 8001d12:	d00d      	beq.n	8001d30 <displayPedestrianLight+0x3c>
 8001d14:	e025      	b.n	8001d62 <displayPedestrianLight+0x6e>
	case PEDESTRIAN_LIGHT_GO:
		HAL_GPIO_WritePin(D6_PED_LIGHT1_GPIO_Port, D6_PED_LIGHT1_Pin, GPIO_PIN_SET);
 8001d16:	2201      	movs	r2, #1
 8001d18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d1c:	4819      	ldr	r0, [pc, #100]	; (8001d84 <displayPedestrianLight+0x90>)
 8001d1e:	f001 f892 	bl	8002e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_PED_LIGHT2_GPIO_Port, D7_PED_LIGHT2_Pin, GPIO_PIN_RESET);
 8001d22:	2200      	movs	r2, #0
 8001d24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d28:	4817      	ldr	r0, [pc, #92]	; (8001d88 <displayPedestrianLight+0x94>)
 8001d2a:	f001 f88c 	bl	8002e46 <HAL_GPIO_WritePin>
		break;
 8001d2e:	e025      	b.n	8001d7c <displayPedestrianLight+0x88>
	case PEDESTRIAN_LIGHT_STOP:
		HAL_GPIO_WritePin(D6_PED_LIGHT1_GPIO_Port, D6_PED_LIGHT1_Pin, GPIO_PIN_RESET);
 8001d30:	2200      	movs	r2, #0
 8001d32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d36:	4813      	ldr	r0, [pc, #76]	; (8001d84 <displayPedestrianLight+0x90>)
 8001d38:	f001 f885 	bl	8002e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_PED_LIGHT2_GPIO_Port, D7_PED_LIGHT2_Pin, GPIO_PIN_SET);
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d42:	4811      	ldr	r0, [pc, #68]	; (8001d88 <displayPedestrianLight+0x94>)
 8001d44:	f001 f87f 	bl	8002e46 <HAL_GPIO_WritePin>
		break;
 8001d48:	e018      	b.n	8001d7c <displayPedestrianLight+0x88>
	case PEDESTRIAN_LIGHT_OFF:
		HAL_GPIO_WritePin(D6_PED_LIGHT1_GPIO_Port, D6_PED_LIGHT1_Pin, GPIO_PIN_RESET);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d50:	480c      	ldr	r0, [pc, #48]	; (8001d84 <displayPedestrianLight+0x90>)
 8001d52:	f001 f878 	bl	8002e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_PED_LIGHT2_GPIO_Port, D7_PED_LIGHT2_Pin, GPIO_PIN_RESET);
 8001d56:	2200      	movs	r2, #0
 8001d58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d5c:	480a      	ldr	r0, [pc, #40]	; (8001d88 <displayPedestrianLight+0x94>)
 8001d5e:	f001 f872 	bl	8002e46 <HAL_GPIO_WritePin>
	default:
		HAL_GPIO_WritePin(D6_PED_LIGHT1_GPIO_Port, D6_PED_LIGHT1_Pin, GPIO_PIN_RESET);
 8001d62:	2200      	movs	r2, #0
 8001d64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d68:	4806      	ldr	r0, [pc, #24]	; (8001d84 <displayPedestrianLight+0x90>)
 8001d6a:	f001 f86c 	bl	8002e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_PED_LIGHT2_GPIO_Port, D7_PED_LIGHT2_Pin, GPIO_PIN_RESET);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d74:	4804      	ldr	r0, [pc, #16]	; (8001d88 <displayPedestrianLight+0x94>)
 8001d76:	f001 f866 	bl	8002e46 <HAL_GPIO_WritePin>
		break;
 8001d7a:	bf00      	nop
	}
}
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40010c00 	.word	0x40010c00
 8001d88:	40010800 	.word	0x40010800

08001d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d90:	f000 fd4e 	bl	8002830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d94:	f000 f826 	bl	8001de4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d98:	f000 f936 	bl	8002008 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001d9c:	f000 f864 	bl	8001e68 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001da0:	f000 f8ae 	bl	8001f00 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001da4:	f000 f906 	bl	8001fb4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001da8:	480a      	ldr	r0, [pc, #40]	; (8001dd4 <main+0x48>)
 8001daa:	f001 fce7 	bl	800377c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001dae:	2100      	movs	r1, #0
 8001db0:	4809      	ldr	r0, [pc, #36]	; (8001dd8 <main+0x4c>)
 8001db2:	f001 fd85 	bl	80038c0 <HAL_TIM_PWM_Start>
  buzzer_init(TIM3);
 8001db6:	4809      	ldr	r0, [pc, #36]	; (8001ddc <main+0x50>)
 8001db8:	f000 f9a8 	bl	800210c <buzzer_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //setTimerTraffic1(10);
  state = IDLE;
 8001dbc:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <main+0x54>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  trafficLight_automatic();
 8001dc2:	f7fe fb1f 	bl	8000404 <trafficLight_automatic>
	  trafficLight_change();
 8001dc6:	f7fe fe95 	bl	8000af4 <trafficLight_change>
	  trafficLight_manual();
 8001dca:	f7ff fdb1 	bl	8001930 <trafficLight_manual>
	  triggerLed();
 8001dce:	f7ff fd41 	bl	8001854 <triggerLed>
	  trafficLight_automatic();
 8001dd2:	e7f6      	b.n	8001dc2 <main+0x36>
 8001dd4:	200001ac 	.word	0x200001ac
 8001dd8:	20000164 	.word	0x20000164
 8001ddc:	40000400 	.word	0x40000400
 8001de0:	20000140 	.word	0x20000140

08001de4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b090      	sub	sp, #64	; 0x40
 8001de8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dea:	f107 0318 	add.w	r3, r7, #24
 8001dee:	2228      	movs	r2, #40	; 0x28
 8001df0:	2100      	movs	r1, #0
 8001df2:	4618      	mov	r0, r3
 8001df4:	f002 fdaa 	bl	800494c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001df8:	1d3b      	adds	r3, r7, #4
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	60da      	str	r2, [r3, #12]
 8001e04:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e06:	2302      	movs	r3, #2
 8001e08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e0e:	2310      	movs	r3, #16
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e12:	2302      	movs	r3, #2
 8001e14:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001e16:	2300      	movs	r3, #0
 8001e18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001e1a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e20:	f107 0318 	add.w	r3, r7, #24
 8001e24:	4618      	mov	r0, r3
 8001e26:	f001 f83f 	bl	8002ea8 <HAL_RCC_OscConfig>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001e30:	f000 f966 	bl	8002100 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e34:	230f      	movs	r3, #15
 8001e36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	2102      	movs	r1, #2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f001 faaa 	bl	80033a8 <HAL_RCC_ClockConfig>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001e5a:	f000 f951 	bl	8002100 <Error_Handler>
  }
}
 8001e5e:	bf00      	nop
 8001e60:	3740      	adds	r7, #64	; 0x40
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e6e:	f107 0308 	add.w	r3, r7, #8
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	609a      	str	r2, [r3, #8]
 8001e7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e7c:	463b      	mov	r3, r7
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e84:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <MX_TIM2_Init+0x94>)
 8001e86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <MX_TIM2_Init+0x94>)
 8001e8e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001e92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e94:	4b19      	ldr	r3, [pc, #100]	; (8001efc <MX_TIM2_Init+0x94>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <MX_TIM2_Init+0x94>)
 8001e9c:	224f      	movs	r2, #79	; 0x4f
 8001e9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea0:	4b16      	ldr	r3, [pc, #88]	; (8001efc <MX_TIM2_Init+0x94>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea6:	4b15      	ldr	r3, [pc, #84]	; (8001efc <MX_TIM2_Init+0x94>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001eac:	4813      	ldr	r0, [pc, #76]	; (8001efc <MX_TIM2_Init+0x94>)
 8001eae:	f001 fc15 	bl	80036dc <HAL_TIM_Base_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001eb8:	f000 f922 	bl	8002100 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ec2:	f107 0308 	add.w	r3, r7, #8
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	480c      	ldr	r0, [pc, #48]	; (8001efc <MX_TIM2_Init+0x94>)
 8001eca:	f001 ff61 	bl	8003d90 <HAL_TIM_ConfigClockSource>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ed4:	f000 f914 	bl	8002100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ee0:	463b      	mov	r3, r7
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4805      	ldr	r0, [pc, #20]	; (8001efc <MX_TIM2_Init+0x94>)
 8001ee6:	f002 fadf 	bl	80044a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ef0:	f000 f906 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ef4:	bf00      	nop
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	200001ac 	.word	0x200001ac

08001f00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	; 0x28
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f06:	f107 0320 	add.w	r3, r7, #32
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	60da      	str	r2, [r3, #12]
 8001f1c:	611a      	str	r2, [r3, #16]
 8001f1e:	615a      	str	r2, [r3, #20]
 8001f20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f22:	4b22      	ldr	r3, [pc, #136]	; (8001fac <MX_TIM3_Init+0xac>)
 8001f24:	4a22      	ldr	r2, [pc, #136]	; (8001fb0 <MX_TIM3_Init+0xb0>)
 8001f26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001f28:	4b20      	ldr	r3, [pc, #128]	; (8001fac <MX_TIM3_Init+0xac>)
 8001f2a:	223f      	movs	r2, #63	; 0x3f
 8001f2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2e:	4b1f      	ldr	r3, [pc, #124]	; (8001fac <MX_TIM3_Init+0xac>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001f34:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <MX_TIM3_Init+0xac>)
 8001f36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f3c:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <MX_TIM3_Init+0xac>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f42:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <MX_TIM3_Init+0xac>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f48:	4818      	ldr	r0, [pc, #96]	; (8001fac <MX_TIM3_Init+0xac>)
 8001f4a:	f001 fc69 	bl	8003820 <HAL_TIM_PWM_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001f54:	f000 f8d4 	bl	8002100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f60:	f107 0320 	add.w	r3, r7, #32
 8001f64:	4619      	mov	r1, r3
 8001f66:	4811      	ldr	r0, [pc, #68]	; (8001fac <MX_TIM3_Init+0xac>)
 8001f68:	f002 fa9e 	bl	80044a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001f72:	f000 f8c5 	bl	8002100 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f76:	2360      	movs	r3, #96	; 0x60
 8001f78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	2200      	movs	r2, #0
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4807      	ldr	r0, [pc, #28]	; (8001fac <MX_TIM3_Init+0xac>)
 8001f8e:	f001 fe41 	bl	8003c14 <HAL_TIM_PWM_ConfigChannel>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001f98:	f000 f8b2 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <MX_TIM3_Init+0xac>)
 8001f9e:	f000 fb37 	bl	8002610 <HAL_TIM_MspPostInit>

}
 8001fa2:	bf00      	nop
 8001fa4:	3728      	adds	r7, #40	; 0x28
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000164 	.word	0x20000164
 8001fb0:	40000400 	.word	0x40000400

08001fb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fba:	4a12      	ldr	r2, [pc, #72]	; (8002004 <MX_USART2_UART_Init+0x50>)
 8001fbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fda:	220c      	movs	r2, #12
 8001fdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fea:	4805      	ldr	r0, [pc, #20]	; (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fec:	f002 facc 	bl	8004588 <HAL_UART_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ff6:	f000 f883 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	200001f4 	.word	0x200001f4
 8002004:	40004400 	.word	0x40004400

08002008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200e:	f107 0308 	add.w	r3, r7, #8
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
 8002018:	609a      	str	r2, [r3, #8]
 800201a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800201c:	4b2e      	ldr	r3, [pc, #184]	; (80020d8 <MX_GPIO_Init+0xd0>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	4a2d      	ldr	r2, [pc, #180]	; (80020d8 <MX_GPIO_Init+0xd0>)
 8002022:	f043 0304 	orr.w	r3, r3, #4
 8002026:	6193      	str	r3, [r2, #24]
 8002028:	4b2b      	ldr	r3, [pc, #172]	; (80020d8 <MX_GPIO_Init+0xd0>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002034:	4b28      	ldr	r3, [pc, #160]	; (80020d8 <MX_GPIO_Init+0xd0>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	4a27      	ldr	r2, [pc, #156]	; (80020d8 <MX_GPIO_Init+0xd0>)
 800203a:	f043 0308 	orr.w	r3, r3, #8
 800203e:	6193      	str	r3, [r2, #24]
 8002040:	4b25      	ldr	r3, [pc, #148]	; (80020d8 <MX_GPIO_Init+0xd0>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	603b      	str	r3, [r7, #0]
 800204a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PED_LIGHT1_Pin|D3_GREEN_LED1_Pin|D5_GREEN_LED2_Pin|D4_RED_LED_2_Pin, GPIO_PIN_RESET);
 800204c:	2200      	movs	r2, #0
 800204e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8002052:	4822      	ldr	r0, [pc, #136]	; (80020dc <MX_GPIO_Init+0xd4>)
 8002054:	f000 fef7 	bl	8002e46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_PED_LIGHT2_Pin|D2_RED_LED1_Pin, GPIO_PIN_RESET);
 8002058:	2200      	movs	r2, #0
 800205a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800205e:	4820      	ldr	r0, [pc, #128]	; (80020e0 <MX_GPIO_Init+0xd8>)
 8002060:	f000 fef1 	bl	8002e46 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_BTN_PED_Pin A1_BTN_SELECT_Pin A2_BTN_MODIFY_Pin */
  GPIO_InitStruct.Pin = A0_BTN_PED_Pin|A1_BTN_SELECT_Pin|A2_BTN_MODIFY_Pin;
 8002064:	2313      	movs	r3, #19
 8002066:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800206c:	2301      	movs	r3, #1
 800206e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002070:	f107 0308 	add.w	r3, r7, #8
 8002074:	4619      	mov	r1, r3
 8002076:	481a      	ldr	r0, [pc, #104]	; (80020e0 <MX_GPIO_Init+0xd8>)
 8002078:	f000 fd4a 	bl	8002b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_BTN_SET_Pin */
  GPIO_InitStruct.Pin = A3_BTN_SET_Pin;
 800207c:	2301      	movs	r3, #1
 800207e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002084:	2301      	movs	r3, #1
 8002086:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_BTN_SET_GPIO_Port, &GPIO_InitStruct);
 8002088:	f107 0308 	add.w	r3, r7, #8
 800208c:	4619      	mov	r1, r3
 800208e:	4813      	ldr	r0, [pc, #76]	; (80020dc <MX_GPIO_Init+0xd4>)
 8002090:	f000 fd3e 	bl	8002b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PED_LIGHT1_Pin D3_GREEN_LED1_Pin D5_GREEN_LED2_Pin D4_RED_LED_2_Pin */
  GPIO_InitStruct.Pin = D6_PED_LIGHT1_Pin|D3_GREEN_LED1_Pin|D5_GREEN_LED2_Pin|D4_RED_LED_2_Pin;
 8002094:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8002098:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800209a:	2301      	movs	r3, #1
 800209c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a2:	2302      	movs	r3, #2
 80020a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a6:	f107 0308 	add.w	r3, r7, #8
 80020aa:	4619      	mov	r1, r3
 80020ac:	480b      	ldr	r0, [pc, #44]	; (80020dc <MX_GPIO_Init+0xd4>)
 80020ae:	f000 fd2f 	bl	8002b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_PED_LIGHT2_Pin D2_RED_LED1_Pin */
  GPIO_InitStruct.Pin = D7_PED_LIGHT2_Pin|D2_RED_LED1_Pin;
 80020b2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80020b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b8:	2301      	movs	r3, #1
 80020ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c0:	2302      	movs	r3, #2
 80020c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c4:	f107 0308 	add.w	r3, r7, #8
 80020c8:	4619      	mov	r1, r3
 80020ca:	4805      	ldr	r0, [pc, #20]	; (80020e0 <MX_GPIO_Init+0xd8>)
 80020cc:	f000 fd20 	bl	8002b10 <HAL_GPIO_Init>

}
 80020d0:	bf00      	nop
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40010c00 	.word	0x40010c00
 80020e0:	40010800 	.word	0x40010800

080020e4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
	buzzer_run();
 80020ec:	f000 f85c 	bl	80021a8 <buzzer_run>
	readKeyInput();
 80020f0:	f7fe f82c 	bl	800014c <readKeyInput>
	timer_run();
 80020f4:	f000 f95e 	bl	80023b4 <timer_run>
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002104:	b672      	cpsid	i
}
 8002106:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002108:	e7fe      	b.n	8002108 <Error_Handler+0x8>
	...

0800210c <buzzer_init>:
int signal = 1;
uint8_t idx = 0;
uint16_t beep[3] = {1,1,1};
uint32_t scale = 0;

void buzzer_init(TIM_TypeDef *tim){
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
	scale = tim->PSC;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002118:	4a04      	ldr	r2, [pc, #16]	; (800212c <buzzer_init+0x20>)
 800211a:	6013      	str	r3, [r2, #0]
	setTimerBuzzer(10);
 800211c:	200a      	movs	r0, #10
 800211e:	f000 f92d 	bl	800237c <setTimerBuzzer>
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	200000bc 	.word	0x200000bc

08002130 <buzzer_sound>:
		NOTE_B5,NOTE_B5,0,NOTE_B5, //4
		NOTE_CS6,NOTE_D6,0, NOTE_G5, //4
		NOTE_FS5, NOTE_F5, NOTE_D6 , NOTE_AS5, NOTE_B5, NOTE_B5//6
};

void buzzer_sound(TIM_HandleTypeDef htim ,int volume){
 8002130:	b084      	sub	sp, #16
 8002132:	b580      	push	{r7, lr}
 8002134:	af00      	add	r7, sp, #0
 8002136:	f107 0c08 	add.w	ip, r7, #8
 800213a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		TIM_CCxChannelCmd(TIM3, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800213e:	2201      	movs	r2, #1
 8002140:	2100      	movs	r1, #0
 8002142:	4816      	ldr	r0, [pc, #88]	; (800219c <buzzer_sound+0x6c>)
 8002144:	f002 f98c 	bl	8004460 <TIM_CCxChannelCmd>
		__HAL_TIM_SET_COMPARE(&htim,TIM_CHANNEL_1,volume + 20*idx);
 8002148:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <buzzer_sound+0x70>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	461a      	mov	r2, r3
 8002158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800215a:	441a      	add	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	635a      	str	r2, [r3, #52]	; 0x34
		// TIM3->PSC = 64000/dio[i%72];// melody[i%3];
		TIM3->PSC = (TIM3->PSC + 1)%63 + 20;// melody[i%3];
 8002160:	4b0e      	ldr	r3, [pc, #56]	; (800219c <buzzer_sound+0x6c>)
 8002162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002164:	1c59      	adds	r1, r3, #1
 8002166:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <buzzer_sound+0x74>)
 8002168:	fba3 2301 	umull	r2, r3, r3, r1
 800216c:	1aca      	subs	r2, r1, r3
 800216e:	0852      	lsrs	r2, r2, #1
 8002170:	4413      	add	r3, r2
 8002172:	095a      	lsrs	r2, r3, #5
 8002174:	4613      	mov	r3, r2
 8002176:	019b      	lsls	r3, r3, #6
 8002178:	1a9b      	subs	r3, r3, r2
 800217a:	1aca      	subs	r2, r1, r3
 800217c:	4907      	ldr	r1, [pc, #28]	; (800219c <buzzer_sound+0x6c>)
 800217e:	f102 0314 	add.w	r3, r2, #20
 8002182:	628b      	str	r3, [r1, #40]	; 0x28
		idx++;
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <buzzer_sound+0x70>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	3301      	adds	r3, #1
 800218a:	b2da      	uxtb	r2, r3
 800218c:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <buzzer_sound+0x70>)
 800218e:	701a      	strb	r2, [r3, #0]
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002198:	b004      	add	sp, #16
 800219a:	4770      	bx	lr
 800219c:	40000400 	.word	0x40000400
 80021a0:	200000b8 	.word	0x200000b8
 80021a4:	04104105 	.word	0x04104105

080021a8 <buzzer_run>:

void buzzer_run(){
 80021a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021aa:	b091      	sub	sp, #68	; 0x44
 80021ac:	af10      	add	r7, sp, #64	; 0x40
	if(buzzerTimer_flag == 1){
 80021ae:	4b19      	ldr	r3, [pc, #100]	; (8002214 <buzzer_run+0x6c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d12a      	bne.n	800220c <buzzer_run+0x64>
		if (buzzer_warning == 1) buzzer_sound(htim3, 40);
 80021b6:	4b18      	ldr	r3, [pc, #96]	; (8002218 <buzzer_run+0x70>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d113      	bne.n	80021e6 <buzzer_run+0x3e>
 80021be:	4e17      	ldr	r6, [pc, #92]	; (800221c <buzzer_run+0x74>)
 80021c0:	2328      	movs	r3, #40	; 0x28
 80021c2:	930e      	str	r3, [sp, #56]	; 0x38
 80021c4:	466d      	mov	r5, sp
 80021c6:	f106 0410 	add.w	r4, r6, #16
 80021ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021da:	e885 0003 	stmia.w	r5, {r0, r1}
 80021de:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80021e2:	f7ff ffa5 	bl	8002130 <buzzer_sound>
		if (buzzer_warning == 0){
 80021e6:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <buzzer_run+0x70>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10b      	bne.n	8002206 <buzzer_run+0x5e>
			TIM_CCxChannelCmd(TIM3, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80021ee:	2200      	movs	r2, #0
 80021f0:	2100      	movs	r1, #0
 80021f2:	480b      	ldr	r0, [pc, #44]	; (8002220 <buzzer_run+0x78>)
 80021f4:	f002 f934 	bl	8004460 <TIM_CCxChannelCmd>
			idx = 0;
 80021f8:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <buzzer_run+0x7c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
			TIM3->PSC = scale;
 80021fe:	4a08      	ldr	r2, [pc, #32]	; (8002220 <buzzer_run+0x78>)
 8002200:	4b09      	ldr	r3, [pc, #36]	; (8002228 <buzzer_run+0x80>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6293      	str	r3, [r2, #40]	; 0x28
		}
		setTimerBuzzer(170);
 8002206:	20aa      	movs	r0, #170	; 0xaa
 8002208:	f000 f8b8 	bl	800237c <setTimerBuzzer>
	}
}
 800220c:	bf00      	nop
 800220e:	3704      	adds	r7, #4
 8002210:	46bd      	mov	sp, r7
 8002212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002214:	20000278 	.word	0x20000278
 8002218:	200000b4 	.word	0x200000b4
 800221c:	20000164 	.word	0x20000164
 8002220:	40000400 	.word	0x40000400
 8002224:	200000b8 	.word	0x200000b8
 8002228:	200000bc 	.word	0x200000bc

0800222c <setTimerTraffic1>:
int countDownTimer1_counter;
int countDownTimer2_counter;
int scanFreqTimer_counter;
int buzzerTimer_counter;

void setTimerTraffic1(int duration){
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	trafficTimer1_counter = duration/TIMER_CYCLE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a08      	ldr	r2, [pc, #32]	; (8002258 <setTimerTraffic1+0x2c>)
 8002238:	fb82 1203 	smull	r1, r2, r2, r3
 800223c:	1092      	asrs	r2, r2, #2
 800223e:	17db      	asrs	r3, r3, #31
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	4a06      	ldr	r2, [pc, #24]	; (800225c <setTimerTraffic1+0x30>)
 8002244:	6013      	str	r3, [r2, #0]
	trafficTimer1_flag = 0;
 8002246:	4b06      	ldr	r3, [pc, #24]	; (8002260 <setTimerTraffic1+0x34>)
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	66666667 	.word	0x66666667
 800225c:	20000258 	.word	0x20000258
 8002260:	20000274 	.word	0x20000274

08002264 <setTimerWait>:
void setTimerTraffic2(int duration){
	trafficTimer2_counter = duration/TIMER_CYCLE;
	trafficTimer2_flag = 0;
}

void setTimerWait(int duration){
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	waitTimer_counter = duration/TIMER_CYCLE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a08      	ldr	r2, [pc, #32]	; (8002290 <setTimerWait+0x2c>)
 8002270:	fb82 1203 	smull	r1, r2, r2, r3
 8002274:	1092      	asrs	r2, r2, #2
 8002276:	17db      	asrs	r3, r3, #31
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	4a06      	ldr	r2, [pc, #24]	; (8002294 <setTimerWait+0x30>)
 800227c:	6013      	str	r3, [r2, #0]
	waitTimer_flag = 0;
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <setTimerWait+0x34>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	66666667 	.word	0x66666667
 8002294:	2000024c 	.word	0x2000024c
 8002298:	20000268 	.word	0x20000268

0800229c <setTimerModify>:

void setTimerModify(int duration){
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	modifyTimer_counter = duration/TIMER_CYCLE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a08      	ldr	r2, [pc, #32]	; (80022c8 <setTimerModify+0x2c>)
 80022a8:	fb82 1203 	smull	r1, r2, r2, r3
 80022ac:	1092      	asrs	r2, r2, #2
 80022ae:	17db      	asrs	r3, r3, #31
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	4a06      	ldr	r2, [pc, #24]	; (80022cc <setTimerModify+0x30>)
 80022b4:	6013      	str	r3, [r2, #0]
	modifyTimer_flag = 0;
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <setTimerModify+0x34>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	66666667 	.word	0x66666667
 80022cc:	2000027c 	.word	0x2000027c
 80022d0:	2000025c 	.word	0x2000025c

080022d4 <setTimerTriggerLed>:

void setTimerTriggerLed(int duration){
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
	timerLed_counter = duration/TIMER_CYCLE;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a08      	ldr	r2, [pc, #32]	; (8002300 <setTimerTriggerLed+0x2c>)
 80022e0:	fb82 1203 	smull	r1, r2, r2, r3
 80022e4:	1092      	asrs	r2, r2, #2
 80022e6:	17db      	asrs	r3, r3, #31
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	4a06      	ldr	r2, [pc, #24]	; (8002304 <setTimerTriggerLed+0x30>)
 80022ec:	6013      	str	r3, [r2, #0]
	timerLed_flag = 0;
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <setTimerTriggerLed+0x34>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	66666667 	.word	0x66666667
 8002304:	20000244 	.word	0x20000244
 8002308:	20000250 	.word	0x20000250

0800230c <setTimerCounter1>:

void setTimerCounter1(int duration){
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	countDownTimer1_counter = duration/TIMER_CYCLE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a08      	ldr	r2, [pc, #32]	; (8002338 <setTimerCounter1+0x2c>)
 8002318:	fb82 1203 	smull	r1, r2, r2, r3
 800231c:	1092      	asrs	r2, r2, #2
 800231e:	17db      	asrs	r3, r3, #31
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	4a06      	ldr	r2, [pc, #24]	; (800233c <setTimerCounter1+0x30>)
 8002324:	6013      	str	r3, [r2, #0]
	countDownTimer1_flag = 0;
 8002326:	4b06      	ldr	r3, [pc, #24]	; (8002340 <setTimerCounter1+0x34>)
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	66666667 	.word	0x66666667
 800233c:	20000240 	.word	0x20000240
 8002340:	2000023c 	.word	0x2000023c

08002344 <setTimerScanFreq>:
void setTimerCounter2(int duration){
	countDownTimer2_counter = duration/TIMER_CYCLE;
	countDownTimer2_flag = 0;
}

void setTimerScanFreq(int duration){
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
	scanFreqTimer_counter = duration/TIMER_CYCLE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a08      	ldr	r2, [pc, #32]	; (8002370 <setTimerScanFreq+0x2c>)
 8002350:	fb82 1203 	smull	r1, r2, r2, r3
 8002354:	1092      	asrs	r2, r2, #2
 8002356:	17db      	asrs	r3, r3, #31
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	4a06      	ldr	r2, [pc, #24]	; (8002374 <setTimerScanFreq+0x30>)
 800235c:	6013      	str	r3, [r2, #0]
	scanFreqTimer_flag = 0;
 800235e:	4b06      	ldr	r3, [pc, #24]	; (8002378 <setTimerScanFreq+0x34>)
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	66666667 	.word	0x66666667
 8002374:	2000026c 	.word	0x2000026c
 8002378:	20000264 	.word	0x20000264

0800237c <setTimerBuzzer>:

void setTimerBuzzer(int duration){
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
	buzzerTimer_counter = duration/TIMER_CYCLE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a08      	ldr	r2, [pc, #32]	; (80023a8 <setTimerBuzzer+0x2c>)
 8002388:	fb82 1203 	smull	r1, r2, r2, r3
 800238c:	1092      	asrs	r2, r2, #2
 800238e:	17db      	asrs	r3, r3, #31
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	4a06      	ldr	r2, [pc, #24]	; (80023ac <setTimerBuzzer+0x30>)
 8002394:	6013      	str	r3, [r2, #0]
	buzzerTimer_flag = 0;
 8002396:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <setTimerBuzzer+0x34>)
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	66666667 	.word	0x66666667
 80023ac:	20000270 	.word	0x20000270
 80023b0:	20000278 	.word	0x20000278

080023b4 <timer_run>:

void timer_run(){
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
	if(trafficTimer1_counter >= 0){
 80023b8:	4b49      	ldr	r3, [pc, #292]	; (80024e0 <timer_run+0x12c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	db0b      	blt.n	80023d8 <timer_run+0x24>
		trafficTimer1_counter --;
 80023c0:	4b47      	ldr	r3, [pc, #284]	; (80024e0 <timer_run+0x12c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	3b01      	subs	r3, #1
 80023c6:	4a46      	ldr	r2, [pc, #280]	; (80024e0 <timer_run+0x12c>)
 80023c8:	6013      	str	r3, [r2, #0]
		if(trafficTimer1_counter == 0) trafficTimer1_flag = 1;
 80023ca:	4b45      	ldr	r3, [pc, #276]	; (80024e0 <timer_run+0x12c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d102      	bne.n	80023d8 <timer_run+0x24>
 80023d2:	4b44      	ldr	r3, [pc, #272]	; (80024e4 <timer_run+0x130>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]
	}
	if(trafficTimer2_counter >= 0){
 80023d8:	4b43      	ldr	r3, [pc, #268]	; (80024e8 <timer_run+0x134>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	db0b      	blt.n	80023f8 <timer_run+0x44>
		trafficTimer2_counter --;
 80023e0:	4b41      	ldr	r3, [pc, #260]	; (80024e8 <timer_run+0x134>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	4a40      	ldr	r2, [pc, #256]	; (80024e8 <timer_run+0x134>)
 80023e8:	6013      	str	r3, [r2, #0]
		if(trafficTimer2_counter == 0) trafficTimer2_flag = 1;
 80023ea:	4b3f      	ldr	r3, [pc, #252]	; (80024e8 <timer_run+0x134>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d102      	bne.n	80023f8 <timer_run+0x44>
 80023f2:	4b3e      	ldr	r3, [pc, #248]	; (80024ec <timer_run+0x138>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
	}
	if(waitTimer_counter >= 0){
 80023f8:	4b3d      	ldr	r3, [pc, #244]	; (80024f0 <timer_run+0x13c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	db0b      	blt.n	8002418 <timer_run+0x64>
		waitTimer_counter --;
 8002400:	4b3b      	ldr	r3, [pc, #236]	; (80024f0 <timer_run+0x13c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	3b01      	subs	r3, #1
 8002406:	4a3a      	ldr	r2, [pc, #232]	; (80024f0 <timer_run+0x13c>)
 8002408:	6013      	str	r3, [r2, #0]
		if(waitTimer_counter == 0) waitTimer_flag = 1;
 800240a:	4b39      	ldr	r3, [pc, #228]	; (80024f0 <timer_run+0x13c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d102      	bne.n	8002418 <timer_run+0x64>
 8002412:	4b38      	ldr	r3, [pc, #224]	; (80024f4 <timer_run+0x140>)
 8002414:	2201      	movs	r2, #1
 8002416:	601a      	str	r2, [r3, #0]
	}
	if(modifyTimer_counter >= 0){
 8002418:	4b37      	ldr	r3, [pc, #220]	; (80024f8 <timer_run+0x144>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	db0b      	blt.n	8002438 <timer_run+0x84>
		modifyTimer_counter --;
 8002420:	4b35      	ldr	r3, [pc, #212]	; (80024f8 <timer_run+0x144>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	3b01      	subs	r3, #1
 8002426:	4a34      	ldr	r2, [pc, #208]	; (80024f8 <timer_run+0x144>)
 8002428:	6013      	str	r3, [r2, #0]
		if(modifyTimer_counter == 0) modifyTimer_flag = 1;
 800242a:	4b33      	ldr	r3, [pc, #204]	; (80024f8 <timer_run+0x144>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d102      	bne.n	8002438 <timer_run+0x84>
 8002432:	4b32      	ldr	r3, [pc, #200]	; (80024fc <timer_run+0x148>)
 8002434:	2201      	movs	r2, #1
 8002436:	601a      	str	r2, [r3, #0]
	}
	if(timerLed_counter >= 0){
 8002438:	4b31      	ldr	r3, [pc, #196]	; (8002500 <timer_run+0x14c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	db0b      	blt.n	8002458 <timer_run+0xa4>
		timerLed_counter --;
 8002440:	4b2f      	ldr	r3, [pc, #188]	; (8002500 <timer_run+0x14c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	3b01      	subs	r3, #1
 8002446:	4a2e      	ldr	r2, [pc, #184]	; (8002500 <timer_run+0x14c>)
 8002448:	6013      	str	r3, [r2, #0]
		if(timerLed_counter == 0) timerLed_flag = 1;
 800244a:	4b2d      	ldr	r3, [pc, #180]	; (8002500 <timer_run+0x14c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d102      	bne.n	8002458 <timer_run+0xa4>
 8002452:	4b2c      	ldr	r3, [pc, #176]	; (8002504 <timer_run+0x150>)
 8002454:	2201      	movs	r2, #1
 8002456:	601a      	str	r2, [r3, #0]
	}
	if(countDownTimer1_counter >= 0){
 8002458:	4b2b      	ldr	r3, [pc, #172]	; (8002508 <timer_run+0x154>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	db0b      	blt.n	8002478 <timer_run+0xc4>
		countDownTimer1_counter --;
 8002460:	4b29      	ldr	r3, [pc, #164]	; (8002508 <timer_run+0x154>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	3b01      	subs	r3, #1
 8002466:	4a28      	ldr	r2, [pc, #160]	; (8002508 <timer_run+0x154>)
 8002468:	6013      	str	r3, [r2, #0]
		if(countDownTimer1_counter == 0) countDownTimer1_flag = 1;
 800246a:	4b27      	ldr	r3, [pc, #156]	; (8002508 <timer_run+0x154>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d102      	bne.n	8002478 <timer_run+0xc4>
 8002472:	4b26      	ldr	r3, [pc, #152]	; (800250c <timer_run+0x158>)
 8002474:	2201      	movs	r2, #1
 8002476:	601a      	str	r2, [r3, #0]
	}
	if(countDownTimer2_counter >= 0){
 8002478:	4b25      	ldr	r3, [pc, #148]	; (8002510 <timer_run+0x15c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	db0b      	blt.n	8002498 <timer_run+0xe4>
		countDownTimer2_counter --;
 8002480:	4b23      	ldr	r3, [pc, #140]	; (8002510 <timer_run+0x15c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	3b01      	subs	r3, #1
 8002486:	4a22      	ldr	r2, [pc, #136]	; (8002510 <timer_run+0x15c>)
 8002488:	6013      	str	r3, [r2, #0]
		if(countDownTimer2_counter == 0) countDownTimer2_flag = 1;
 800248a:	4b21      	ldr	r3, [pc, #132]	; (8002510 <timer_run+0x15c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d102      	bne.n	8002498 <timer_run+0xe4>
 8002492:	4b20      	ldr	r3, [pc, #128]	; (8002514 <timer_run+0x160>)
 8002494:	2201      	movs	r2, #1
 8002496:	601a      	str	r2, [r3, #0]
	}
	if(scanFreqTimer_counter >= 0){
 8002498:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <timer_run+0x164>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	db0b      	blt.n	80024b8 <timer_run+0x104>
		scanFreqTimer_counter --;
 80024a0:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <timer_run+0x164>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	3b01      	subs	r3, #1
 80024a6:	4a1c      	ldr	r2, [pc, #112]	; (8002518 <timer_run+0x164>)
 80024a8:	6013      	str	r3, [r2, #0]
		if(scanFreqTimer_counter == 0) scanFreqTimer_flag = 1;
 80024aa:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <timer_run+0x164>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d102      	bne.n	80024b8 <timer_run+0x104>
 80024b2:	4b1a      	ldr	r3, [pc, #104]	; (800251c <timer_run+0x168>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	601a      	str	r2, [r3, #0]
	}
	if(buzzerTimer_counter >= 0){
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <timer_run+0x16c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	db0b      	blt.n	80024d8 <timer_run+0x124>
		buzzerTimer_counter --;
 80024c0:	4b17      	ldr	r3, [pc, #92]	; (8002520 <timer_run+0x16c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	3b01      	subs	r3, #1
 80024c6:	4a16      	ldr	r2, [pc, #88]	; (8002520 <timer_run+0x16c>)
 80024c8:	6013      	str	r3, [r2, #0]
			if(buzzerTimer_counter == 0) buzzerTimer_flag = 1;
 80024ca:	4b15      	ldr	r3, [pc, #84]	; (8002520 <timer_run+0x16c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d102      	bne.n	80024d8 <timer_run+0x124>
 80024d2:	4b14      	ldr	r3, [pc, #80]	; (8002524 <timer_run+0x170>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	601a      	str	r2, [r3, #0]
		}
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr
 80024e0:	20000258 	.word	0x20000258
 80024e4:	20000274 	.word	0x20000274
 80024e8:	20000248 	.word	0x20000248
 80024ec:	20000238 	.word	0x20000238
 80024f0:	2000024c 	.word	0x2000024c
 80024f4:	20000268 	.word	0x20000268
 80024f8:	2000027c 	.word	0x2000027c
 80024fc:	2000025c 	.word	0x2000025c
 8002500:	20000244 	.word	0x20000244
 8002504:	20000250 	.word	0x20000250
 8002508:	20000240 	.word	0x20000240
 800250c:	2000023c 	.word	0x2000023c
 8002510:	20000260 	.word	0x20000260
 8002514:	20000254 	.word	0x20000254
 8002518:	2000026c 	.word	0x2000026c
 800251c:	20000264 	.word	0x20000264
 8002520:	20000270 	.word	0x20000270
 8002524:	20000278 	.word	0x20000278

08002528 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800252e:	4b15      	ldr	r3, [pc, #84]	; (8002584 <HAL_MspInit+0x5c>)
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	4a14      	ldr	r2, [pc, #80]	; (8002584 <HAL_MspInit+0x5c>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6193      	str	r3, [r2, #24]
 800253a:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_MspInit+0x5c>)
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002546:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <HAL_MspInit+0x5c>)
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	4a0e      	ldr	r2, [pc, #56]	; (8002584 <HAL_MspInit+0x5c>)
 800254c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002550:	61d3      	str	r3, [r2, #28]
 8002552:	4b0c      	ldr	r3, [pc, #48]	; (8002584 <HAL_MspInit+0x5c>)
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255a:	607b      	str	r3, [r7, #4]
 800255c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800255e:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <HAL_MspInit+0x60>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	4a04      	ldr	r2, [pc, #16]	; (8002588 <HAL_MspInit+0x60>)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800257a:	bf00      	nop
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr
 8002584:	40021000 	.word	0x40021000
 8002588:	40010000 	.word	0x40010000

0800258c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800259c:	d113      	bne.n	80025c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800259e:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <HAL_TIM_Base_MspInit+0x44>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	4a0b      	ldr	r2, [pc, #44]	; (80025d0 <HAL_TIM_Base_MspInit+0x44>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	61d3      	str	r3, [r2, #28]
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <HAL_TIM_Base_MspInit+0x44>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2100      	movs	r1, #0
 80025ba:	201c      	movs	r0, #28
 80025bc:	f000 fa71 	bl	8002aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025c0:	201c      	movs	r0, #28
 80025c2:	f000 fa8a 	bl	8002ada <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40021000 	.word	0x40021000

080025d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a09      	ldr	r2, [pc, #36]	; (8002608 <HAL_TIM_PWM_MspInit+0x34>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d10b      	bne.n	80025fe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <HAL_TIM_PWM_MspInit+0x38>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	4a08      	ldr	r2, [pc, #32]	; (800260c <HAL_TIM_PWM_MspInit+0x38>)
 80025ec:	f043 0302 	orr.w	r3, r3, #2
 80025f0:	61d3      	str	r3, [r2, #28]
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_TIM_PWM_MspInit+0x38>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr
 8002608:	40000400 	.word	0x40000400
 800260c:	40021000 	.word	0x40021000

08002610 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	f107 0310 	add.w	r3, r7, #16
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a0f      	ldr	r2, [pc, #60]	; (8002668 <HAL_TIM_MspPostInit+0x58>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d117      	bne.n	8002660 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002630:	4b0e      	ldr	r3, [pc, #56]	; (800266c <HAL_TIM_MspPostInit+0x5c>)
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	4a0d      	ldr	r2, [pc, #52]	; (800266c <HAL_TIM_MspPostInit+0x5c>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6193      	str	r3, [r2, #24]
 800263c:	4b0b      	ldr	r3, [pc, #44]	; (800266c <HAL_TIM_MspPostInit+0x5c>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002648:	2340      	movs	r3, #64	; 0x40
 800264a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264c:	2302      	movs	r3, #2
 800264e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002650:	2302      	movs	r3, #2
 8002652:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002654:	f107 0310 	add.w	r3, r7, #16
 8002658:	4619      	mov	r1, r3
 800265a:	4805      	ldr	r0, [pc, #20]	; (8002670 <HAL_TIM_MspPostInit+0x60>)
 800265c:	f000 fa58 	bl	8002b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002660:	bf00      	nop
 8002662:	3720      	adds	r7, #32
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40000400 	.word	0x40000400
 800266c:	40021000 	.word	0x40021000
 8002670:	40010800 	.word	0x40010800

08002674 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	f107 0310 	add.w	r3, r7, #16
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a1b      	ldr	r2, [pc, #108]	; (80026fc <HAL_UART_MspInit+0x88>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d12f      	bne.n	80026f4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002694:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <HAL_UART_MspInit+0x8c>)
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	4a19      	ldr	r2, [pc, #100]	; (8002700 <HAL_UART_MspInit+0x8c>)
 800269a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800269e:	61d3      	str	r3, [r2, #28]
 80026a0:	4b17      	ldr	r3, [pc, #92]	; (8002700 <HAL_UART_MspInit+0x8c>)
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ac:	4b14      	ldr	r3, [pc, #80]	; (8002700 <HAL_UART_MspInit+0x8c>)
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	4a13      	ldr	r2, [pc, #76]	; (8002700 <HAL_UART_MspInit+0x8c>)
 80026b2:	f043 0304 	orr.w	r3, r3, #4
 80026b6:	6193      	str	r3, [r2, #24]
 80026b8:	4b11      	ldr	r3, [pc, #68]	; (8002700 <HAL_UART_MspInit+0x8c>)
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026c4:	2304      	movs	r3, #4
 80026c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c8:	2302      	movs	r3, #2
 80026ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026cc:	2303      	movs	r3, #3
 80026ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d0:	f107 0310 	add.w	r3, r7, #16
 80026d4:	4619      	mov	r1, r3
 80026d6:	480b      	ldr	r0, [pc, #44]	; (8002704 <HAL_UART_MspInit+0x90>)
 80026d8:	f000 fa1a 	bl	8002b10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026dc:	2308      	movs	r3, #8
 80026de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e8:	f107 0310 	add.w	r3, r7, #16
 80026ec:	4619      	mov	r1, r3
 80026ee:	4805      	ldr	r0, [pc, #20]	; (8002704 <HAL_UART_MspInit+0x90>)
 80026f0:	f000 fa0e 	bl	8002b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026f4:	bf00      	nop
 80026f6:	3720      	adds	r7, #32
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40004400 	.word	0x40004400
 8002700:	40021000 	.word	0x40021000
 8002704:	40010800 	.word	0x40010800

08002708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800270c:	e7fe      	b.n	800270c <NMI_Handler+0x4>

0800270e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002712:	e7fe      	b.n	8002712 <HardFault_Handler+0x4>

08002714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002718:	e7fe      	b.n	8002718 <MemManage_Handler+0x4>

0800271a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800271e:	e7fe      	b.n	800271e <BusFault_Handler+0x4>

08002720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002724:	e7fe      	b.n	8002724 <UsageFault_Handler+0x4>

08002726 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002726:	b480      	push	{r7}
 8002728:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800272a:	bf00      	nop
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr

08002732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002732:	b480      	push	{r7}
 8002734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr

0800273e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr

0800274a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800274e:	f000 f8b5 	bl	80028bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800275c:	4802      	ldr	r0, [pc, #8]	; (8002768 <TIM2_IRQHandler+0x10>)
 800275e:	f001 f951 	bl	8003a04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	200001ac 	.word	0x200001ac

0800276c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002774:	4a14      	ldr	r2, [pc, #80]	; (80027c8 <_sbrk+0x5c>)
 8002776:	4b15      	ldr	r3, [pc, #84]	; (80027cc <_sbrk+0x60>)
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002780:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <_sbrk+0x64>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d102      	bne.n	800278e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002788:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <_sbrk+0x64>)
 800278a:	4a12      	ldr	r2, [pc, #72]	; (80027d4 <_sbrk+0x68>)
 800278c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800278e:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <_sbrk+0x64>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4413      	add	r3, r2
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	429a      	cmp	r2, r3
 800279a:	d207      	bcs.n	80027ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800279c:	f002 f8ac 	bl	80048f8 <__errno>
 80027a0:	4603      	mov	r3, r0
 80027a2:	220c      	movs	r2, #12
 80027a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027a6:	f04f 33ff 	mov.w	r3, #4294967295
 80027aa:	e009      	b.n	80027c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027ac:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <_sbrk+0x64>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027b2:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <_sbrk+0x64>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4413      	add	r3, r2
 80027ba:	4a05      	ldr	r2, [pc, #20]	; (80027d0 <_sbrk+0x64>)
 80027bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027be:	68fb      	ldr	r3, [r7, #12]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20005000 	.word	0x20005000
 80027cc:	00000400 	.word	0x00000400
 80027d0:	200000c0 	.word	0x200000c0
 80027d4:	20000298 	.word	0x20000298

080027d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027e4:	480c      	ldr	r0, [pc, #48]	; (8002818 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027e6:	490d      	ldr	r1, [pc, #52]	; (800281c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027e8:	4a0d      	ldr	r2, [pc, #52]	; (8002820 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027ec:	e002      	b.n	80027f4 <LoopCopyDataInit>

080027ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027f2:	3304      	adds	r3, #4

080027f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027f8:	d3f9      	bcc.n	80027ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027fa:	4a0a      	ldr	r2, [pc, #40]	; (8002824 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027fc:	4c0a      	ldr	r4, [pc, #40]	; (8002828 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002800:	e001      	b.n	8002806 <LoopFillZerobss>

08002802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002804:	3204      	adds	r2, #4

08002806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002808:	d3fb      	bcc.n	8002802 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800280a:	f7ff ffe5 	bl	80027d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800280e:	f002 f879 	bl	8004904 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002812:	f7ff fabb 	bl	8001d8c <main>
  bx lr
 8002816:	4770      	bx	lr
  ldr r0, =_sdata
 8002818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800281c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002820:	08005354 	.word	0x08005354
  ldr r2, =_sbss
 8002824:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002828:	20000294 	.word	0x20000294

0800282c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800282c:	e7fe      	b.n	800282c <ADC1_2_IRQHandler>
	...

08002830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002834:	4b08      	ldr	r3, [pc, #32]	; (8002858 <HAL_Init+0x28>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a07      	ldr	r2, [pc, #28]	; (8002858 <HAL_Init+0x28>)
 800283a:	f043 0310 	orr.w	r3, r3, #16
 800283e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002840:	2003      	movs	r0, #3
 8002842:	f000 f923 	bl	8002a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002846:	200f      	movs	r0, #15
 8002848:	f000 f808 	bl	800285c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800284c:	f7ff fe6c 	bl	8002528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40022000 	.word	0x40022000

0800285c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002864:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <HAL_InitTick+0x54>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <HAL_InitTick+0x58>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	4619      	mov	r1, r3
 800286e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002872:	fbb3 f3f1 	udiv	r3, r3, r1
 8002876:	fbb2 f3f3 	udiv	r3, r2, r3
 800287a:	4618      	mov	r0, r3
 800287c:	f000 f93b 	bl	8002af6 <HAL_SYSTICK_Config>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e00e      	b.n	80028a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b0f      	cmp	r3, #15
 800288e:	d80a      	bhi.n	80028a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002890:	2200      	movs	r2, #0
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	f04f 30ff 	mov.w	r0, #4294967295
 8002898:	f000 f903 	bl	8002aa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800289c:	4a06      	ldr	r2, [pc, #24]	; (80028b8 <HAL_InitTick+0x5c>)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	e000      	b.n	80028a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	2000000c 	.word	0x2000000c
 80028b4:	20000014 	.word	0x20000014
 80028b8:	20000010 	.word	0x20000010

080028bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028c0:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <HAL_IncTick+0x1c>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	461a      	mov	r2, r3
 80028c6:	4b05      	ldr	r3, [pc, #20]	; (80028dc <HAL_IncTick+0x20>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4413      	add	r3, r2
 80028cc:	4a03      	ldr	r2, [pc, #12]	; (80028dc <HAL_IncTick+0x20>)
 80028ce:	6013      	str	r3, [r2, #0]
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	20000014 	.word	0x20000014
 80028dc:	20000280 	.word	0x20000280

080028e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return uwTick;
 80028e4:	4b02      	ldr	r3, [pc, #8]	; (80028f0 <HAL_GetTick+0x10>)
 80028e6:	681b      	ldr	r3, [r3, #0]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr
 80028f0:	20000280 	.word	0x20000280

080028f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002904:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <__NVIC_SetPriorityGrouping+0x44>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002910:	4013      	ands	r3, r2
 8002912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800291c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002926:	4a04      	ldr	r2, [pc, #16]	; (8002938 <__NVIC_SetPriorityGrouping+0x44>)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	60d3      	str	r3, [r2, #12]
}
 800292c:	bf00      	nop
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002940:	4b04      	ldr	r3, [pc, #16]	; (8002954 <__NVIC_GetPriorityGrouping+0x18>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	0a1b      	lsrs	r3, r3, #8
 8002946:	f003 0307 	and.w	r3, r3, #7
}
 800294a:	4618      	mov	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	2b00      	cmp	r3, #0
 8002968:	db0b      	blt.n	8002982 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	f003 021f 	and.w	r2, r3, #31
 8002970:	4906      	ldr	r1, [pc, #24]	; (800298c <__NVIC_EnableIRQ+0x34>)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	2001      	movs	r0, #1
 800297a:	fa00 f202 	lsl.w	r2, r0, r2
 800297e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr
 800298c:	e000e100 	.word	0xe000e100

08002990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	6039      	str	r1, [r7, #0]
 800299a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800299c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	db0a      	blt.n	80029ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	490c      	ldr	r1, [pc, #48]	; (80029dc <__NVIC_SetPriority+0x4c>)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	0112      	lsls	r2, r2, #4
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	440b      	add	r3, r1
 80029b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029b8:	e00a      	b.n	80029d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	4908      	ldr	r1, [pc, #32]	; (80029e0 <__NVIC_SetPriority+0x50>)
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	3b04      	subs	r3, #4
 80029c8:	0112      	lsls	r2, r2, #4
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	440b      	add	r3, r1
 80029ce:	761a      	strb	r2, [r3, #24]
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	e000e100 	.word	0xe000e100
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b089      	sub	sp, #36	; 0x24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	f1c3 0307 	rsb	r3, r3, #7
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	bf28      	it	cs
 8002a02:	2304      	movcs	r3, #4
 8002a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3304      	adds	r3, #4
 8002a0a:	2b06      	cmp	r3, #6
 8002a0c:	d902      	bls.n	8002a14 <NVIC_EncodePriority+0x30>
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	3b03      	subs	r3, #3
 8002a12:	e000      	b.n	8002a16 <NVIC_EncodePriority+0x32>
 8002a14:	2300      	movs	r3, #0
 8002a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a18:	f04f 32ff 	mov.w	r2, #4294967295
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43da      	mvns	r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	401a      	ands	r2, r3
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	fa01 f303 	lsl.w	r3, r1, r3
 8002a36:	43d9      	mvns	r1, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a3c:	4313      	orrs	r3, r2
         );
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3724      	adds	r7, #36	; 0x24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a58:	d301      	bcc.n	8002a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e00f      	b.n	8002a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a5e:	4a0a      	ldr	r2, [pc, #40]	; (8002a88 <SysTick_Config+0x40>)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a66:	210f      	movs	r1, #15
 8002a68:	f04f 30ff 	mov.w	r0, #4294967295
 8002a6c:	f7ff ff90 	bl	8002990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a70:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <SysTick_Config+0x40>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a76:	4b04      	ldr	r3, [pc, #16]	; (8002a88 <SysTick_Config+0x40>)
 8002a78:	2207      	movs	r2, #7
 8002a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	e000e010 	.word	0xe000e010

08002a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff ff2d 	bl	80028f4 <__NVIC_SetPriorityGrouping>
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b086      	sub	sp, #24
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	607a      	str	r2, [r7, #4]
 8002aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ab4:	f7ff ff42 	bl	800293c <__NVIC_GetPriorityGrouping>
 8002ab8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	68b9      	ldr	r1, [r7, #8]
 8002abe:	6978      	ldr	r0, [r7, #20]
 8002ac0:	f7ff ff90 	bl	80029e4 <NVIC_EncodePriority>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aca:	4611      	mov	r1, r2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff ff5f 	bl	8002990 <__NVIC_SetPriority>
}
 8002ad2:	bf00      	nop
 8002ad4:	3718      	adds	r7, #24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff ff35 	bl	8002958 <__NVIC_EnableIRQ>
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b082      	sub	sp, #8
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff ffa2 	bl	8002a48 <SysTick_Config>
 8002b04:	4603      	mov	r3, r0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
	...

08002b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b08b      	sub	sp, #44	; 0x2c
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b22:	e169      	b.n	8002df8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b24:	2201      	movs	r2, #1
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	69fa      	ldr	r2, [r7, #28]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	f040 8158 	bne.w	8002df2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	4a9a      	ldr	r2, [pc, #616]	; (8002db0 <HAL_GPIO_Init+0x2a0>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d05e      	beq.n	8002c0a <HAL_GPIO_Init+0xfa>
 8002b4c:	4a98      	ldr	r2, [pc, #608]	; (8002db0 <HAL_GPIO_Init+0x2a0>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d875      	bhi.n	8002c3e <HAL_GPIO_Init+0x12e>
 8002b52:	4a98      	ldr	r2, [pc, #608]	; (8002db4 <HAL_GPIO_Init+0x2a4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d058      	beq.n	8002c0a <HAL_GPIO_Init+0xfa>
 8002b58:	4a96      	ldr	r2, [pc, #600]	; (8002db4 <HAL_GPIO_Init+0x2a4>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d86f      	bhi.n	8002c3e <HAL_GPIO_Init+0x12e>
 8002b5e:	4a96      	ldr	r2, [pc, #600]	; (8002db8 <HAL_GPIO_Init+0x2a8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d052      	beq.n	8002c0a <HAL_GPIO_Init+0xfa>
 8002b64:	4a94      	ldr	r2, [pc, #592]	; (8002db8 <HAL_GPIO_Init+0x2a8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d869      	bhi.n	8002c3e <HAL_GPIO_Init+0x12e>
 8002b6a:	4a94      	ldr	r2, [pc, #592]	; (8002dbc <HAL_GPIO_Init+0x2ac>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d04c      	beq.n	8002c0a <HAL_GPIO_Init+0xfa>
 8002b70:	4a92      	ldr	r2, [pc, #584]	; (8002dbc <HAL_GPIO_Init+0x2ac>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d863      	bhi.n	8002c3e <HAL_GPIO_Init+0x12e>
 8002b76:	4a92      	ldr	r2, [pc, #584]	; (8002dc0 <HAL_GPIO_Init+0x2b0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d046      	beq.n	8002c0a <HAL_GPIO_Init+0xfa>
 8002b7c:	4a90      	ldr	r2, [pc, #576]	; (8002dc0 <HAL_GPIO_Init+0x2b0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d85d      	bhi.n	8002c3e <HAL_GPIO_Init+0x12e>
 8002b82:	2b12      	cmp	r3, #18
 8002b84:	d82a      	bhi.n	8002bdc <HAL_GPIO_Init+0xcc>
 8002b86:	2b12      	cmp	r3, #18
 8002b88:	d859      	bhi.n	8002c3e <HAL_GPIO_Init+0x12e>
 8002b8a:	a201      	add	r2, pc, #4	; (adr r2, 8002b90 <HAL_GPIO_Init+0x80>)
 8002b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b90:	08002c0b 	.word	0x08002c0b
 8002b94:	08002be5 	.word	0x08002be5
 8002b98:	08002bf7 	.word	0x08002bf7
 8002b9c:	08002c39 	.word	0x08002c39
 8002ba0:	08002c3f 	.word	0x08002c3f
 8002ba4:	08002c3f 	.word	0x08002c3f
 8002ba8:	08002c3f 	.word	0x08002c3f
 8002bac:	08002c3f 	.word	0x08002c3f
 8002bb0:	08002c3f 	.word	0x08002c3f
 8002bb4:	08002c3f 	.word	0x08002c3f
 8002bb8:	08002c3f 	.word	0x08002c3f
 8002bbc:	08002c3f 	.word	0x08002c3f
 8002bc0:	08002c3f 	.word	0x08002c3f
 8002bc4:	08002c3f 	.word	0x08002c3f
 8002bc8:	08002c3f 	.word	0x08002c3f
 8002bcc:	08002c3f 	.word	0x08002c3f
 8002bd0:	08002c3f 	.word	0x08002c3f
 8002bd4:	08002bed 	.word	0x08002bed
 8002bd8:	08002c01 	.word	0x08002c01
 8002bdc:	4a79      	ldr	r2, [pc, #484]	; (8002dc4 <HAL_GPIO_Init+0x2b4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d013      	beq.n	8002c0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002be2:	e02c      	b.n	8002c3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	623b      	str	r3, [r7, #32]
          break;
 8002bea:	e029      	b.n	8002c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	623b      	str	r3, [r7, #32]
          break;
 8002bf4:	e024      	b.n	8002c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	3308      	adds	r3, #8
 8002bfc:	623b      	str	r3, [r7, #32]
          break;
 8002bfe:	e01f      	b.n	8002c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	330c      	adds	r3, #12
 8002c06:	623b      	str	r3, [r7, #32]
          break;
 8002c08:	e01a      	b.n	8002c40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d102      	bne.n	8002c18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c12:	2304      	movs	r3, #4
 8002c14:	623b      	str	r3, [r7, #32]
          break;
 8002c16:	e013      	b.n	8002c40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d105      	bne.n	8002c2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c20:	2308      	movs	r3, #8
 8002c22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69fa      	ldr	r2, [r7, #28]
 8002c28:	611a      	str	r2, [r3, #16]
          break;
 8002c2a:	e009      	b.n	8002c40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c2c:	2308      	movs	r3, #8
 8002c2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69fa      	ldr	r2, [r7, #28]
 8002c34:	615a      	str	r2, [r3, #20]
          break;
 8002c36:	e003      	b.n	8002c40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	623b      	str	r3, [r7, #32]
          break;
 8002c3c:	e000      	b.n	8002c40 <HAL_GPIO_Init+0x130>
          break;
 8002c3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	2bff      	cmp	r3, #255	; 0xff
 8002c44:	d801      	bhi.n	8002c4a <HAL_GPIO_Init+0x13a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	e001      	b.n	8002c4e <HAL_GPIO_Init+0x13e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	2bff      	cmp	r3, #255	; 0xff
 8002c54:	d802      	bhi.n	8002c5c <HAL_GPIO_Init+0x14c>
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	e002      	b.n	8002c62 <HAL_GPIO_Init+0x152>
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	3b08      	subs	r3, #8
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	210f      	movs	r1, #15
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	401a      	ands	r2, r3
 8002c74:	6a39      	ldr	r1, [r7, #32]
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 80b1 	beq.w	8002df2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c90:	4b4d      	ldr	r3, [pc, #308]	; (8002dc8 <HAL_GPIO_Init+0x2b8>)
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	4a4c      	ldr	r2, [pc, #304]	; (8002dc8 <HAL_GPIO_Init+0x2b8>)
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	6193      	str	r3, [r2, #24]
 8002c9c:	4b4a      	ldr	r3, [pc, #296]	; (8002dc8 <HAL_GPIO_Init+0x2b8>)
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ca8:	4a48      	ldr	r2, [pc, #288]	; (8002dcc <HAL_GPIO_Init+0x2bc>)
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	089b      	lsrs	r3, r3, #2
 8002cae:	3302      	adds	r3, #2
 8002cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	220f      	movs	r2, #15
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a40      	ldr	r2, [pc, #256]	; (8002dd0 <HAL_GPIO_Init+0x2c0>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d013      	beq.n	8002cfc <HAL_GPIO_Init+0x1ec>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a3f      	ldr	r2, [pc, #252]	; (8002dd4 <HAL_GPIO_Init+0x2c4>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d00d      	beq.n	8002cf8 <HAL_GPIO_Init+0x1e8>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a3e      	ldr	r2, [pc, #248]	; (8002dd8 <HAL_GPIO_Init+0x2c8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d007      	beq.n	8002cf4 <HAL_GPIO_Init+0x1e4>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a3d      	ldr	r2, [pc, #244]	; (8002ddc <HAL_GPIO_Init+0x2cc>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d101      	bne.n	8002cf0 <HAL_GPIO_Init+0x1e0>
 8002cec:	2303      	movs	r3, #3
 8002cee:	e006      	b.n	8002cfe <HAL_GPIO_Init+0x1ee>
 8002cf0:	2304      	movs	r3, #4
 8002cf2:	e004      	b.n	8002cfe <HAL_GPIO_Init+0x1ee>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	e002      	b.n	8002cfe <HAL_GPIO_Init+0x1ee>
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e000      	b.n	8002cfe <HAL_GPIO_Init+0x1ee>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d00:	f002 0203 	and.w	r2, r2, #3
 8002d04:	0092      	lsls	r2, r2, #2
 8002d06:	4093      	lsls	r3, r2
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d0e:	492f      	ldr	r1, [pc, #188]	; (8002dcc <HAL_GPIO_Init+0x2bc>)
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	089b      	lsrs	r3, r3, #2
 8002d14:	3302      	adds	r3, #2
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d006      	beq.n	8002d36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d28:	4b2d      	ldr	r3, [pc, #180]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	492c      	ldr	r1, [pc, #176]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	600b      	str	r3, [r1, #0]
 8002d34:	e006      	b.n	8002d44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d36:	4b2a      	ldr	r3, [pc, #168]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	4928      	ldr	r1, [pc, #160]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d006      	beq.n	8002d5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d50:	4b23      	ldr	r3, [pc, #140]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	4922      	ldr	r1, [pc, #136]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	604b      	str	r3, [r1, #4]
 8002d5c:	e006      	b.n	8002d6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d5e:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	43db      	mvns	r3, r3
 8002d66:	491e      	ldr	r1, [pc, #120]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d006      	beq.n	8002d86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d78:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	4918      	ldr	r1, [pc, #96]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	608b      	str	r3, [r1, #8]
 8002d84:	e006      	b.n	8002d94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d86:	4b16      	ldr	r3, [pc, #88]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	4914      	ldr	r1, [pc, #80]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d021      	beq.n	8002de4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002da0:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	490e      	ldr	r1, [pc, #56]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60cb      	str	r3, [r1, #12]
 8002dac:	e021      	b.n	8002df2 <HAL_GPIO_Init+0x2e2>
 8002dae:	bf00      	nop
 8002db0:	10320000 	.word	0x10320000
 8002db4:	10310000 	.word	0x10310000
 8002db8:	10220000 	.word	0x10220000
 8002dbc:	10210000 	.word	0x10210000
 8002dc0:	10120000 	.word	0x10120000
 8002dc4:	10110000 	.word	0x10110000
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40010000 	.word	0x40010000
 8002dd0:	40010800 	.word	0x40010800
 8002dd4:	40010c00 	.word	0x40010c00
 8002dd8:	40011000 	.word	0x40011000
 8002ddc:	40011400 	.word	0x40011400
 8002de0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002de4:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <HAL_GPIO_Init+0x304>)
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	43db      	mvns	r3, r3
 8002dec:	4909      	ldr	r1, [pc, #36]	; (8002e14 <HAL_GPIO_Init+0x304>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	3301      	adds	r3, #1
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f47f ae8e 	bne.w	8002b24 <HAL_GPIO_Init+0x14>
  }
}
 8002e08:	bf00      	nop
 8002e0a:	bf00      	nop
 8002e0c:	372c      	adds	r7, #44	; 0x2c
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr
 8002e14:	40010400 	.word	0x40010400

08002e18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	887b      	ldrh	r3, [r7, #2]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d002      	beq.n	8002e36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e30:	2301      	movs	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
 8002e34:	e001      	b.n	8002e3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e36:	2300      	movs	r3, #0
 8002e38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr

08002e46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	807b      	strh	r3, [r7, #2]
 8002e52:	4613      	mov	r3, r2
 8002e54:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e56:	787b      	ldrb	r3, [r7, #1]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e5c:	887a      	ldrh	r2, [r7, #2]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e62:	e003      	b.n	8002e6c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e64:	887b      	ldrh	r3, [r7, #2]
 8002e66:	041a      	lsls	r2, r3, #16
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	611a      	str	r2, [r3, #16]
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr

08002e76 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b085      	sub	sp, #20
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	460b      	mov	r3, r1
 8002e80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e88:	887a      	ldrh	r2, [r7, #2]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	041a      	lsls	r2, r3, #16
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	43d9      	mvns	r1, r3
 8002e94:	887b      	ldrh	r3, [r7, #2]
 8002e96:	400b      	ands	r3, r1
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	611a      	str	r2, [r3, #16]
}
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e26c      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 8087 	beq.w	8002fd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ec8:	4b92      	ldr	r3, [pc, #584]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 030c 	and.w	r3, r3, #12
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d00c      	beq.n	8002eee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ed4:	4b8f      	ldr	r3, [pc, #572]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 030c 	and.w	r3, r3, #12
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d112      	bne.n	8002f06 <HAL_RCC_OscConfig+0x5e>
 8002ee0:	4b8c      	ldr	r3, [pc, #560]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eec:	d10b      	bne.n	8002f06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eee:	4b89      	ldr	r3, [pc, #548]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d06c      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x12c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d168      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e246      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f0e:	d106      	bne.n	8002f1e <HAL_RCC_OscConfig+0x76>
 8002f10:	4b80      	ldr	r3, [pc, #512]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a7f      	ldr	r2, [pc, #508]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	e02e      	b.n	8002f7c <HAL_RCC_OscConfig+0xd4>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10c      	bne.n	8002f40 <HAL_RCC_OscConfig+0x98>
 8002f26:	4b7b      	ldr	r3, [pc, #492]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a7a      	ldr	r2, [pc, #488]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	4b78      	ldr	r3, [pc, #480]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a77      	ldr	r2, [pc, #476]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e01d      	b.n	8002f7c <HAL_RCC_OscConfig+0xd4>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCC_OscConfig+0xbc>
 8002f4a:	4b72      	ldr	r3, [pc, #456]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a71      	ldr	r2, [pc, #452]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	4b6f      	ldr	r3, [pc, #444]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a6e      	ldr	r2, [pc, #440]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	e00b      	b.n	8002f7c <HAL_RCC_OscConfig+0xd4>
 8002f64:	4b6b      	ldr	r3, [pc, #428]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a6a      	ldr	r2, [pc, #424]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	4b68      	ldr	r3, [pc, #416]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a67      	ldr	r2, [pc, #412]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d013      	beq.n	8002fac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f84:	f7ff fcac 	bl	80028e0 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f8c:	f7ff fca8 	bl	80028e0 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	; 0x64
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e1fa      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9e:	4b5d      	ldr	r3, [pc, #372]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0xe4>
 8002faa:	e014      	b.n	8002fd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7ff fc98 	bl	80028e0 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb4:	f7ff fc94 	bl	80028e0 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b64      	cmp	r3, #100	; 0x64
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e1e6      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc6:	4b53      	ldr	r3, [pc, #332]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x10c>
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d063      	beq.n	80030aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fe2:	4b4c      	ldr	r3, [pc, #304]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00b      	beq.n	8003006 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fee:	4b49      	ldr	r3, [pc, #292]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d11c      	bne.n	8003034 <HAL_RCC_OscConfig+0x18c>
 8002ffa:	4b46      	ldr	r3, [pc, #280]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d116      	bne.n	8003034 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003006:	4b43      	ldr	r3, [pc, #268]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d005      	beq.n	800301e <HAL_RCC_OscConfig+0x176>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d001      	beq.n	800301e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e1ba      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301e:	4b3d      	ldr	r3, [pc, #244]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4939      	ldr	r1, [pc, #228]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003032:	e03a      	b.n	80030aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d020      	beq.n	800307e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800303c:	4b36      	ldr	r3, [pc, #216]	; (8003118 <HAL_RCC_OscConfig+0x270>)
 800303e:	2201      	movs	r2, #1
 8003040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003042:	f7ff fc4d 	bl	80028e0 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800304a:	f7ff fc49 	bl	80028e0 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e19b      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305c:	4b2d      	ldr	r3, [pc, #180]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0f0      	beq.n	800304a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003068:	4b2a      	ldr	r3, [pc, #168]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4927      	ldr	r1, [pc, #156]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8003078:	4313      	orrs	r3, r2
 800307a:	600b      	str	r3, [r1, #0]
 800307c:	e015      	b.n	80030aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800307e:	4b26      	ldr	r3, [pc, #152]	; (8003118 <HAL_RCC_OscConfig+0x270>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7ff fc2c 	bl	80028e0 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800308c:	f7ff fc28 	bl	80028e0 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e17a      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309e:	4b1d      	ldr	r3, [pc, #116]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d03a      	beq.n	800312c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d019      	beq.n	80030f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030be:	4b17      	ldr	r3, [pc, #92]	; (800311c <HAL_RCC_OscConfig+0x274>)
 80030c0:	2201      	movs	r2, #1
 80030c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c4:	f7ff fc0c 	bl	80028e0 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030cc:	f7ff fc08 	bl	80028e0 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e15a      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030de:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030ea:	2001      	movs	r0, #1
 80030ec:	f000 fad8 	bl	80036a0 <RCC_Delay>
 80030f0:	e01c      	b.n	800312c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f2:	4b0a      	ldr	r3, [pc, #40]	; (800311c <HAL_RCC_OscConfig+0x274>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f8:	f7ff fbf2 	bl	80028e0 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030fe:	e00f      	b.n	8003120 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003100:	f7ff fbee 	bl	80028e0 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d908      	bls.n	8003120 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e140      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000
 8003118:	42420000 	.word	0x42420000
 800311c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003120:	4b9e      	ldr	r3, [pc, #632]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1e9      	bne.n	8003100 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80a6 	beq.w	8003286 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800313a:	2300      	movs	r3, #0
 800313c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313e:	4b97      	ldr	r3, [pc, #604]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10d      	bne.n	8003166 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800314a:	4b94      	ldr	r3, [pc, #592]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	4a93      	ldr	r2, [pc, #588]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 8003150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003154:	61d3      	str	r3, [r2, #28]
 8003156:	4b91      	ldr	r3, [pc, #580]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315e:	60bb      	str	r3, [r7, #8]
 8003160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003162:	2301      	movs	r3, #1
 8003164:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003166:	4b8e      	ldr	r3, [pc, #568]	; (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316e:	2b00      	cmp	r3, #0
 8003170:	d118      	bne.n	80031a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003172:	4b8b      	ldr	r3, [pc, #556]	; (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a8a      	ldr	r2, [pc, #552]	; (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 8003178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317e:	f7ff fbaf 	bl	80028e0 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003186:	f7ff fbab 	bl	80028e0 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b64      	cmp	r3, #100	; 0x64
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e0fd      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003198:	4b81      	ldr	r3, [pc, #516]	; (80033a0 <HAL_RCC_OscConfig+0x4f8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d106      	bne.n	80031ba <HAL_RCC_OscConfig+0x312>
 80031ac:	4b7b      	ldr	r3, [pc, #492]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4a7a      	ldr	r2, [pc, #488]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6213      	str	r3, [r2, #32]
 80031b8:	e02d      	b.n	8003216 <HAL_RCC_OscConfig+0x36e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10c      	bne.n	80031dc <HAL_RCC_OscConfig+0x334>
 80031c2:	4b76      	ldr	r3, [pc, #472]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	4a75      	ldr	r2, [pc, #468]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 80031c8:	f023 0301 	bic.w	r3, r3, #1
 80031cc:	6213      	str	r3, [r2, #32]
 80031ce:	4b73      	ldr	r3, [pc, #460]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	4a72      	ldr	r2, [pc, #456]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 80031d4:	f023 0304 	bic.w	r3, r3, #4
 80031d8:	6213      	str	r3, [r2, #32]
 80031da:	e01c      	b.n	8003216 <HAL_RCC_OscConfig+0x36e>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	2b05      	cmp	r3, #5
 80031e2:	d10c      	bne.n	80031fe <HAL_RCC_OscConfig+0x356>
 80031e4:	4b6d      	ldr	r3, [pc, #436]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	4a6c      	ldr	r2, [pc, #432]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 80031ea:	f043 0304 	orr.w	r3, r3, #4
 80031ee:	6213      	str	r3, [r2, #32]
 80031f0:	4b6a      	ldr	r3, [pc, #424]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	4a69      	ldr	r2, [pc, #420]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6213      	str	r3, [r2, #32]
 80031fc:	e00b      	b.n	8003216 <HAL_RCC_OscConfig+0x36e>
 80031fe:	4b67      	ldr	r3, [pc, #412]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	4a66      	ldr	r2, [pc, #408]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 8003204:	f023 0301 	bic.w	r3, r3, #1
 8003208:	6213      	str	r3, [r2, #32]
 800320a:	4b64      	ldr	r3, [pc, #400]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	4a63      	ldr	r2, [pc, #396]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 8003210:	f023 0304 	bic.w	r3, r3, #4
 8003214:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d015      	beq.n	800324a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321e:	f7ff fb5f 	bl	80028e0 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003224:	e00a      	b.n	800323c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003226:	f7ff fb5b 	bl	80028e0 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	f241 3288 	movw	r2, #5000	; 0x1388
 8003234:	4293      	cmp	r3, r2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e0ab      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323c:	4b57      	ldr	r3, [pc, #348]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0ee      	beq.n	8003226 <HAL_RCC_OscConfig+0x37e>
 8003248:	e014      	b.n	8003274 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324a:	f7ff fb49 	bl	80028e0 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003250:	e00a      	b.n	8003268 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003252:	f7ff fb45 	bl	80028e0 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003260:	4293      	cmp	r3, r2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e095      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003268:	4b4c      	ldr	r3, [pc, #304]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1ee      	bne.n	8003252 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003274:	7dfb      	ldrb	r3, [r7, #23]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d105      	bne.n	8003286 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800327a:	4b48      	ldr	r3, [pc, #288]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	4a47      	ldr	r2, [pc, #284]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 8003280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003284:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 8081 	beq.w	8003392 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003290:	4b42      	ldr	r3, [pc, #264]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 030c 	and.w	r3, r3, #12
 8003298:	2b08      	cmp	r3, #8
 800329a:	d061      	beq.n	8003360 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d146      	bne.n	8003332 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a4:	4b3f      	ldr	r3, [pc, #252]	; (80033a4 <HAL_RCC_OscConfig+0x4fc>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032aa:	f7ff fb19 	bl	80028e0 <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b2:	f7ff fb15 	bl	80028e0 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e067      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c4:	4b35      	ldr	r3, [pc, #212]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f0      	bne.n	80032b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d8:	d108      	bne.n	80032ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032da:	4b30      	ldr	r3, [pc, #192]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	492d      	ldr	r1, [pc, #180]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032ec:	4b2b      	ldr	r3, [pc, #172]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a19      	ldr	r1, [r3, #32]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	430b      	orrs	r3, r1
 80032fe:	4927      	ldr	r1, [pc, #156]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 8003300:	4313      	orrs	r3, r2
 8003302:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003304:	4b27      	ldr	r3, [pc, #156]	; (80033a4 <HAL_RCC_OscConfig+0x4fc>)
 8003306:	2201      	movs	r2, #1
 8003308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330a:	f7ff fae9 	bl	80028e0 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003312:	f7ff fae5 	bl	80028e0 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e037      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003324:	4b1d      	ldr	r3, [pc, #116]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_RCC_OscConfig+0x46a>
 8003330:	e02f      	b.n	8003392 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003332:	4b1c      	ldr	r3, [pc, #112]	; (80033a4 <HAL_RCC_OscConfig+0x4fc>)
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7ff fad2 	bl	80028e0 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003340:	f7ff face 	bl	80028e0 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e020      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003352:	4b12      	ldr	r3, [pc, #72]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x498>
 800335e:	e018      	b.n	8003392 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e013      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_RCC_OscConfig+0x4f4>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	429a      	cmp	r2, r3
 800337e:	d106      	bne.n	800338e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338a:	429a      	cmp	r2, r3
 800338c:	d001      	beq.n	8003392 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40021000 	.word	0x40021000
 80033a0:	40007000 	.word	0x40007000
 80033a4:	42420060 	.word	0x42420060

080033a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0d0      	b.n	800355e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033bc:	4b6a      	ldr	r3, [pc, #424]	; (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d910      	bls.n	80033ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ca:	4b67      	ldr	r3, [pc, #412]	; (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f023 0207 	bic.w	r2, r3, #7
 80033d2:	4965      	ldr	r1, [pc, #404]	; (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033da:	4b63      	ldr	r3, [pc, #396]	; (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d001      	beq.n	80033ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0b8      	b.n	800355e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d020      	beq.n	800343a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003404:	4b59      	ldr	r3, [pc, #356]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	4a58      	ldr	r2, [pc, #352]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 800340a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800340e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d005      	beq.n	8003428 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800341c:	4b53      	ldr	r3, [pc, #332]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	4a52      	ldr	r2, [pc, #328]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003422:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003426:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003428:	4b50      	ldr	r3, [pc, #320]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	494d      	ldr	r1, [pc, #308]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003436:	4313      	orrs	r3, r2
 8003438:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d040      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d107      	bne.n	800345e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344e:	4b47      	ldr	r3, [pc, #284]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d115      	bne.n	8003486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e07f      	b.n	800355e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d107      	bne.n	8003476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003466:	4b41      	ldr	r3, [pc, #260]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e073      	b.n	800355e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003476:	4b3d      	ldr	r3, [pc, #244]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e06b      	b.n	800355e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003486:	4b39      	ldr	r3, [pc, #228]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f023 0203 	bic.w	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	4936      	ldr	r1, [pc, #216]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003494:	4313      	orrs	r3, r2
 8003496:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003498:	f7ff fa22 	bl	80028e0 <HAL_GetTick>
 800349c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349e:	e00a      	b.n	80034b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a0:	f7ff fa1e 	bl	80028e0 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e053      	b.n	800355e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b6:	4b2d      	ldr	r3, [pc, #180]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f003 020c 	and.w	r2, r3, #12
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d1eb      	bne.n	80034a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034c8:	4b27      	ldr	r3, [pc, #156]	; (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d210      	bcs.n	80034f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d6:	4b24      	ldr	r3, [pc, #144]	; (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 0207 	bic.w	r2, r3, #7
 80034de:	4922      	ldr	r1, [pc, #136]	; (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e6:	4b20      	ldr	r3, [pc, #128]	; (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d001      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e032      	b.n	800355e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003504:	4b19      	ldr	r3, [pc, #100]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4916      	ldr	r1, [pc, #88]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003512:	4313      	orrs	r3, r2
 8003514:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d009      	beq.n	8003536 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003522:	4b12      	ldr	r3, [pc, #72]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	490e      	ldr	r1, [pc, #56]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003532:	4313      	orrs	r3, r2
 8003534:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003536:	f000 f821 	bl	800357c <HAL_RCC_GetSysClockFreq>
 800353a:	4602      	mov	r2, r0
 800353c:	4b0b      	ldr	r3, [pc, #44]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	091b      	lsrs	r3, r3, #4
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	490a      	ldr	r1, [pc, #40]	; (8003570 <HAL_RCC_ClockConfig+0x1c8>)
 8003548:	5ccb      	ldrb	r3, [r1, r3]
 800354a:	fa22 f303 	lsr.w	r3, r2, r3
 800354e:	4a09      	ldr	r2, [pc, #36]	; (8003574 <HAL_RCC_ClockConfig+0x1cc>)
 8003550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003552:	4b09      	ldr	r3, [pc, #36]	; (8003578 <HAL_RCC_ClockConfig+0x1d0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff f980 	bl	800285c <HAL_InitTick>

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40022000 	.word	0x40022000
 800356c:	40021000 	.word	0x40021000
 8003570:	08005300 	.word	0x08005300
 8003574:	2000000c 	.word	0x2000000c
 8003578:	20000010 	.word	0x20000010

0800357c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800357c:	b490      	push	{r4, r7}
 800357e:	b08a      	sub	sp, #40	; 0x28
 8003580:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003582:	4b2a      	ldr	r3, [pc, #168]	; (800362c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003584:	1d3c      	adds	r4, r7, #4
 8003586:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800358c:	f240 2301 	movw	r3, #513	; 0x201
 8003590:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	2300      	movs	r3, #0
 8003598:	61bb      	str	r3, [r7, #24]
 800359a:	2300      	movs	r3, #0
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035a6:	4b22      	ldr	r3, [pc, #136]	; (8003630 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	f003 030c 	and.w	r3, r3, #12
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d002      	beq.n	80035bc <HAL_RCC_GetSysClockFreq+0x40>
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d003      	beq.n	80035c2 <HAL_RCC_GetSysClockFreq+0x46>
 80035ba:	e02d      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035bc:	4b1d      	ldr	r3, [pc, #116]	; (8003634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035be:	623b      	str	r3, [r7, #32]
      break;
 80035c0:	e02d      	b.n	800361e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	0c9b      	lsrs	r3, r3, #18
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035ce:	4413      	add	r3, r2
 80035d0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80035d4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d013      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035e0:	4b13      	ldr	r3, [pc, #76]	; (8003630 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	0c5b      	lsrs	r3, r3, #17
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035ee:	4413      	add	r3, r2
 80035f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80035f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	4a0e      	ldr	r2, [pc, #56]	; (8003634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035fa:	fb02 f203 	mul.w	r2, r2, r3
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	fbb2 f3f3 	udiv	r3, r2, r3
 8003604:	627b      	str	r3, [r7, #36]	; 0x24
 8003606:	e004      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	4a0b      	ldr	r2, [pc, #44]	; (8003638 <HAL_RCC_GetSysClockFreq+0xbc>)
 800360c:	fb02 f303 	mul.w	r3, r2, r3
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	623b      	str	r3, [r7, #32]
      break;
 8003616:	e002      	b.n	800361e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003618:	4b06      	ldr	r3, [pc, #24]	; (8003634 <HAL_RCC_GetSysClockFreq+0xb8>)
 800361a:	623b      	str	r3, [r7, #32]
      break;
 800361c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800361e:	6a3b      	ldr	r3, [r7, #32]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3728      	adds	r7, #40	; 0x28
 8003624:	46bd      	mov	sp, r7
 8003626:	bc90      	pop	{r4, r7}
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	080052f0 	.word	0x080052f0
 8003630:	40021000 	.word	0x40021000
 8003634:	007a1200 	.word	0x007a1200
 8003638:	003d0900 	.word	0x003d0900

0800363c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003640:	4b02      	ldr	r3, [pc, #8]	; (800364c <HAL_RCC_GetHCLKFreq+0x10>)
 8003642:	681b      	ldr	r3, [r3, #0]
}
 8003644:	4618      	mov	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr
 800364c:	2000000c 	.word	0x2000000c

08003650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003654:	f7ff fff2 	bl	800363c <HAL_RCC_GetHCLKFreq>
 8003658:	4602      	mov	r2, r0
 800365a:	4b05      	ldr	r3, [pc, #20]	; (8003670 <HAL_RCC_GetPCLK1Freq+0x20>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	0a1b      	lsrs	r3, r3, #8
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	4903      	ldr	r1, [pc, #12]	; (8003674 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003666:	5ccb      	ldrb	r3, [r1, r3]
 8003668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800366c:	4618      	mov	r0, r3
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40021000 	.word	0x40021000
 8003674:	08005310 	.word	0x08005310

08003678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800367c:	f7ff ffde 	bl	800363c <HAL_RCC_GetHCLKFreq>
 8003680:	4602      	mov	r2, r0
 8003682:	4b05      	ldr	r3, [pc, #20]	; (8003698 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	0adb      	lsrs	r3, r3, #11
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	4903      	ldr	r1, [pc, #12]	; (800369c <HAL_RCC_GetPCLK2Freq+0x24>)
 800368e:	5ccb      	ldrb	r3, [r1, r3]
 8003690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003694:	4618      	mov	r0, r3
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40021000 	.word	0x40021000
 800369c:	08005310 	.word	0x08005310

080036a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036a8:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <RCC_Delay+0x34>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a0a      	ldr	r2, [pc, #40]	; (80036d8 <RCC_Delay+0x38>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	0a5b      	lsrs	r3, r3, #9
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	fb02 f303 	mul.w	r3, r2, r3
 80036ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036bc:	bf00      	nop
  }
  while (Delay --);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	1e5a      	subs	r2, r3, #1
 80036c2:	60fa      	str	r2, [r7, #12]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1f9      	bne.n	80036bc <RCC_Delay+0x1c>
}
 80036c8:	bf00      	nop
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr
 80036d4:	2000000c 	.word	0x2000000c
 80036d8:	10624dd3 	.word	0x10624dd3

080036dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e041      	b.n	8003772 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fe ff42 	bl	800258c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	4619      	mov	r1, r3
 800371a:	4610      	mov	r0, r2
 800371c:	f000 fc20 	bl	8003f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b01      	cmp	r3, #1
 800378e:	d001      	beq.n	8003794 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e03a      	b.n	800380a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a18      	ldr	r2, [pc, #96]	; (8003814 <HAL_TIM_Base_Start_IT+0x98>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00e      	beq.n	80037d4 <HAL_TIM_Base_Start_IT+0x58>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037be:	d009      	beq.n	80037d4 <HAL_TIM_Base_Start_IT+0x58>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a14      	ldr	r2, [pc, #80]	; (8003818 <HAL_TIM_Base_Start_IT+0x9c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d004      	beq.n	80037d4 <HAL_TIM_Base_Start_IT+0x58>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a13      	ldr	r2, [pc, #76]	; (800381c <HAL_TIM_Base_Start_IT+0xa0>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d111      	bne.n	80037f8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2b06      	cmp	r3, #6
 80037e4:	d010      	beq.n	8003808 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f042 0201 	orr.w	r2, r2, #1
 80037f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f6:	e007      	b.n	8003808 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0201 	orr.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr
 8003814:	40012c00 	.word	0x40012c00
 8003818:	40000400 	.word	0x40000400
 800381c:	40000800 	.word	0x40000800

08003820 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e041      	b.n	80038b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fe fec4 	bl	80025d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3304      	adds	r3, #4
 800385c:	4619      	mov	r1, r3
 800385e:	4610      	mov	r0, r2
 8003860:	f000 fb7e 	bl	8003f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d109      	bne.n	80038e4 <HAL_TIM_PWM_Start+0x24>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b01      	cmp	r3, #1
 80038da:	bf14      	ite	ne
 80038dc:	2301      	movne	r3, #1
 80038de:	2300      	moveq	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	e022      	b.n	800392a <HAL_TIM_PWM_Start+0x6a>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d109      	bne.n	80038fe <HAL_TIM_PWM_Start+0x3e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	bf14      	ite	ne
 80038f6:	2301      	movne	r3, #1
 80038f8:	2300      	moveq	r3, #0
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	e015      	b.n	800392a <HAL_TIM_PWM_Start+0x6a>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b08      	cmp	r3, #8
 8003902:	d109      	bne.n	8003918 <HAL_TIM_PWM_Start+0x58>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b01      	cmp	r3, #1
 800390e:	bf14      	ite	ne
 8003910:	2301      	movne	r3, #1
 8003912:	2300      	moveq	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	e008      	b.n	800392a <HAL_TIM_PWM_Start+0x6a>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b01      	cmp	r3, #1
 8003922:	bf14      	ite	ne
 8003924:	2301      	movne	r3, #1
 8003926:	2300      	moveq	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e05e      	b.n	80039f0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d104      	bne.n	8003942 <HAL_TIM_PWM_Start+0x82>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003940:	e013      	b.n	800396a <HAL_TIM_PWM_Start+0xaa>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b04      	cmp	r3, #4
 8003946:	d104      	bne.n	8003952 <HAL_TIM_PWM_Start+0x92>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003950:	e00b      	b.n	800396a <HAL_TIM_PWM_Start+0xaa>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b08      	cmp	r3, #8
 8003956:	d104      	bne.n	8003962 <HAL_TIM_PWM_Start+0xa2>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003960:	e003      	b.n	800396a <HAL_TIM_PWM_Start+0xaa>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2202      	movs	r2, #2
 8003966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2201      	movs	r2, #1
 8003970:	6839      	ldr	r1, [r7, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fd74 	bl	8004460 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a1e      	ldr	r2, [pc, #120]	; (80039f8 <HAL_TIM_PWM_Start+0x138>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d107      	bne.n	8003992 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003990:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a18      	ldr	r2, [pc, #96]	; (80039f8 <HAL_TIM_PWM_Start+0x138>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00e      	beq.n	80039ba <HAL_TIM_PWM_Start+0xfa>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a4:	d009      	beq.n	80039ba <HAL_TIM_PWM_Start+0xfa>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a14      	ldr	r2, [pc, #80]	; (80039fc <HAL_TIM_PWM_Start+0x13c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d004      	beq.n	80039ba <HAL_TIM_PWM_Start+0xfa>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a12      	ldr	r2, [pc, #72]	; (8003a00 <HAL_TIM_PWM_Start+0x140>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d111      	bne.n	80039de <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2b06      	cmp	r3, #6
 80039ca:	d010      	beq.n	80039ee <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0201 	orr.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039dc:	e007      	b.n	80039ee <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f042 0201 	orr.w	r2, r2, #1
 80039ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40012c00 	.word	0x40012c00
 80039fc:	40000400 	.word	0x40000400
 8003a00:	40000800 	.word	0x40000800

08003a04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d122      	bne.n	8003a60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d11b      	bne.n	8003a60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f06f 0202 	mvn.w	r2, #2
 8003a30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fa6f 	bl	8003f2a <HAL_TIM_IC_CaptureCallback>
 8003a4c:	e005      	b.n	8003a5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 fa62 	bl	8003f18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 fa71 	bl	8003f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d122      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d11b      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f06f 0204 	mvn.w	r2, #4
 8003a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2202      	movs	r2, #2
 8003a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fa45 	bl	8003f2a <HAL_TIM_IC_CaptureCallback>
 8003aa0:	e005      	b.n	8003aae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fa38 	bl	8003f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 fa47 	bl	8003f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d122      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f003 0308 	and.w	r3, r3, #8
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d11b      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0208 	mvn.w	r2, #8
 8003ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2204      	movs	r2, #4
 8003ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 fa1b 	bl	8003f2a <HAL_TIM_IC_CaptureCallback>
 8003af4:	e005      	b.n	8003b02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fa0e 	bl	8003f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fa1d 	bl	8003f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	2b10      	cmp	r3, #16
 8003b14:	d122      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 0310 	and.w	r3, r3, #16
 8003b20:	2b10      	cmp	r3, #16
 8003b22:	d11b      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0210 	mvn.w	r2, #16
 8003b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2208      	movs	r2, #8
 8003b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f9f1 	bl	8003f2a <HAL_TIM_IC_CaptureCallback>
 8003b48:	e005      	b.n	8003b56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f9e4 	bl	8003f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f9f3 	bl	8003f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d10e      	bne.n	8003b88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d107      	bne.n	8003b88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0201 	mvn.w	r2, #1
 8003b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7fe faae 	bl	80020e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b92:	2b80      	cmp	r3, #128	; 0x80
 8003b94:	d10e      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba0:	2b80      	cmp	r3, #128	; 0x80
 8003ba2:	d107      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fce1 	bl	8004576 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbe:	2b40      	cmp	r3, #64	; 0x40
 8003bc0:	d10e      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bcc:	2b40      	cmp	r3, #64	; 0x40
 8003bce:	d107      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f9b7 	bl	8003f4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b20      	cmp	r3, #32
 8003bec:	d10e      	bne.n	8003c0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b20      	cmp	r3, #32
 8003bfa:	d107      	bne.n	8003c0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0220 	mvn.w	r2, #32
 8003c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 fcac 	bl	8004564 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e0ac      	b.n	8003d88 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b0c      	cmp	r3, #12
 8003c3a:	f200 809f 	bhi.w	8003d7c <HAL_TIM_PWM_ConfigChannel+0x168>
 8003c3e:	a201      	add	r2, pc, #4	; (adr r2, 8003c44 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c44:	08003c79 	.word	0x08003c79
 8003c48:	08003d7d 	.word	0x08003d7d
 8003c4c:	08003d7d 	.word	0x08003d7d
 8003c50:	08003d7d 	.word	0x08003d7d
 8003c54:	08003cb9 	.word	0x08003cb9
 8003c58:	08003d7d 	.word	0x08003d7d
 8003c5c:	08003d7d 	.word	0x08003d7d
 8003c60:	08003d7d 	.word	0x08003d7d
 8003c64:	08003cfb 	.word	0x08003cfb
 8003c68:	08003d7d 	.word	0x08003d7d
 8003c6c:	08003d7d 	.word	0x08003d7d
 8003c70:	08003d7d 	.word	0x08003d7d
 8003c74:	08003d3b 	.word	0x08003d3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68b9      	ldr	r1, [r7, #8]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 f9d0 	bl	8004024 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0208 	orr.w	r2, r2, #8
 8003c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0204 	bic.w	r2, r2, #4
 8003ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6999      	ldr	r1, [r3, #24]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	619a      	str	r2, [r3, #24]
      break;
 8003cb6:	e062      	b.n	8003d7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68b9      	ldr	r1, [r7, #8]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fa16 	bl	80040f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699a      	ldr	r2, [r3, #24]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699a      	ldr	r2, [r3, #24]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6999      	ldr	r1, [r3, #24]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	021a      	lsls	r2, r3, #8
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	619a      	str	r2, [r3, #24]
      break;
 8003cf8:	e041      	b.n	8003d7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fa5f 	bl	80041c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0208 	orr.w	r2, r2, #8
 8003d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0204 	bic.w	r2, r2, #4
 8003d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69d9      	ldr	r1, [r3, #28]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	61da      	str	r2, [r3, #28]
      break;
 8003d38:	e021      	b.n	8003d7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68b9      	ldr	r1, [r7, #8]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 faa9 	bl	8004298 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	69da      	ldr	r2, [r3, #28]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	69da      	ldr	r2, [r3, #28]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	69d9      	ldr	r1, [r3, #28]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	021a      	lsls	r2, r3, #8
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	61da      	str	r2, [r3, #28]
      break;
 8003d7a:	e000      	b.n	8003d7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003d7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_TIM_ConfigClockSource+0x18>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e0b3      	b.n	8003f10 <HAL_TIM_ConfigClockSource+0x180>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de0:	d03e      	beq.n	8003e60 <HAL_TIM_ConfigClockSource+0xd0>
 8003de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de6:	f200 8087 	bhi.w	8003ef8 <HAL_TIM_ConfigClockSource+0x168>
 8003dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dee:	f000 8085 	beq.w	8003efc <HAL_TIM_ConfigClockSource+0x16c>
 8003df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df6:	d87f      	bhi.n	8003ef8 <HAL_TIM_ConfigClockSource+0x168>
 8003df8:	2b70      	cmp	r3, #112	; 0x70
 8003dfa:	d01a      	beq.n	8003e32 <HAL_TIM_ConfigClockSource+0xa2>
 8003dfc:	2b70      	cmp	r3, #112	; 0x70
 8003dfe:	d87b      	bhi.n	8003ef8 <HAL_TIM_ConfigClockSource+0x168>
 8003e00:	2b60      	cmp	r3, #96	; 0x60
 8003e02:	d050      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x116>
 8003e04:	2b60      	cmp	r3, #96	; 0x60
 8003e06:	d877      	bhi.n	8003ef8 <HAL_TIM_ConfigClockSource+0x168>
 8003e08:	2b50      	cmp	r3, #80	; 0x50
 8003e0a:	d03c      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0xf6>
 8003e0c:	2b50      	cmp	r3, #80	; 0x50
 8003e0e:	d873      	bhi.n	8003ef8 <HAL_TIM_ConfigClockSource+0x168>
 8003e10:	2b40      	cmp	r3, #64	; 0x40
 8003e12:	d058      	beq.n	8003ec6 <HAL_TIM_ConfigClockSource+0x136>
 8003e14:	2b40      	cmp	r3, #64	; 0x40
 8003e16:	d86f      	bhi.n	8003ef8 <HAL_TIM_ConfigClockSource+0x168>
 8003e18:	2b30      	cmp	r3, #48	; 0x30
 8003e1a:	d064      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0x156>
 8003e1c:	2b30      	cmp	r3, #48	; 0x30
 8003e1e:	d86b      	bhi.n	8003ef8 <HAL_TIM_ConfigClockSource+0x168>
 8003e20:	2b20      	cmp	r3, #32
 8003e22:	d060      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0x156>
 8003e24:	2b20      	cmp	r3, #32
 8003e26:	d867      	bhi.n	8003ef8 <HAL_TIM_ConfigClockSource+0x168>
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d05c      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0x156>
 8003e2c:	2b10      	cmp	r3, #16
 8003e2e:	d05a      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003e30:	e062      	b.n	8003ef8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6818      	ldr	r0, [r3, #0]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	6899      	ldr	r1, [r3, #8]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f000 faee 	bl	8004422 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e54:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	609a      	str	r2, [r3, #8]
      break;
 8003e5e:	e04e      	b.n	8003efe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6818      	ldr	r0, [r3, #0]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	6899      	ldr	r1, [r3, #8]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f000 fad7 	bl	8004422 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e82:	609a      	str	r2, [r3, #8]
      break;
 8003e84:	e03b      	b.n	8003efe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	6859      	ldr	r1, [r3, #4]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	461a      	mov	r2, r3
 8003e94:	f000 fa4e 	bl	8004334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2150      	movs	r1, #80	; 0x50
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 faa5 	bl	80043ee <TIM_ITRx_SetConfig>
      break;
 8003ea4:	e02b      	b.n	8003efe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6818      	ldr	r0, [r3, #0]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	6859      	ldr	r1, [r3, #4]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	f000 fa6c 	bl	8004390 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2160      	movs	r1, #96	; 0x60
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 fa95 	bl	80043ee <TIM_ITRx_SetConfig>
      break;
 8003ec4:	e01b      	b.n	8003efe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6818      	ldr	r0, [r3, #0]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	6859      	ldr	r1, [r3, #4]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f000 fa2e 	bl	8004334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2140      	movs	r1, #64	; 0x40
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 fa85 	bl	80043ee <TIM_ITRx_SetConfig>
      break;
 8003ee4:	e00b      	b.n	8003efe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	f000 fa7c 	bl	80043ee <TIM_ITRx_SetConfig>
        break;
 8003ef6:	e002      	b.n	8003efe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ef8:	bf00      	nop
 8003efa:	e000      	b.n	8003efe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003efc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc80      	pop	{r7}
 8003f28:	4770      	bx	lr

08003f2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr

08003f3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr

08003f4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr

08003f60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a29      	ldr	r2, [pc, #164]	; (8004018 <TIM_Base_SetConfig+0xb8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d00b      	beq.n	8003f90 <TIM_Base_SetConfig+0x30>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7e:	d007      	beq.n	8003f90 <TIM_Base_SetConfig+0x30>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a26      	ldr	r2, [pc, #152]	; (800401c <TIM_Base_SetConfig+0xbc>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d003      	beq.n	8003f90 <TIM_Base_SetConfig+0x30>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a25      	ldr	r2, [pc, #148]	; (8004020 <TIM_Base_SetConfig+0xc0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d108      	bne.n	8003fa2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a1c      	ldr	r2, [pc, #112]	; (8004018 <TIM_Base_SetConfig+0xb8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00b      	beq.n	8003fc2 <TIM_Base_SetConfig+0x62>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb0:	d007      	beq.n	8003fc2 <TIM_Base_SetConfig+0x62>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a19      	ldr	r2, [pc, #100]	; (800401c <TIM_Base_SetConfig+0xbc>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d003      	beq.n	8003fc2 <TIM_Base_SetConfig+0x62>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a18      	ldr	r2, [pc, #96]	; (8004020 <TIM_Base_SetConfig+0xc0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d108      	bne.n	8003fd4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a07      	ldr	r2, [pc, #28]	; (8004018 <TIM_Base_SetConfig+0xb8>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d103      	bne.n	8004008 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	691a      	ldr	r2, [r3, #16]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	615a      	str	r2, [r3, #20]
}
 800400e:	bf00      	nop
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr
 8004018:	40012c00 	.word	0x40012c00
 800401c:	40000400 	.word	0x40000400
 8004020:	40000800 	.word	0x40000800

08004024 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	f023 0201 	bic.w	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f023 0303 	bic.w	r3, r3, #3
 800405a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f023 0302 	bic.w	r3, r3, #2
 800406c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	4313      	orrs	r3, r2
 8004076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a1c      	ldr	r2, [pc, #112]	; (80040ec <TIM_OC1_SetConfig+0xc8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d10c      	bne.n	800409a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f023 0308 	bic.w	r3, r3, #8
 8004086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	4313      	orrs	r3, r2
 8004090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f023 0304 	bic.w	r3, r3, #4
 8004098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a13      	ldr	r2, [pc, #76]	; (80040ec <TIM_OC1_SetConfig+0xc8>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d111      	bne.n	80040c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	621a      	str	r2, [r3, #32]
}
 80040e0:	bf00      	nop
 80040e2:	371c      	adds	r7, #28
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bc80      	pop	{r7}
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40012c00 	.word	0x40012c00

080040f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	f023 0210 	bic.w	r2, r3, #16
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800411e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	021b      	lsls	r3, r3, #8
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	4313      	orrs	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f023 0320 	bic.w	r3, r3, #32
 800413a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	4313      	orrs	r3, r2
 8004146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a1d      	ldr	r2, [pc, #116]	; (80041c0 <TIM_OC2_SetConfig+0xd0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d10d      	bne.n	800416c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800416a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a14      	ldr	r2, [pc, #80]	; (80041c0 <TIM_OC2_SetConfig+0xd0>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d113      	bne.n	800419c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800417a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004182:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	621a      	str	r2, [r3, #32]
}
 80041b6:	bf00      	nop
 80041b8:	371c      	adds	r7, #28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr
 80041c0:	40012c00 	.word	0x40012c00

080041c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0303 	bic.w	r3, r3, #3
 80041fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800420c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	021b      	lsls	r3, r3, #8
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	4313      	orrs	r3, r2
 8004218:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a1d      	ldr	r2, [pc, #116]	; (8004294 <TIM_OC3_SetConfig+0xd0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d10d      	bne.n	800423e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004228:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	021b      	lsls	r3, r3, #8
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800423c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a14      	ldr	r2, [pc, #80]	; (8004294 <TIM_OC3_SetConfig+0xd0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d113      	bne.n	800426e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800424c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	011b      	lsls	r3, r3, #4
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	4313      	orrs	r3, r2
 800426c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	621a      	str	r2, [r3, #32]
}
 8004288:	bf00      	nop
 800428a:	371c      	adds	r7, #28
 800428c:	46bd      	mov	sp, r7
 800428e:	bc80      	pop	{r7}
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	40012c00 	.word	0x40012c00

08004298 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	021b      	lsls	r3, r3, #8
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4313      	orrs	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	031b      	lsls	r3, r3, #12
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a0f      	ldr	r2, [pc, #60]	; (8004330 <TIM_OC4_SetConfig+0x98>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d109      	bne.n	800430c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	019b      	lsls	r3, r3, #6
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4313      	orrs	r3, r2
 800430a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	621a      	str	r2, [r3, #32]
}
 8004326:	bf00      	nop
 8004328:	371c      	adds	r7, #28
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr
 8004330:	40012c00 	.word	0x40012c00

08004334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	f023 0201 	bic.w	r2, r3, #1
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800435e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	4313      	orrs	r3, r2
 8004368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f023 030a 	bic.w	r3, r3, #10
 8004370:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	621a      	str	r2, [r3, #32]
}
 8004386:	bf00      	nop
 8004388:	371c      	adds	r7, #28
 800438a:	46bd      	mov	sp, r7
 800438c:	bc80      	pop	{r7}
 800438e:	4770      	bx	lr

08004390 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	f023 0210 	bic.w	r2, r3, #16
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	031b      	lsls	r3, r3, #12
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	621a      	str	r2, [r3, #32]
}
 80043e4:	bf00      	nop
 80043e6:	371c      	adds	r7, #28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bc80      	pop	{r7}
 80043ec:	4770      	bx	lr

080043ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b085      	sub	sp, #20
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004404:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4313      	orrs	r3, r2
 800440c:	f043 0307 	orr.w	r3, r3, #7
 8004410:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	609a      	str	r2, [r3, #8]
}
 8004418:	bf00      	nop
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr

08004422 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004422:	b480      	push	{r7}
 8004424:	b087      	sub	sp, #28
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	607a      	str	r2, [r7, #4]
 800442e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800443c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	021a      	lsls	r2, r3, #8
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	431a      	orrs	r2, r3
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	4313      	orrs	r3, r2
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	609a      	str	r2, [r3, #8]
}
 8004456:	bf00      	nop
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	bc80      	pop	{r7}
 800445e:	4770      	bx	lr

08004460 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f003 031f 	and.w	r3, r3, #31
 8004472:	2201      	movs	r2, #1
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a1a      	ldr	r2, [r3, #32]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	43db      	mvns	r3, r3
 8004482:	401a      	ands	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a1a      	ldr	r2, [r3, #32]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	fa01 f303 	lsl.w	r3, r1, r3
 8004498:	431a      	orrs	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	621a      	str	r2, [r3, #32]
}
 800449e:	bf00      	nop
 80044a0:	371c      	adds	r7, #28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr

080044a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044bc:	2302      	movs	r3, #2
 80044be:	e046      	b.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a16      	ldr	r2, [pc, #88]	; (8004558 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00e      	beq.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800450c:	d009      	beq.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a12      	ldr	r2, [pc, #72]	; (800455c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d004      	beq.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a10      	ldr	r2, [pc, #64]	; (8004560 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d10c      	bne.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004528:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	4313      	orrs	r3, r2
 8004532:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr
 8004558:	40012c00 	.word	0x40012c00
 800455c:	40000400 	.word	0x40000400
 8004560:	40000800 	.word	0x40000800

08004564 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	bc80      	pop	{r7}
 8004574:	4770      	bx	lr

08004576 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr

08004588 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e03f      	b.n	800461a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d106      	bne.n	80045b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7fe f860 	bl	8002674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2224      	movs	r2, #36	; 0x24
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f905 	bl	80047dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695a      	ldr	r2, [r3, #20]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68da      	ldr	r2, [r3, #12]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004600:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2220      	movs	r2, #32
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b08a      	sub	sp, #40	; 0x28
 8004626:	af02      	add	r7, sp, #8
 8004628:	60f8      	str	r0, [r7, #12]
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	603b      	str	r3, [r7, #0]
 800462e:	4613      	mov	r3, r2
 8004630:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b20      	cmp	r3, #32
 8004640:	d17c      	bne.n	800473c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <HAL_UART_Transmit+0x2c>
 8004648:	88fb      	ldrh	r3, [r7, #6]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e075      	b.n	800473e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_UART_Transmit+0x3e>
 800465c:	2302      	movs	r3, #2
 800465e:	e06e      	b.n	800473e <HAL_UART_Transmit+0x11c>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2221      	movs	r2, #33	; 0x21
 8004672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004676:	f7fe f933 	bl	80028e0 <HAL_GetTick>
 800467a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	88fa      	ldrh	r2, [r7, #6]
 8004680:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	88fa      	ldrh	r2, [r7, #6]
 8004686:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004690:	d108      	bne.n	80046a4 <HAL_UART_Transmit+0x82>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d104      	bne.n	80046a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800469a:	2300      	movs	r3, #0
 800469c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	e003      	b.n	80046ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80046b4:	e02a      	b.n	800470c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2200      	movs	r2, #0
 80046be:	2180      	movs	r1, #128	; 0x80
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 f840 	bl	8004746 <UART_WaitOnFlagUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e036      	b.n	800473e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10b      	bne.n	80046ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	3302      	adds	r3, #2
 80046ea:	61bb      	str	r3, [r7, #24]
 80046ec:	e007      	b.n	80046fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	781a      	ldrb	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	3301      	adds	r3, #1
 80046fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004702:	b29b      	uxth	r3, r3
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004710:	b29b      	uxth	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1cf      	bne.n	80046b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	2200      	movs	r2, #0
 800471e:	2140      	movs	r1, #64	; 0x40
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f000 f810 	bl	8004746 <UART_WaitOnFlagUntilTimeout>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e006      	b.n	800473e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004738:	2300      	movs	r3, #0
 800473a:	e000      	b.n	800473e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800473c:	2302      	movs	r3, #2
  }
}
 800473e:	4618      	mov	r0, r3
 8004740:	3720      	adds	r7, #32
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b084      	sub	sp, #16
 800474a:	af00      	add	r7, sp, #0
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	603b      	str	r3, [r7, #0]
 8004752:	4613      	mov	r3, r2
 8004754:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004756:	e02c      	b.n	80047b2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475e:	d028      	beq.n	80047b2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d007      	beq.n	8004776 <UART_WaitOnFlagUntilTimeout+0x30>
 8004766:	f7fe f8bb 	bl	80028e0 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	429a      	cmp	r2, r3
 8004774:	d21d      	bcs.n	80047b2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004784:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	695a      	ldr	r2, [r3, #20]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0201 	bic.w	r2, r2, #1
 8004794:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e00f      	b.n	80047d2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	4013      	ands	r3, r2
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	429a      	cmp	r2, r3
 80047c0:	bf0c      	ite	eq
 80047c2:	2301      	moveq	r3, #1
 80047c4:	2300      	movne	r3, #0
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	461a      	mov	r2, r3
 80047ca:	79fb      	ldrb	r3, [r7, #7]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d0c3      	beq.n	8004758 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	4313      	orrs	r3, r2
 800480a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004816:	f023 030c 	bic.w	r3, r3, #12
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6812      	ldr	r2, [r2, #0]
 800481e:	68b9      	ldr	r1, [r7, #8]
 8004820:	430b      	orrs	r3, r1
 8004822:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a2c      	ldr	r2, [pc, #176]	; (80048f0 <UART_SetConfig+0x114>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d103      	bne.n	800484c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004844:	f7fe ff18 	bl	8003678 <HAL_RCC_GetPCLK2Freq>
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	e002      	b.n	8004852 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800484c:	f7fe ff00 	bl	8003650 <HAL_RCC_GetPCLK1Freq>
 8004850:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	4613      	mov	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	009a      	lsls	r2, r3, #2
 800485c:	441a      	add	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	fbb2 f3f3 	udiv	r3, r2, r3
 8004868:	4a22      	ldr	r2, [pc, #136]	; (80048f4 <UART_SetConfig+0x118>)
 800486a:	fba2 2303 	umull	r2, r3, r2, r3
 800486e:	095b      	lsrs	r3, r3, #5
 8004870:	0119      	lsls	r1, r3, #4
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4613      	mov	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	009a      	lsls	r2, r3, #2
 800487c:	441a      	add	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	fbb2 f2f3 	udiv	r2, r2, r3
 8004888:	4b1a      	ldr	r3, [pc, #104]	; (80048f4 <UART_SetConfig+0x118>)
 800488a:	fba3 0302 	umull	r0, r3, r3, r2
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	2064      	movs	r0, #100	; 0x64
 8004892:	fb00 f303 	mul.w	r3, r0, r3
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	3332      	adds	r3, #50	; 0x32
 800489c:	4a15      	ldr	r2, [pc, #84]	; (80048f4 <UART_SetConfig+0x118>)
 800489e:	fba2 2303 	umull	r2, r3, r2, r3
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048a8:	4419      	add	r1, r3
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	009a      	lsls	r2, r3, #2
 80048b4:	441a      	add	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80048c0:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <UART_SetConfig+0x118>)
 80048c2:	fba3 0302 	umull	r0, r3, r3, r2
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	2064      	movs	r0, #100	; 0x64
 80048ca:	fb00 f303 	mul.w	r3, r0, r3
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	011b      	lsls	r3, r3, #4
 80048d2:	3332      	adds	r3, #50	; 0x32
 80048d4:	4a07      	ldr	r2, [pc, #28]	; (80048f4 <UART_SetConfig+0x118>)
 80048d6:	fba2 2303 	umull	r2, r3, r2, r3
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	f003 020f 	and.w	r2, r3, #15
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	440a      	add	r2, r1
 80048e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048e8:	bf00      	nop
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40013800 	.word	0x40013800
 80048f4:	51eb851f 	.word	0x51eb851f

080048f8 <__errno>:
 80048f8:	4b01      	ldr	r3, [pc, #4]	; (8004900 <__errno+0x8>)
 80048fa:	6818      	ldr	r0, [r3, #0]
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	20000018 	.word	0x20000018

08004904 <__libc_init_array>:
 8004904:	b570      	push	{r4, r5, r6, lr}
 8004906:	2600      	movs	r6, #0
 8004908:	4d0c      	ldr	r5, [pc, #48]	; (800493c <__libc_init_array+0x38>)
 800490a:	4c0d      	ldr	r4, [pc, #52]	; (8004940 <__libc_init_array+0x3c>)
 800490c:	1b64      	subs	r4, r4, r5
 800490e:	10a4      	asrs	r4, r4, #2
 8004910:	42a6      	cmp	r6, r4
 8004912:	d109      	bne.n	8004928 <__libc_init_array+0x24>
 8004914:	f000 fc5c 	bl	80051d0 <_init>
 8004918:	2600      	movs	r6, #0
 800491a:	4d0a      	ldr	r5, [pc, #40]	; (8004944 <__libc_init_array+0x40>)
 800491c:	4c0a      	ldr	r4, [pc, #40]	; (8004948 <__libc_init_array+0x44>)
 800491e:	1b64      	subs	r4, r4, r5
 8004920:	10a4      	asrs	r4, r4, #2
 8004922:	42a6      	cmp	r6, r4
 8004924:	d105      	bne.n	8004932 <__libc_init_array+0x2e>
 8004926:	bd70      	pop	{r4, r5, r6, pc}
 8004928:	f855 3b04 	ldr.w	r3, [r5], #4
 800492c:	4798      	blx	r3
 800492e:	3601      	adds	r6, #1
 8004930:	e7ee      	b.n	8004910 <__libc_init_array+0xc>
 8004932:	f855 3b04 	ldr.w	r3, [r5], #4
 8004936:	4798      	blx	r3
 8004938:	3601      	adds	r6, #1
 800493a:	e7f2      	b.n	8004922 <__libc_init_array+0x1e>
 800493c:	0800534c 	.word	0x0800534c
 8004940:	0800534c 	.word	0x0800534c
 8004944:	0800534c 	.word	0x0800534c
 8004948:	08005350 	.word	0x08005350

0800494c <memset>:
 800494c:	4603      	mov	r3, r0
 800494e:	4402      	add	r2, r0
 8004950:	4293      	cmp	r3, r2
 8004952:	d100      	bne.n	8004956 <memset+0xa>
 8004954:	4770      	bx	lr
 8004956:	f803 1b01 	strb.w	r1, [r3], #1
 800495a:	e7f9      	b.n	8004950 <memset+0x4>

0800495c <siprintf>:
 800495c:	b40e      	push	{r1, r2, r3}
 800495e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004962:	b500      	push	{lr}
 8004964:	b09c      	sub	sp, #112	; 0x70
 8004966:	ab1d      	add	r3, sp, #116	; 0x74
 8004968:	9002      	str	r0, [sp, #8]
 800496a:	9006      	str	r0, [sp, #24]
 800496c:	9107      	str	r1, [sp, #28]
 800496e:	9104      	str	r1, [sp, #16]
 8004970:	4808      	ldr	r0, [pc, #32]	; (8004994 <siprintf+0x38>)
 8004972:	4909      	ldr	r1, [pc, #36]	; (8004998 <siprintf+0x3c>)
 8004974:	f853 2b04 	ldr.w	r2, [r3], #4
 8004978:	9105      	str	r1, [sp, #20]
 800497a:	6800      	ldr	r0, [r0, #0]
 800497c:	a902      	add	r1, sp, #8
 800497e:	9301      	str	r3, [sp, #4]
 8004980:	f000 f868 	bl	8004a54 <_svfiprintf_r>
 8004984:	2200      	movs	r2, #0
 8004986:	9b02      	ldr	r3, [sp, #8]
 8004988:	701a      	strb	r2, [r3, #0]
 800498a:	b01c      	add	sp, #112	; 0x70
 800498c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004990:	b003      	add	sp, #12
 8004992:	4770      	bx	lr
 8004994:	20000018 	.word	0x20000018
 8004998:	ffff0208 	.word	0xffff0208

0800499c <__ssputs_r>:
 800499c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049a0:	688e      	ldr	r6, [r1, #8]
 80049a2:	4682      	mov	sl, r0
 80049a4:	429e      	cmp	r6, r3
 80049a6:	460c      	mov	r4, r1
 80049a8:	4690      	mov	r8, r2
 80049aa:	461f      	mov	r7, r3
 80049ac:	d838      	bhi.n	8004a20 <__ssputs_r+0x84>
 80049ae:	898a      	ldrh	r2, [r1, #12]
 80049b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80049b4:	d032      	beq.n	8004a1c <__ssputs_r+0x80>
 80049b6:	6825      	ldr	r5, [r4, #0]
 80049b8:	6909      	ldr	r1, [r1, #16]
 80049ba:	3301      	adds	r3, #1
 80049bc:	eba5 0901 	sub.w	r9, r5, r1
 80049c0:	6965      	ldr	r5, [r4, #20]
 80049c2:	444b      	add	r3, r9
 80049c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049cc:	106d      	asrs	r5, r5, #1
 80049ce:	429d      	cmp	r5, r3
 80049d0:	bf38      	it	cc
 80049d2:	461d      	movcc	r5, r3
 80049d4:	0553      	lsls	r3, r2, #21
 80049d6:	d531      	bpl.n	8004a3c <__ssputs_r+0xa0>
 80049d8:	4629      	mov	r1, r5
 80049da:	f000 fb53 	bl	8005084 <_malloc_r>
 80049de:	4606      	mov	r6, r0
 80049e0:	b950      	cbnz	r0, 80049f8 <__ssputs_r+0x5c>
 80049e2:	230c      	movs	r3, #12
 80049e4:	f04f 30ff 	mov.w	r0, #4294967295
 80049e8:	f8ca 3000 	str.w	r3, [sl]
 80049ec:	89a3      	ldrh	r3, [r4, #12]
 80049ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049f2:	81a3      	strh	r3, [r4, #12]
 80049f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049f8:	464a      	mov	r2, r9
 80049fa:	6921      	ldr	r1, [r4, #16]
 80049fc:	f000 face 	bl	8004f9c <memcpy>
 8004a00:	89a3      	ldrh	r3, [r4, #12]
 8004a02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a0a:	81a3      	strh	r3, [r4, #12]
 8004a0c:	6126      	str	r6, [r4, #16]
 8004a0e:	444e      	add	r6, r9
 8004a10:	6026      	str	r6, [r4, #0]
 8004a12:	463e      	mov	r6, r7
 8004a14:	6165      	str	r5, [r4, #20]
 8004a16:	eba5 0509 	sub.w	r5, r5, r9
 8004a1a:	60a5      	str	r5, [r4, #8]
 8004a1c:	42be      	cmp	r6, r7
 8004a1e:	d900      	bls.n	8004a22 <__ssputs_r+0x86>
 8004a20:	463e      	mov	r6, r7
 8004a22:	4632      	mov	r2, r6
 8004a24:	4641      	mov	r1, r8
 8004a26:	6820      	ldr	r0, [r4, #0]
 8004a28:	f000 fac6 	bl	8004fb8 <memmove>
 8004a2c:	68a3      	ldr	r3, [r4, #8]
 8004a2e:	6822      	ldr	r2, [r4, #0]
 8004a30:	1b9b      	subs	r3, r3, r6
 8004a32:	4432      	add	r2, r6
 8004a34:	2000      	movs	r0, #0
 8004a36:	60a3      	str	r3, [r4, #8]
 8004a38:	6022      	str	r2, [r4, #0]
 8004a3a:	e7db      	b.n	80049f4 <__ssputs_r+0x58>
 8004a3c:	462a      	mov	r2, r5
 8004a3e:	f000 fb7b 	bl	8005138 <_realloc_r>
 8004a42:	4606      	mov	r6, r0
 8004a44:	2800      	cmp	r0, #0
 8004a46:	d1e1      	bne.n	8004a0c <__ssputs_r+0x70>
 8004a48:	4650      	mov	r0, sl
 8004a4a:	6921      	ldr	r1, [r4, #16]
 8004a4c:	f000 face 	bl	8004fec <_free_r>
 8004a50:	e7c7      	b.n	80049e2 <__ssputs_r+0x46>
	...

08004a54 <_svfiprintf_r>:
 8004a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a58:	4698      	mov	r8, r3
 8004a5a:	898b      	ldrh	r3, [r1, #12]
 8004a5c:	4607      	mov	r7, r0
 8004a5e:	061b      	lsls	r3, r3, #24
 8004a60:	460d      	mov	r5, r1
 8004a62:	4614      	mov	r4, r2
 8004a64:	b09d      	sub	sp, #116	; 0x74
 8004a66:	d50e      	bpl.n	8004a86 <_svfiprintf_r+0x32>
 8004a68:	690b      	ldr	r3, [r1, #16]
 8004a6a:	b963      	cbnz	r3, 8004a86 <_svfiprintf_r+0x32>
 8004a6c:	2140      	movs	r1, #64	; 0x40
 8004a6e:	f000 fb09 	bl	8005084 <_malloc_r>
 8004a72:	6028      	str	r0, [r5, #0]
 8004a74:	6128      	str	r0, [r5, #16]
 8004a76:	b920      	cbnz	r0, 8004a82 <_svfiprintf_r+0x2e>
 8004a78:	230c      	movs	r3, #12
 8004a7a:	603b      	str	r3, [r7, #0]
 8004a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a80:	e0d1      	b.n	8004c26 <_svfiprintf_r+0x1d2>
 8004a82:	2340      	movs	r3, #64	; 0x40
 8004a84:	616b      	str	r3, [r5, #20]
 8004a86:	2300      	movs	r3, #0
 8004a88:	9309      	str	r3, [sp, #36]	; 0x24
 8004a8a:	2320      	movs	r3, #32
 8004a8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a90:	2330      	movs	r3, #48	; 0x30
 8004a92:	f04f 0901 	mov.w	r9, #1
 8004a96:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004c40 <_svfiprintf_r+0x1ec>
 8004a9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004aa2:	4623      	mov	r3, r4
 8004aa4:	469a      	mov	sl, r3
 8004aa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004aaa:	b10a      	cbz	r2, 8004ab0 <_svfiprintf_r+0x5c>
 8004aac:	2a25      	cmp	r2, #37	; 0x25
 8004aae:	d1f9      	bne.n	8004aa4 <_svfiprintf_r+0x50>
 8004ab0:	ebba 0b04 	subs.w	fp, sl, r4
 8004ab4:	d00b      	beq.n	8004ace <_svfiprintf_r+0x7a>
 8004ab6:	465b      	mov	r3, fp
 8004ab8:	4622      	mov	r2, r4
 8004aba:	4629      	mov	r1, r5
 8004abc:	4638      	mov	r0, r7
 8004abe:	f7ff ff6d 	bl	800499c <__ssputs_r>
 8004ac2:	3001      	adds	r0, #1
 8004ac4:	f000 80aa 	beq.w	8004c1c <_svfiprintf_r+0x1c8>
 8004ac8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004aca:	445a      	add	r2, fp
 8004acc:	9209      	str	r2, [sp, #36]	; 0x24
 8004ace:	f89a 3000 	ldrb.w	r3, [sl]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 80a2 	beq.w	8004c1c <_svfiprintf_r+0x1c8>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f04f 32ff 	mov.w	r2, #4294967295
 8004ade:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ae2:	f10a 0a01 	add.w	sl, sl, #1
 8004ae6:	9304      	str	r3, [sp, #16]
 8004ae8:	9307      	str	r3, [sp, #28]
 8004aea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004aee:	931a      	str	r3, [sp, #104]	; 0x68
 8004af0:	4654      	mov	r4, sl
 8004af2:	2205      	movs	r2, #5
 8004af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004af8:	4851      	ldr	r0, [pc, #324]	; (8004c40 <_svfiprintf_r+0x1ec>)
 8004afa:	f000 fa41 	bl	8004f80 <memchr>
 8004afe:	9a04      	ldr	r2, [sp, #16]
 8004b00:	b9d8      	cbnz	r0, 8004b3a <_svfiprintf_r+0xe6>
 8004b02:	06d0      	lsls	r0, r2, #27
 8004b04:	bf44      	itt	mi
 8004b06:	2320      	movmi	r3, #32
 8004b08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b0c:	0711      	lsls	r1, r2, #28
 8004b0e:	bf44      	itt	mi
 8004b10:	232b      	movmi	r3, #43	; 0x2b
 8004b12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b16:	f89a 3000 	ldrb.w	r3, [sl]
 8004b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8004b1c:	d015      	beq.n	8004b4a <_svfiprintf_r+0xf6>
 8004b1e:	4654      	mov	r4, sl
 8004b20:	2000      	movs	r0, #0
 8004b22:	f04f 0c0a 	mov.w	ip, #10
 8004b26:	9a07      	ldr	r2, [sp, #28]
 8004b28:	4621      	mov	r1, r4
 8004b2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b2e:	3b30      	subs	r3, #48	; 0x30
 8004b30:	2b09      	cmp	r3, #9
 8004b32:	d94e      	bls.n	8004bd2 <_svfiprintf_r+0x17e>
 8004b34:	b1b0      	cbz	r0, 8004b64 <_svfiprintf_r+0x110>
 8004b36:	9207      	str	r2, [sp, #28]
 8004b38:	e014      	b.n	8004b64 <_svfiprintf_r+0x110>
 8004b3a:	eba0 0308 	sub.w	r3, r0, r8
 8004b3e:	fa09 f303 	lsl.w	r3, r9, r3
 8004b42:	4313      	orrs	r3, r2
 8004b44:	46a2      	mov	sl, r4
 8004b46:	9304      	str	r3, [sp, #16]
 8004b48:	e7d2      	b.n	8004af0 <_svfiprintf_r+0x9c>
 8004b4a:	9b03      	ldr	r3, [sp, #12]
 8004b4c:	1d19      	adds	r1, r3, #4
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	9103      	str	r1, [sp, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	bfbb      	ittet	lt
 8004b56:	425b      	neglt	r3, r3
 8004b58:	f042 0202 	orrlt.w	r2, r2, #2
 8004b5c:	9307      	strge	r3, [sp, #28]
 8004b5e:	9307      	strlt	r3, [sp, #28]
 8004b60:	bfb8      	it	lt
 8004b62:	9204      	strlt	r2, [sp, #16]
 8004b64:	7823      	ldrb	r3, [r4, #0]
 8004b66:	2b2e      	cmp	r3, #46	; 0x2e
 8004b68:	d10c      	bne.n	8004b84 <_svfiprintf_r+0x130>
 8004b6a:	7863      	ldrb	r3, [r4, #1]
 8004b6c:	2b2a      	cmp	r3, #42	; 0x2a
 8004b6e:	d135      	bne.n	8004bdc <_svfiprintf_r+0x188>
 8004b70:	9b03      	ldr	r3, [sp, #12]
 8004b72:	3402      	adds	r4, #2
 8004b74:	1d1a      	adds	r2, r3, #4
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	9203      	str	r2, [sp, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	bfb8      	it	lt
 8004b7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b82:	9305      	str	r3, [sp, #20]
 8004b84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004c50 <_svfiprintf_r+0x1fc>
 8004b88:	2203      	movs	r2, #3
 8004b8a:	4650      	mov	r0, sl
 8004b8c:	7821      	ldrb	r1, [r4, #0]
 8004b8e:	f000 f9f7 	bl	8004f80 <memchr>
 8004b92:	b140      	cbz	r0, 8004ba6 <_svfiprintf_r+0x152>
 8004b94:	2340      	movs	r3, #64	; 0x40
 8004b96:	eba0 000a 	sub.w	r0, r0, sl
 8004b9a:	fa03 f000 	lsl.w	r0, r3, r0
 8004b9e:	9b04      	ldr	r3, [sp, #16]
 8004ba0:	3401      	adds	r4, #1
 8004ba2:	4303      	orrs	r3, r0
 8004ba4:	9304      	str	r3, [sp, #16]
 8004ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004baa:	2206      	movs	r2, #6
 8004bac:	4825      	ldr	r0, [pc, #148]	; (8004c44 <_svfiprintf_r+0x1f0>)
 8004bae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bb2:	f000 f9e5 	bl	8004f80 <memchr>
 8004bb6:	2800      	cmp	r0, #0
 8004bb8:	d038      	beq.n	8004c2c <_svfiprintf_r+0x1d8>
 8004bba:	4b23      	ldr	r3, [pc, #140]	; (8004c48 <_svfiprintf_r+0x1f4>)
 8004bbc:	bb1b      	cbnz	r3, 8004c06 <_svfiprintf_r+0x1b2>
 8004bbe:	9b03      	ldr	r3, [sp, #12]
 8004bc0:	3307      	adds	r3, #7
 8004bc2:	f023 0307 	bic.w	r3, r3, #7
 8004bc6:	3308      	adds	r3, #8
 8004bc8:	9303      	str	r3, [sp, #12]
 8004bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bcc:	4433      	add	r3, r6
 8004bce:	9309      	str	r3, [sp, #36]	; 0x24
 8004bd0:	e767      	b.n	8004aa2 <_svfiprintf_r+0x4e>
 8004bd2:	460c      	mov	r4, r1
 8004bd4:	2001      	movs	r0, #1
 8004bd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bda:	e7a5      	b.n	8004b28 <_svfiprintf_r+0xd4>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f04f 0c0a 	mov.w	ip, #10
 8004be2:	4619      	mov	r1, r3
 8004be4:	3401      	adds	r4, #1
 8004be6:	9305      	str	r3, [sp, #20]
 8004be8:	4620      	mov	r0, r4
 8004bea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bee:	3a30      	subs	r2, #48	; 0x30
 8004bf0:	2a09      	cmp	r2, #9
 8004bf2:	d903      	bls.n	8004bfc <_svfiprintf_r+0x1a8>
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0c5      	beq.n	8004b84 <_svfiprintf_r+0x130>
 8004bf8:	9105      	str	r1, [sp, #20]
 8004bfa:	e7c3      	b.n	8004b84 <_svfiprintf_r+0x130>
 8004bfc:	4604      	mov	r4, r0
 8004bfe:	2301      	movs	r3, #1
 8004c00:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c04:	e7f0      	b.n	8004be8 <_svfiprintf_r+0x194>
 8004c06:	ab03      	add	r3, sp, #12
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	462a      	mov	r2, r5
 8004c0c:	4638      	mov	r0, r7
 8004c0e:	4b0f      	ldr	r3, [pc, #60]	; (8004c4c <_svfiprintf_r+0x1f8>)
 8004c10:	a904      	add	r1, sp, #16
 8004c12:	f3af 8000 	nop.w
 8004c16:	1c42      	adds	r2, r0, #1
 8004c18:	4606      	mov	r6, r0
 8004c1a:	d1d6      	bne.n	8004bca <_svfiprintf_r+0x176>
 8004c1c:	89ab      	ldrh	r3, [r5, #12]
 8004c1e:	065b      	lsls	r3, r3, #25
 8004c20:	f53f af2c 	bmi.w	8004a7c <_svfiprintf_r+0x28>
 8004c24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c26:	b01d      	add	sp, #116	; 0x74
 8004c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c2c:	ab03      	add	r3, sp, #12
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	462a      	mov	r2, r5
 8004c32:	4638      	mov	r0, r7
 8004c34:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <_svfiprintf_r+0x1f8>)
 8004c36:	a904      	add	r1, sp, #16
 8004c38:	f000 f87c 	bl	8004d34 <_printf_i>
 8004c3c:	e7eb      	b.n	8004c16 <_svfiprintf_r+0x1c2>
 8004c3e:	bf00      	nop
 8004c40:	08005318 	.word	0x08005318
 8004c44:	08005322 	.word	0x08005322
 8004c48:	00000000 	.word	0x00000000
 8004c4c:	0800499d 	.word	0x0800499d
 8004c50:	0800531e 	.word	0x0800531e

08004c54 <_printf_common>:
 8004c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c58:	4616      	mov	r6, r2
 8004c5a:	4699      	mov	r9, r3
 8004c5c:	688a      	ldr	r2, [r1, #8]
 8004c5e:	690b      	ldr	r3, [r1, #16]
 8004c60:	4607      	mov	r7, r0
 8004c62:	4293      	cmp	r3, r2
 8004c64:	bfb8      	it	lt
 8004c66:	4613      	movlt	r3, r2
 8004c68:	6033      	str	r3, [r6, #0]
 8004c6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c6e:	460c      	mov	r4, r1
 8004c70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c74:	b10a      	cbz	r2, 8004c7a <_printf_common+0x26>
 8004c76:	3301      	adds	r3, #1
 8004c78:	6033      	str	r3, [r6, #0]
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	0699      	lsls	r1, r3, #26
 8004c7e:	bf42      	ittt	mi
 8004c80:	6833      	ldrmi	r3, [r6, #0]
 8004c82:	3302      	addmi	r3, #2
 8004c84:	6033      	strmi	r3, [r6, #0]
 8004c86:	6825      	ldr	r5, [r4, #0]
 8004c88:	f015 0506 	ands.w	r5, r5, #6
 8004c8c:	d106      	bne.n	8004c9c <_printf_common+0x48>
 8004c8e:	f104 0a19 	add.w	sl, r4, #25
 8004c92:	68e3      	ldr	r3, [r4, #12]
 8004c94:	6832      	ldr	r2, [r6, #0]
 8004c96:	1a9b      	subs	r3, r3, r2
 8004c98:	42ab      	cmp	r3, r5
 8004c9a:	dc28      	bgt.n	8004cee <_printf_common+0x9a>
 8004c9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ca0:	1e13      	subs	r3, r2, #0
 8004ca2:	6822      	ldr	r2, [r4, #0]
 8004ca4:	bf18      	it	ne
 8004ca6:	2301      	movne	r3, #1
 8004ca8:	0692      	lsls	r2, r2, #26
 8004caa:	d42d      	bmi.n	8004d08 <_printf_common+0xb4>
 8004cac:	4649      	mov	r1, r9
 8004cae:	4638      	mov	r0, r7
 8004cb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cb4:	47c0      	blx	r8
 8004cb6:	3001      	adds	r0, #1
 8004cb8:	d020      	beq.n	8004cfc <_printf_common+0xa8>
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	68e5      	ldr	r5, [r4, #12]
 8004cbe:	f003 0306 	and.w	r3, r3, #6
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	bf18      	it	ne
 8004cc6:	2500      	movne	r5, #0
 8004cc8:	6832      	ldr	r2, [r6, #0]
 8004cca:	f04f 0600 	mov.w	r6, #0
 8004cce:	68a3      	ldr	r3, [r4, #8]
 8004cd0:	bf08      	it	eq
 8004cd2:	1aad      	subeq	r5, r5, r2
 8004cd4:	6922      	ldr	r2, [r4, #16]
 8004cd6:	bf08      	it	eq
 8004cd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	bfc4      	itt	gt
 8004ce0:	1a9b      	subgt	r3, r3, r2
 8004ce2:	18ed      	addgt	r5, r5, r3
 8004ce4:	341a      	adds	r4, #26
 8004ce6:	42b5      	cmp	r5, r6
 8004ce8:	d11a      	bne.n	8004d20 <_printf_common+0xcc>
 8004cea:	2000      	movs	r0, #0
 8004cec:	e008      	b.n	8004d00 <_printf_common+0xac>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	4652      	mov	r2, sl
 8004cf2:	4649      	mov	r1, r9
 8004cf4:	4638      	mov	r0, r7
 8004cf6:	47c0      	blx	r8
 8004cf8:	3001      	adds	r0, #1
 8004cfa:	d103      	bne.n	8004d04 <_printf_common+0xb0>
 8004cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8004d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d04:	3501      	adds	r5, #1
 8004d06:	e7c4      	b.n	8004c92 <_printf_common+0x3e>
 8004d08:	2030      	movs	r0, #48	; 0x30
 8004d0a:	18e1      	adds	r1, r4, r3
 8004d0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d16:	4422      	add	r2, r4
 8004d18:	3302      	adds	r3, #2
 8004d1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d1e:	e7c5      	b.n	8004cac <_printf_common+0x58>
 8004d20:	2301      	movs	r3, #1
 8004d22:	4622      	mov	r2, r4
 8004d24:	4649      	mov	r1, r9
 8004d26:	4638      	mov	r0, r7
 8004d28:	47c0      	blx	r8
 8004d2a:	3001      	adds	r0, #1
 8004d2c:	d0e6      	beq.n	8004cfc <_printf_common+0xa8>
 8004d2e:	3601      	adds	r6, #1
 8004d30:	e7d9      	b.n	8004ce6 <_printf_common+0x92>
	...

08004d34 <_printf_i>:
 8004d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d38:	460c      	mov	r4, r1
 8004d3a:	7e27      	ldrb	r7, [r4, #24]
 8004d3c:	4691      	mov	r9, r2
 8004d3e:	2f78      	cmp	r7, #120	; 0x78
 8004d40:	4680      	mov	r8, r0
 8004d42:	469a      	mov	sl, r3
 8004d44:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004d46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d4a:	d807      	bhi.n	8004d5c <_printf_i+0x28>
 8004d4c:	2f62      	cmp	r7, #98	; 0x62
 8004d4e:	d80a      	bhi.n	8004d66 <_printf_i+0x32>
 8004d50:	2f00      	cmp	r7, #0
 8004d52:	f000 80d9 	beq.w	8004f08 <_printf_i+0x1d4>
 8004d56:	2f58      	cmp	r7, #88	; 0x58
 8004d58:	f000 80a4 	beq.w	8004ea4 <_printf_i+0x170>
 8004d5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d64:	e03a      	b.n	8004ddc <_printf_i+0xa8>
 8004d66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d6a:	2b15      	cmp	r3, #21
 8004d6c:	d8f6      	bhi.n	8004d5c <_printf_i+0x28>
 8004d6e:	a001      	add	r0, pc, #4	; (adr r0, 8004d74 <_printf_i+0x40>)
 8004d70:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004d74:	08004dcd 	.word	0x08004dcd
 8004d78:	08004de1 	.word	0x08004de1
 8004d7c:	08004d5d 	.word	0x08004d5d
 8004d80:	08004d5d 	.word	0x08004d5d
 8004d84:	08004d5d 	.word	0x08004d5d
 8004d88:	08004d5d 	.word	0x08004d5d
 8004d8c:	08004de1 	.word	0x08004de1
 8004d90:	08004d5d 	.word	0x08004d5d
 8004d94:	08004d5d 	.word	0x08004d5d
 8004d98:	08004d5d 	.word	0x08004d5d
 8004d9c:	08004d5d 	.word	0x08004d5d
 8004da0:	08004eef 	.word	0x08004eef
 8004da4:	08004e11 	.word	0x08004e11
 8004da8:	08004ed1 	.word	0x08004ed1
 8004dac:	08004d5d 	.word	0x08004d5d
 8004db0:	08004d5d 	.word	0x08004d5d
 8004db4:	08004f11 	.word	0x08004f11
 8004db8:	08004d5d 	.word	0x08004d5d
 8004dbc:	08004e11 	.word	0x08004e11
 8004dc0:	08004d5d 	.word	0x08004d5d
 8004dc4:	08004d5d 	.word	0x08004d5d
 8004dc8:	08004ed9 	.word	0x08004ed9
 8004dcc:	680b      	ldr	r3, [r1, #0]
 8004dce:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004dd2:	1d1a      	adds	r2, r3, #4
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	600a      	str	r2, [r1, #0]
 8004dd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e0a4      	b.n	8004f2a <_printf_i+0x1f6>
 8004de0:	6825      	ldr	r5, [r4, #0]
 8004de2:	6808      	ldr	r0, [r1, #0]
 8004de4:	062e      	lsls	r6, r5, #24
 8004de6:	f100 0304 	add.w	r3, r0, #4
 8004dea:	d50a      	bpl.n	8004e02 <_printf_i+0xce>
 8004dec:	6805      	ldr	r5, [r0, #0]
 8004dee:	600b      	str	r3, [r1, #0]
 8004df0:	2d00      	cmp	r5, #0
 8004df2:	da03      	bge.n	8004dfc <_printf_i+0xc8>
 8004df4:	232d      	movs	r3, #45	; 0x2d
 8004df6:	426d      	negs	r5, r5
 8004df8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dfc:	230a      	movs	r3, #10
 8004dfe:	485e      	ldr	r0, [pc, #376]	; (8004f78 <_printf_i+0x244>)
 8004e00:	e019      	b.n	8004e36 <_printf_i+0x102>
 8004e02:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004e06:	6805      	ldr	r5, [r0, #0]
 8004e08:	600b      	str	r3, [r1, #0]
 8004e0a:	bf18      	it	ne
 8004e0c:	b22d      	sxthne	r5, r5
 8004e0e:	e7ef      	b.n	8004df0 <_printf_i+0xbc>
 8004e10:	680b      	ldr	r3, [r1, #0]
 8004e12:	6825      	ldr	r5, [r4, #0]
 8004e14:	1d18      	adds	r0, r3, #4
 8004e16:	6008      	str	r0, [r1, #0]
 8004e18:	0628      	lsls	r0, r5, #24
 8004e1a:	d501      	bpl.n	8004e20 <_printf_i+0xec>
 8004e1c:	681d      	ldr	r5, [r3, #0]
 8004e1e:	e002      	b.n	8004e26 <_printf_i+0xf2>
 8004e20:	0669      	lsls	r1, r5, #25
 8004e22:	d5fb      	bpl.n	8004e1c <_printf_i+0xe8>
 8004e24:	881d      	ldrh	r5, [r3, #0]
 8004e26:	2f6f      	cmp	r7, #111	; 0x6f
 8004e28:	bf0c      	ite	eq
 8004e2a:	2308      	moveq	r3, #8
 8004e2c:	230a      	movne	r3, #10
 8004e2e:	4852      	ldr	r0, [pc, #328]	; (8004f78 <_printf_i+0x244>)
 8004e30:	2100      	movs	r1, #0
 8004e32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e36:	6866      	ldr	r6, [r4, #4]
 8004e38:	2e00      	cmp	r6, #0
 8004e3a:	bfa8      	it	ge
 8004e3c:	6821      	ldrge	r1, [r4, #0]
 8004e3e:	60a6      	str	r6, [r4, #8]
 8004e40:	bfa4      	itt	ge
 8004e42:	f021 0104 	bicge.w	r1, r1, #4
 8004e46:	6021      	strge	r1, [r4, #0]
 8004e48:	b90d      	cbnz	r5, 8004e4e <_printf_i+0x11a>
 8004e4a:	2e00      	cmp	r6, #0
 8004e4c:	d04d      	beq.n	8004eea <_printf_i+0x1b6>
 8004e4e:	4616      	mov	r6, r2
 8004e50:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e54:	fb03 5711 	mls	r7, r3, r1, r5
 8004e58:	5dc7      	ldrb	r7, [r0, r7]
 8004e5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e5e:	462f      	mov	r7, r5
 8004e60:	42bb      	cmp	r3, r7
 8004e62:	460d      	mov	r5, r1
 8004e64:	d9f4      	bls.n	8004e50 <_printf_i+0x11c>
 8004e66:	2b08      	cmp	r3, #8
 8004e68:	d10b      	bne.n	8004e82 <_printf_i+0x14e>
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	07df      	lsls	r7, r3, #31
 8004e6e:	d508      	bpl.n	8004e82 <_printf_i+0x14e>
 8004e70:	6923      	ldr	r3, [r4, #16]
 8004e72:	6861      	ldr	r1, [r4, #4]
 8004e74:	4299      	cmp	r1, r3
 8004e76:	bfde      	ittt	le
 8004e78:	2330      	movle	r3, #48	; 0x30
 8004e7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e82:	1b92      	subs	r2, r2, r6
 8004e84:	6122      	str	r2, [r4, #16]
 8004e86:	464b      	mov	r3, r9
 8004e88:	4621      	mov	r1, r4
 8004e8a:	4640      	mov	r0, r8
 8004e8c:	f8cd a000 	str.w	sl, [sp]
 8004e90:	aa03      	add	r2, sp, #12
 8004e92:	f7ff fedf 	bl	8004c54 <_printf_common>
 8004e96:	3001      	adds	r0, #1
 8004e98:	d14c      	bne.n	8004f34 <_printf_i+0x200>
 8004e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9e:	b004      	add	sp, #16
 8004ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ea4:	4834      	ldr	r0, [pc, #208]	; (8004f78 <_printf_i+0x244>)
 8004ea6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004eaa:	680e      	ldr	r6, [r1, #0]
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	f856 5b04 	ldr.w	r5, [r6], #4
 8004eb2:	061f      	lsls	r7, r3, #24
 8004eb4:	600e      	str	r6, [r1, #0]
 8004eb6:	d514      	bpl.n	8004ee2 <_printf_i+0x1ae>
 8004eb8:	07d9      	lsls	r1, r3, #31
 8004eba:	bf44      	itt	mi
 8004ebc:	f043 0320 	orrmi.w	r3, r3, #32
 8004ec0:	6023      	strmi	r3, [r4, #0]
 8004ec2:	b91d      	cbnz	r5, 8004ecc <_printf_i+0x198>
 8004ec4:	6823      	ldr	r3, [r4, #0]
 8004ec6:	f023 0320 	bic.w	r3, r3, #32
 8004eca:	6023      	str	r3, [r4, #0]
 8004ecc:	2310      	movs	r3, #16
 8004ece:	e7af      	b.n	8004e30 <_printf_i+0xfc>
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	f043 0320 	orr.w	r3, r3, #32
 8004ed6:	6023      	str	r3, [r4, #0]
 8004ed8:	2378      	movs	r3, #120	; 0x78
 8004eda:	4828      	ldr	r0, [pc, #160]	; (8004f7c <_printf_i+0x248>)
 8004edc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ee0:	e7e3      	b.n	8004eaa <_printf_i+0x176>
 8004ee2:	065e      	lsls	r6, r3, #25
 8004ee4:	bf48      	it	mi
 8004ee6:	b2ad      	uxthmi	r5, r5
 8004ee8:	e7e6      	b.n	8004eb8 <_printf_i+0x184>
 8004eea:	4616      	mov	r6, r2
 8004eec:	e7bb      	b.n	8004e66 <_printf_i+0x132>
 8004eee:	680b      	ldr	r3, [r1, #0]
 8004ef0:	6826      	ldr	r6, [r4, #0]
 8004ef2:	1d1d      	adds	r5, r3, #4
 8004ef4:	6960      	ldr	r0, [r4, #20]
 8004ef6:	600d      	str	r5, [r1, #0]
 8004ef8:	0635      	lsls	r5, r6, #24
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	d501      	bpl.n	8004f02 <_printf_i+0x1ce>
 8004efe:	6018      	str	r0, [r3, #0]
 8004f00:	e002      	b.n	8004f08 <_printf_i+0x1d4>
 8004f02:	0671      	lsls	r1, r6, #25
 8004f04:	d5fb      	bpl.n	8004efe <_printf_i+0x1ca>
 8004f06:	8018      	strh	r0, [r3, #0]
 8004f08:	2300      	movs	r3, #0
 8004f0a:	4616      	mov	r6, r2
 8004f0c:	6123      	str	r3, [r4, #16]
 8004f0e:	e7ba      	b.n	8004e86 <_printf_i+0x152>
 8004f10:	680b      	ldr	r3, [r1, #0]
 8004f12:	1d1a      	adds	r2, r3, #4
 8004f14:	600a      	str	r2, [r1, #0]
 8004f16:	681e      	ldr	r6, [r3, #0]
 8004f18:	2100      	movs	r1, #0
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	6862      	ldr	r2, [r4, #4]
 8004f1e:	f000 f82f 	bl	8004f80 <memchr>
 8004f22:	b108      	cbz	r0, 8004f28 <_printf_i+0x1f4>
 8004f24:	1b80      	subs	r0, r0, r6
 8004f26:	6060      	str	r0, [r4, #4]
 8004f28:	6863      	ldr	r3, [r4, #4]
 8004f2a:	6123      	str	r3, [r4, #16]
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f32:	e7a8      	b.n	8004e86 <_printf_i+0x152>
 8004f34:	4632      	mov	r2, r6
 8004f36:	4649      	mov	r1, r9
 8004f38:	4640      	mov	r0, r8
 8004f3a:	6923      	ldr	r3, [r4, #16]
 8004f3c:	47d0      	blx	sl
 8004f3e:	3001      	adds	r0, #1
 8004f40:	d0ab      	beq.n	8004e9a <_printf_i+0x166>
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	079b      	lsls	r3, r3, #30
 8004f46:	d413      	bmi.n	8004f70 <_printf_i+0x23c>
 8004f48:	68e0      	ldr	r0, [r4, #12]
 8004f4a:	9b03      	ldr	r3, [sp, #12]
 8004f4c:	4298      	cmp	r0, r3
 8004f4e:	bfb8      	it	lt
 8004f50:	4618      	movlt	r0, r3
 8004f52:	e7a4      	b.n	8004e9e <_printf_i+0x16a>
 8004f54:	2301      	movs	r3, #1
 8004f56:	4632      	mov	r2, r6
 8004f58:	4649      	mov	r1, r9
 8004f5a:	4640      	mov	r0, r8
 8004f5c:	47d0      	blx	sl
 8004f5e:	3001      	adds	r0, #1
 8004f60:	d09b      	beq.n	8004e9a <_printf_i+0x166>
 8004f62:	3501      	adds	r5, #1
 8004f64:	68e3      	ldr	r3, [r4, #12]
 8004f66:	9903      	ldr	r1, [sp, #12]
 8004f68:	1a5b      	subs	r3, r3, r1
 8004f6a:	42ab      	cmp	r3, r5
 8004f6c:	dcf2      	bgt.n	8004f54 <_printf_i+0x220>
 8004f6e:	e7eb      	b.n	8004f48 <_printf_i+0x214>
 8004f70:	2500      	movs	r5, #0
 8004f72:	f104 0619 	add.w	r6, r4, #25
 8004f76:	e7f5      	b.n	8004f64 <_printf_i+0x230>
 8004f78:	08005329 	.word	0x08005329
 8004f7c:	0800533a 	.word	0x0800533a

08004f80 <memchr>:
 8004f80:	4603      	mov	r3, r0
 8004f82:	b510      	push	{r4, lr}
 8004f84:	b2c9      	uxtb	r1, r1
 8004f86:	4402      	add	r2, r0
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	d101      	bne.n	8004f92 <memchr+0x12>
 8004f8e:	2000      	movs	r0, #0
 8004f90:	e003      	b.n	8004f9a <memchr+0x1a>
 8004f92:	7804      	ldrb	r4, [r0, #0]
 8004f94:	3301      	adds	r3, #1
 8004f96:	428c      	cmp	r4, r1
 8004f98:	d1f6      	bne.n	8004f88 <memchr+0x8>
 8004f9a:	bd10      	pop	{r4, pc}

08004f9c <memcpy>:
 8004f9c:	440a      	add	r2, r1
 8004f9e:	4291      	cmp	r1, r2
 8004fa0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fa4:	d100      	bne.n	8004fa8 <memcpy+0xc>
 8004fa6:	4770      	bx	lr
 8004fa8:	b510      	push	{r4, lr}
 8004faa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fae:	4291      	cmp	r1, r2
 8004fb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fb4:	d1f9      	bne.n	8004faa <memcpy+0xe>
 8004fb6:	bd10      	pop	{r4, pc}

08004fb8 <memmove>:
 8004fb8:	4288      	cmp	r0, r1
 8004fba:	b510      	push	{r4, lr}
 8004fbc:	eb01 0402 	add.w	r4, r1, r2
 8004fc0:	d902      	bls.n	8004fc8 <memmove+0x10>
 8004fc2:	4284      	cmp	r4, r0
 8004fc4:	4623      	mov	r3, r4
 8004fc6:	d807      	bhi.n	8004fd8 <memmove+0x20>
 8004fc8:	1e43      	subs	r3, r0, #1
 8004fca:	42a1      	cmp	r1, r4
 8004fcc:	d008      	beq.n	8004fe0 <memmove+0x28>
 8004fce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004fd6:	e7f8      	b.n	8004fca <memmove+0x12>
 8004fd8:	4601      	mov	r1, r0
 8004fda:	4402      	add	r2, r0
 8004fdc:	428a      	cmp	r2, r1
 8004fde:	d100      	bne.n	8004fe2 <memmove+0x2a>
 8004fe0:	bd10      	pop	{r4, pc}
 8004fe2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fe6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004fea:	e7f7      	b.n	8004fdc <memmove+0x24>

08004fec <_free_r>:
 8004fec:	b538      	push	{r3, r4, r5, lr}
 8004fee:	4605      	mov	r5, r0
 8004ff0:	2900      	cmp	r1, #0
 8004ff2:	d043      	beq.n	800507c <_free_r+0x90>
 8004ff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ff8:	1f0c      	subs	r4, r1, #4
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	bfb8      	it	lt
 8004ffe:	18e4      	addlt	r4, r4, r3
 8005000:	f000 f8d0 	bl	80051a4 <__malloc_lock>
 8005004:	4a1e      	ldr	r2, [pc, #120]	; (8005080 <_free_r+0x94>)
 8005006:	6813      	ldr	r3, [r2, #0]
 8005008:	4610      	mov	r0, r2
 800500a:	b933      	cbnz	r3, 800501a <_free_r+0x2e>
 800500c:	6063      	str	r3, [r4, #4]
 800500e:	6014      	str	r4, [r2, #0]
 8005010:	4628      	mov	r0, r5
 8005012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005016:	f000 b8cb 	b.w	80051b0 <__malloc_unlock>
 800501a:	42a3      	cmp	r3, r4
 800501c:	d90a      	bls.n	8005034 <_free_r+0x48>
 800501e:	6821      	ldr	r1, [r4, #0]
 8005020:	1862      	adds	r2, r4, r1
 8005022:	4293      	cmp	r3, r2
 8005024:	bf01      	itttt	eq
 8005026:	681a      	ldreq	r2, [r3, #0]
 8005028:	685b      	ldreq	r3, [r3, #4]
 800502a:	1852      	addeq	r2, r2, r1
 800502c:	6022      	streq	r2, [r4, #0]
 800502e:	6063      	str	r3, [r4, #4]
 8005030:	6004      	str	r4, [r0, #0]
 8005032:	e7ed      	b.n	8005010 <_free_r+0x24>
 8005034:	461a      	mov	r2, r3
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	b10b      	cbz	r3, 800503e <_free_r+0x52>
 800503a:	42a3      	cmp	r3, r4
 800503c:	d9fa      	bls.n	8005034 <_free_r+0x48>
 800503e:	6811      	ldr	r1, [r2, #0]
 8005040:	1850      	adds	r0, r2, r1
 8005042:	42a0      	cmp	r0, r4
 8005044:	d10b      	bne.n	800505e <_free_r+0x72>
 8005046:	6820      	ldr	r0, [r4, #0]
 8005048:	4401      	add	r1, r0
 800504a:	1850      	adds	r0, r2, r1
 800504c:	4283      	cmp	r3, r0
 800504e:	6011      	str	r1, [r2, #0]
 8005050:	d1de      	bne.n	8005010 <_free_r+0x24>
 8005052:	6818      	ldr	r0, [r3, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	4401      	add	r1, r0
 8005058:	6011      	str	r1, [r2, #0]
 800505a:	6053      	str	r3, [r2, #4]
 800505c:	e7d8      	b.n	8005010 <_free_r+0x24>
 800505e:	d902      	bls.n	8005066 <_free_r+0x7a>
 8005060:	230c      	movs	r3, #12
 8005062:	602b      	str	r3, [r5, #0]
 8005064:	e7d4      	b.n	8005010 <_free_r+0x24>
 8005066:	6820      	ldr	r0, [r4, #0]
 8005068:	1821      	adds	r1, r4, r0
 800506a:	428b      	cmp	r3, r1
 800506c:	bf01      	itttt	eq
 800506e:	6819      	ldreq	r1, [r3, #0]
 8005070:	685b      	ldreq	r3, [r3, #4]
 8005072:	1809      	addeq	r1, r1, r0
 8005074:	6021      	streq	r1, [r4, #0]
 8005076:	6063      	str	r3, [r4, #4]
 8005078:	6054      	str	r4, [r2, #4]
 800507a:	e7c9      	b.n	8005010 <_free_r+0x24>
 800507c:	bd38      	pop	{r3, r4, r5, pc}
 800507e:	bf00      	nop
 8005080:	200000c4 	.word	0x200000c4

08005084 <_malloc_r>:
 8005084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005086:	1ccd      	adds	r5, r1, #3
 8005088:	f025 0503 	bic.w	r5, r5, #3
 800508c:	3508      	adds	r5, #8
 800508e:	2d0c      	cmp	r5, #12
 8005090:	bf38      	it	cc
 8005092:	250c      	movcc	r5, #12
 8005094:	2d00      	cmp	r5, #0
 8005096:	4606      	mov	r6, r0
 8005098:	db01      	blt.n	800509e <_malloc_r+0x1a>
 800509a:	42a9      	cmp	r1, r5
 800509c:	d903      	bls.n	80050a6 <_malloc_r+0x22>
 800509e:	230c      	movs	r3, #12
 80050a0:	6033      	str	r3, [r6, #0]
 80050a2:	2000      	movs	r0, #0
 80050a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050a6:	f000 f87d 	bl	80051a4 <__malloc_lock>
 80050aa:	4921      	ldr	r1, [pc, #132]	; (8005130 <_malloc_r+0xac>)
 80050ac:	680a      	ldr	r2, [r1, #0]
 80050ae:	4614      	mov	r4, r2
 80050b0:	b99c      	cbnz	r4, 80050da <_malloc_r+0x56>
 80050b2:	4f20      	ldr	r7, [pc, #128]	; (8005134 <_malloc_r+0xb0>)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	b923      	cbnz	r3, 80050c2 <_malloc_r+0x3e>
 80050b8:	4621      	mov	r1, r4
 80050ba:	4630      	mov	r0, r6
 80050bc:	f000 f862 	bl	8005184 <_sbrk_r>
 80050c0:	6038      	str	r0, [r7, #0]
 80050c2:	4629      	mov	r1, r5
 80050c4:	4630      	mov	r0, r6
 80050c6:	f000 f85d 	bl	8005184 <_sbrk_r>
 80050ca:	1c43      	adds	r3, r0, #1
 80050cc:	d123      	bne.n	8005116 <_malloc_r+0x92>
 80050ce:	230c      	movs	r3, #12
 80050d0:	4630      	mov	r0, r6
 80050d2:	6033      	str	r3, [r6, #0]
 80050d4:	f000 f86c 	bl	80051b0 <__malloc_unlock>
 80050d8:	e7e3      	b.n	80050a2 <_malloc_r+0x1e>
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	1b5b      	subs	r3, r3, r5
 80050de:	d417      	bmi.n	8005110 <_malloc_r+0x8c>
 80050e0:	2b0b      	cmp	r3, #11
 80050e2:	d903      	bls.n	80050ec <_malloc_r+0x68>
 80050e4:	6023      	str	r3, [r4, #0]
 80050e6:	441c      	add	r4, r3
 80050e8:	6025      	str	r5, [r4, #0]
 80050ea:	e004      	b.n	80050f6 <_malloc_r+0x72>
 80050ec:	6863      	ldr	r3, [r4, #4]
 80050ee:	42a2      	cmp	r2, r4
 80050f0:	bf0c      	ite	eq
 80050f2:	600b      	streq	r3, [r1, #0]
 80050f4:	6053      	strne	r3, [r2, #4]
 80050f6:	4630      	mov	r0, r6
 80050f8:	f000 f85a 	bl	80051b0 <__malloc_unlock>
 80050fc:	f104 000b 	add.w	r0, r4, #11
 8005100:	1d23      	adds	r3, r4, #4
 8005102:	f020 0007 	bic.w	r0, r0, #7
 8005106:	1ac2      	subs	r2, r0, r3
 8005108:	d0cc      	beq.n	80050a4 <_malloc_r+0x20>
 800510a:	1a1b      	subs	r3, r3, r0
 800510c:	50a3      	str	r3, [r4, r2]
 800510e:	e7c9      	b.n	80050a4 <_malloc_r+0x20>
 8005110:	4622      	mov	r2, r4
 8005112:	6864      	ldr	r4, [r4, #4]
 8005114:	e7cc      	b.n	80050b0 <_malloc_r+0x2c>
 8005116:	1cc4      	adds	r4, r0, #3
 8005118:	f024 0403 	bic.w	r4, r4, #3
 800511c:	42a0      	cmp	r0, r4
 800511e:	d0e3      	beq.n	80050e8 <_malloc_r+0x64>
 8005120:	1a21      	subs	r1, r4, r0
 8005122:	4630      	mov	r0, r6
 8005124:	f000 f82e 	bl	8005184 <_sbrk_r>
 8005128:	3001      	adds	r0, #1
 800512a:	d1dd      	bne.n	80050e8 <_malloc_r+0x64>
 800512c:	e7cf      	b.n	80050ce <_malloc_r+0x4a>
 800512e:	bf00      	nop
 8005130:	200000c4 	.word	0x200000c4
 8005134:	200000c8 	.word	0x200000c8

08005138 <_realloc_r>:
 8005138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513a:	4607      	mov	r7, r0
 800513c:	4614      	mov	r4, r2
 800513e:	460e      	mov	r6, r1
 8005140:	b921      	cbnz	r1, 800514c <_realloc_r+0x14>
 8005142:	4611      	mov	r1, r2
 8005144:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005148:	f7ff bf9c 	b.w	8005084 <_malloc_r>
 800514c:	b922      	cbnz	r2, 8005158 <_realloc_r+0x20>
 800514e:	f7ff ff4d 	bl	8004fec <_free_r>
 8005152:	4625      	mov	r5, r4
 8005154:	4628      	mov	r0, r5
 8005156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005158:	f000 f830 	bl	80051bc <_malloc_usable_size_r>
 800515c:	42a0      	cmp	r0, r4
 800515e:	d20f      	bcs.n	8005180 <_realloc_r+0x48>
 8005160:	4621      	mov	r1, r4
 8005162:	4638      	mov	r0, r7
 8005164:	f7ff ff8e 	bl	8005084 <_malloc_r>
 8005168:	4605      	mov	r5, r0
 800516a:	2800      	cmp	r0, #0
 800516c:	d0f2      	beq.n	8005154 <_realloc_r+0x1c>
 800516e:	4631      	mov	r1, r6
 8005170:	4622      	mov	r2, r4
 8005172:	f7ff ff13 	bl	8004f9c <memcpy>
 8005176:	4631      	mov	r1, r6
 8005178:	4638      	mov	r0, r7
 800517a:	f7ff ff37 	bl	8004fec <_free_r>
 800517e:	e7e9      	b.n	8005154 <_realloc_r+0x1c>
 8005180:	4635      	mov	r5, r6
 8005182:	e7e7      	b.n	8005154 <_realloc_r+0x1c>

08005184 <_sbrk_r>:
 8005184:	b538      	push	{r3, r4, r5, lr}
 8005186:	2300      	movs	r3, #0
 8005188:	4d05      	ldr	r5, [pc, #20]	; (80051a0 <_sbrk_r+0x1c>)
 800518a:	4604      	mov	r4, r0
 800518c:	4608      	mov	r0, r1
 800518e:	602b      	str	r3, [r5, #0]
 8005190:	f7fd faec 	bl	800276c <_sbrk>
 8005194:	1c43      	adds	r3, r0, #1
 8005196:	d102      	bne.n	800519e <_sbrk_r+0x1a>
 8005198:	682b      	ldr	r3, [r5, #0]
 800519a:	b103      	cbz	r3, 800519e <_sbrk_r+0x1a>
 800519c:	6023      	str	r3, [r4, #0]
 800519e:	bd38      	pop	{r3, r4, r5, pc}
 80051a0:	20000284 	.word	0x20000284

080051a4 <__malloc_lock>:
 80051a4:	4801      	ldr	r0, [pc, #4]	; (80051ac <__malloc_lock+0x8>)
 80051a6:	f000 b811 	b.w	80051cc <__retarget_lock_acquire_recursive>
 80051aa:	bf00      	nop
 80051ac:	2000028c 	.word	0x2000028c

080051b0 <__malloc_unlock>:
 80051b0:	4801      	ldr	r0, [pc, #4]	; (80051b8 <__malloc_unlock+0x8>)
 80051b2:	f000 b80c 	b.w	80051ce <__retarget_lock_release_recursive>
 80051b6:	bf00      	nop
 80051b8:	2000028c 	.word	0x2000028c

080051bc <_malloc_usable_size_r>:
 80051bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051c0:	1f18      	subs	r0, r3, #4
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	bfbc      	itt	lt
 80051c6:	580b      	ldrlt	r3, [r1, r0]
 80051c8:	18c0      	addlt	r0, r0, r3
 80051ca:	4770      	bx	lr

080051cc <__retarget_lock_acquire_recursive>:
 80051cc:	4770      	bx	lr

080051ce <__retarget_lock_release_recursive>:
 80051ce:	4770      	bx	lr

080051d0 <_init>:
 80051d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d2:	bf00      	nop
 80051d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051d6:	bc08      	pop	{r3}
 80051d8:	469e      	mov	lr, r3
 80051da:	4770      	bx	lr

080051dc <_fini>:
 80051dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051de:	bf00      	nop
 80051e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051e2:	bc08      	pop	{r3}
 80051e4:	469e      	mov	lr, r3
 80051e6:	4770      	bx	lr
