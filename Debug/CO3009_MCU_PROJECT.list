
CO3009_MCU_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003008  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003114  08003114  00013114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800313c  0800313c  00020138  2**0
                  CONTENTS
  4 .ARM          00000000  0800313c  0800313c  00020138  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800313c  0800313c  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800313c  0800313c  0001313c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003140  08003140  00013140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  08003144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000138  0800327c  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  0800327c  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce48  00000000  00000000  00020161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002025  00000000  00000000  0002cfa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  0002efd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  0002fc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017630  00000000  00000000  00030810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d238  00000000  00000000  00047e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000873f6  00000000  00000000  00055078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dc46e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003338  00000000  00000000  000dc4c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000138 	.word	0x20000138
 8000128:	00000000 	.word	0x00000000
 800012c:	080030fc 	.word	0x080030fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000013c 	.word	0x2000013c
 8000148:	080030fc 	.word	0x080030fc

0800014c <readKeyInput>:
static uint8_t flagForLongPress3s[NUM_OF_BUTTONS];
static uint16_t counterLongPress3s[NUM_OF_BUTTONS];

int button_flag[NUM_OF_BUTTONS];
int button_longPressed_flag[NUM_OF_BUTTONS];
void readKeyInput() {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (int i=0; i < NUM_OF_BUTTONS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e0d0      	b.n	80002fa <readKeyInput+0x1ae>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000158:	4a6c      	ldr	r2, [pc, #432]	; (800030c <readKeyInput+0x1c0>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	7819      	ldrb	r1, [r3, #0]
 8000160:	4a6b      	ldr	r2, [pc, #428]	; (8000310 <readKeyInput+0x1c4>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4413      	add	r3, r2
 8000166:	460a      	mov	r2, r1
 8000168:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 800016a:	4a6a      	ldr	r2, [pc, #424]	; (8000314 <readKeyInput+0x1c8>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	4413      	add	r3, r2
 8000170:	7819      	ldrb	r1, [r3, #0]
 8000172:	4a66      	ldr	r2, [pc, #408]	; (800030c <readKeyInput+0x1c0>)
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4413      	add	r3, r2
 8000178:	460a      	mov	r2, r1
 800017a:	701a      	strb	r2, [r3, #0]

		if(i == BTN_SELECT_INDEX) debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(A1_BTN_SELECT_GPIO_Port, A1_BTN_SELECT_Pin);
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d10b      	bne.n	800019a <readKeyInput+0x4e>
 8000182:	2102      	movs	r1, #2
 8000184:	4864      	ldr	r0, [pc, #400]	; (8000318 <readKeyInput+0x1cc>)
 8000186:	f001 fbd7 	bl	8001938 <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
 800018c:	4619      	mov	r1, r3
 800018e:	4a61      	ldr	r2, [pc, #388]	; (8000314 <readKeyInput+0x1c8>)
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	4413      	add	r3, r2
 8000194:	460a      	mov	r2, r1
 8000196:	701a      	strb	r2, [r3, #0]
 8000198:	e02b      	b.n	80001f2 <readKeyInput+0xa6>
		else if(i == BTN_MODIFY_INDEX) debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(A2_BTN_MODIFY_GPIO_Port, A2_BTN_MODIFY_Pin);
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d10b      	bne.n	80001b8 <readKeyInput+0x6c>
 80001a0:	2110      	movs	r1, #16
 80001a2:	485d      	ldr	r0, [pc, #372]	; (8000318 <readKeyInput+0x1cc>)
 80001a4:	f001 fbc8 	bl	8001938 <HAL_GPIO_ReadPin>
 80001a8:	4603      	mov	r3, r0
 80001aa:	4619      	mov	r1, r3
 80001ac:	4a59      	ldr	r2, [pc, #356]	; (8000314 <readKeyInput+0x1c8>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	4413      	add	r3, r2
 80001b2:	460a      	mov	r2, r1
 80001b4:	701a      	strb	r2, [r3, #0]
 80001b6:	e01c      	b.n	80001f2 <readKeyInput+0xa6>
		else if(i == BTN_SET_INDEX) debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(A3_BTN_SET_GPIO_Port, A3_BTN_SET_Pin);
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	2b02      	cmp	r3, #2
 80001bc:	d10b      	bne.n	80001d6 <readKeyInput+0x8a>
 80001be:	2101      	movs	r1, #1
 80001c0:	4856      	ldr	r0, [pc, #344]	; (800031c <readKeyInput+0x1d0>)
 80001c2:	f001 fbb9 	bl	8001938 <HAL_GPIO_ReadPin>
 80001c6:	4603      	mov	r3, r0
 80001c8:	4619      	mov	r1, r3
 80001ca:	4a52      	ldr	r2, [pc, #328]	; (8000314 <readKeyInput+0x1c8>)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	4413      	add	r3, r2
 80001d0:	460a      	mov	r2, r1
 80001d2:	701a      	strb	r2, [r3, #0]
 80001d4:	e00d      	b.n	80001f2 <readKeyInput+0xa6>
		else if(i == BTN_PED_INDEX )debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(A0_BTN_PED_GPIO_Port, A0_BTN_PED_Pin);
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	2b03      	cmp	r3, #3
 80001da:	d10a      	bne.n	80001f2 <readKeyInput+0xa6>
 80001dc:	2101      	movs	r1, #1
 80001de:	484e      	ldr	r0, [pc, #312]	; (8000318 <readKeyInput+0x1cc>)
 80001e0:	f001 fbaa 	bl	8001938 <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4619      	mov	r1, r3
 80001e8:	4a4a      	ldr	r2, [pc, #296]	; (8000314 <readKeyInput+0x1c8>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4413      	add	r3, r2
 80001ee:	460a      	mov	r2, r1
 80001f0:	701a      	strb	r2, [r3, #0]


		if ((debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) && (debounceButtonBuffer1[i] == debounceButtonBuffer3[i])) {
 80001f2:	4a48      	ldr	r2, [pc, #288]	; (8000314 <readKeyInput+0x1c8>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4413      	add	r3, r2
 80001f8:	781a      	ldrb	r2, [r3, #0]
 80001fa:	4944      	ldr	r1, [pc, #272]	; (800030c <readKeyInput+0x1c0>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	440b      	add	r3, r1
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	429a      	cmp	r2, r3
 8000204:	d123      	bne.n	800024e <readKeyInput+0x102>
 8000206:	4a43      	ldr	r2, [pc, #268]	; (8000314 <readKeyInput+0x1c8>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	4413      	add	r3, r2
 800020c:	781a      	ldrb	r2, [r3, #0]
 800020e:	4940      	ldr	r1, [pc, #256]	; (8000310 <readKeyInput+0x1c4>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	440b      	add	r3, r1
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	429a      	cmp	r2, r3
 8000218:	d119      	bne.n	800024e <readKeyInput+0x102>
			if (buttonBuffer[i] == BTN_RELEASED && debounceButtonBuffer1[i] == BTN_PRESSED) {
 800021a:	4a41      	ldr	r2, [pc, #260]	; (8000320 <readKeyInput+0x1d4>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4413      	add	r3, r2
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	2b01      	cmp	r3, #1
 8000224:	d10a      	bne.n	800023c <readKeyInput+0xf0>
 8000226:	4a3b      	ldr	r2, [pc, #236]	; (8000314 <readKeyInput+0x1c8>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	4413      	add	r3, r2
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d104      	bne.n	800023c <readKeyInput+0xf0>
				button_flag[i] = 1;
 8000232:	4a3c      	ldr	r2, [pc, #240]	; (8000324 <readKeyInput+0x1d8>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2101      	movs	r1, #1
 8000238:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			buttonBuffer[i] = debounceButtonBuffer1[i];
 800023c:	4a35      	ldr	r2, [pc, #212]	; (8000314 <readKeyInput+0x1c8>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4413      	add	r3, r2
 8000242:	7819      	ldrb	r1, [r3, #0]
 8000244:	4a36      	ldr	r2, [pc, #216]	; (8000320 <readKeyInput+0x1d4>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	4413      	add	r3, r2
 800024a:	460a      	mov	r2, r1
 800024c:	701a      	strb	r2, [r3, #0]
		}

		// LONGPRESSED 3S
		if (buttonBuffer[i] == BTN_PRESSED) {
 800024e:	4a34      	ldr	r2, [pc, #208]	; (8000320 <readKeyInput+0x1d4>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	4413      	add	r3, r2
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d117      	bne.n	800028a <readKeyInput+0x13e>
			if (counterLongPress3s[i] < PRESSED_DURATION_3S/TIMER_CYCLE) {
 800025a:	4a33      	ldr	r2, [pc, #204]	; (8000328 <readKeyInput+0x1dc>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000262:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000266:	d20a      	bcs.n	800027e <readKeyInput+0x132>
				counterLongPress3s[i]++;
 8000268:	4a2f      	ldr	r2, [pc, #188]	; (8000328 <readKeyInput+0x1dc>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000270:	3301      	adds	r3, #1
 8000272:	b299      	uxth	r1, r3
 8000274:	4a2c      	ldr	r2, [pc, #176]	; (8000328 <readKeyInput+0x1dc>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800027c:	e03a      	b.n	80002f4 <readKeyInput+0x1a8>
			} else {
				flagForLongPress3s[i] = 1;
 800027e:	4a2b      	ldr	r2, [pc, #172]	; (800032c <readKeyInput+0x1e0>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	4413      	add	r3, r2
 8000284:	2201      	movs	r2, #1
 8000286:	701a      	strb	r2, [r3, #0]
 8000288:	e034      	b.n	80002f4 <readKeyInput+0x1a8>
			}
		}
		else if (buttonBuffer[i] == BTN_RELEASED && flagForLongPress3s[i] == 1 ){
 800028a:	4a25      	ldr	r2, [pc, #148]	; (8000320 <readKeyInput+0x1d4>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	4413      	add	r3, r2
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	2b01      	cmp	r3, #1
 8000294:	d11a      	bne.n	80002cc <readKeyInput+0x180>
 8000296:	4a25      	ldr	r2, [pc, #148]	; (800032c <readKeyInput+0x1e0>)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4413      	add	r3, r2
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d114      	bne.n	80002cc <readKeyInput+0x180>
			button_longPressed_flag[i] = 1;
 80002a2:	4a23      	ldr	r2, [pc, #140]	; (8000330 <readKeyInput+0x1e4>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2101      	movs	r1, #1
 80002a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			button_flag[i] = 0;
 80002ac:	4a1d      	ldr	r2, [pc, #116]	; (8000324 <readKeyInput+0x1d8>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	2100      	movs	r1, #0
 80002b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterLongPress3s[i] = 0;
 80002b6:	4a1c      	ldr	r2, [pc, #112]	; (8000328 <readKeyInput+0x1dc>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2100      	movs	r1, #0
 80002bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForLongPress3s[i] = 0;
 80002c0:	4a1a      	ldr	r2, [pc, #104]	; (800032c <readKeyInput+0x1e0>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4413      	add	r3, r2
 80002c6:	2200      	movs	r2, #0
 80002c8:	701a      	strb	r2, [r3, #0]
 80002ca:	e013      	b.n	80002f4 <readKeyInput+0x1a8>
		}
		else {
			button_longPressed_flag[i] = 0;
 80002cc:	4a18      	ldr	r2, [pc, #96]	; (8000330 <readKeyInput+0x1e4>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2100      	movs	r1, #0
 80002d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			button_flag[i] = 0;
 80002d6:	4a13      	ldr	r2, [pc, #76]	; (8000324 <readKeyInput+0x1d8>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2100      	movs	r1, #0
 80002dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterLongPress3s[i] = 0;
 80002e0:	4a11      	ldr	r2, [pc, #68]	; (8000328 <readKeyInput+0x1dc>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2100      	movs	r1, #0
 80002e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForLongPress3s[i] = 0;
 80002ea:	4a10      	ldr	r2, [pc, #64]	; (800032c <readKeyInput+0x1e0>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4413      	add	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < NUM_OF_BUTTONS; i++){
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	3301      	adds	r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2b03      	cmp	r3, #3
 80002fe:	f77f af2b 	ble.w	8000158 <readKeyInput+0xc>
		}
	}
}
 8000302:	bf00      	nop
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	2000015c 	.word	0x2000015c
 8000310:	20000160 	.word	0x20000160
 8000314:	20000158 	.word	0x20000158
 8000318:	40010800 	.word	0x40010800
 800031c:	40010c00 	.word	0x40010c00
 8000320:	20000154 	.word	0x20000154
 8000324:	20000188 	.word	0x20000188
 8000328:	20000168 	.word	0x20000168
 800032c:	20000164 	.word	0x20000164
 8000330:	20000178 	.word	0x20000178

08000334 <isPressedAndReleased>:
int isPressedAndReleased(int buttonIndex) {
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	if (button_flag[buttonIndex] == 1) {
 800033c:	4a09      	ldr	r2, [pc, #36]	; (8000364 <isPressedAndReleased+0x30>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d106      	bne.n	8000356 <isPressedAndReleased+0x22>
		button_flag[buttonIndex] = 0;
 8000348:	4a06      	ldr	r2, [pc, #24]	; (8000364 <isPressedAndReleased+0x30>)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	2100      	movs	r1, #0
 800034e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000352:	2301      	movs	r3, #1
 8000354:	e000      	b.n	8000358 <isPressedAndReleased+0x24>
	}
	return 0;
 8000356:	2300      	movs	r3, #0
}
 8000358:	4618      	mov	r0, r3
 800035a:	370c      	adds	r7, #12
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	20000188 	.word	0x20000188

08000368 <isLongPressedAndReleased>:

int isLongPressedAndReleased(int buttonIndex){
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	if (button_longPressed_flag[buttonIndex] == 1) {
 8000370:	4a09      	ldr	r2, [pc, #36]	; (8000398 <isLongPressedAndReleased+0x30>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000378:	2b01      	cmp	r3, #1
 800037a:	d106      	bne.n	800038a <isLongPressedAndReleased+0x22>
		button_longPressed_flag[buttonIndex] = 0;
 800037c:	4a06      	ldr	r2, [pc, #24]	; (8000398 <isLongPressedAndReleased+0x30>)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	2100      	movs	r1, #0
 8000382:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000386:	2301      	movs	r3, #1
 8000388:	e000      	b.n	800038c <isLongPressedAndReleased+0x24>
	}
	return 0;
 800038a:	2300      	movs	r3, #0
}
 800038c:	4618      	mov	r0, r3
 800038e:	370c      	adds	r7, #12
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	20000178 	.word	0x20000178

0800039c <trafficLight_automatic>:
#include "software_timer.h"
#include "led_segment_control.h"
#include "melody.h"
#include "main.h"

void trafficLight_automatic(){
 800039c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800039e:	b091      	sub	sp, #68	; 0x44
 80003a0:	af10      	add	r7, sp, #64	; 0x40
	switch(state){
 80003a2:	4bae      	ldr	r3, [pc, #696]	; (800065c <trafficLight_automatic+0x2c0>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	2b04      	cmp	r3, #4
 80003a8:	f200 827d 	bhi.w	80008a6 <trafficLight_automatic+0x50a>
 80003ac:	a201      	add	r2, pc, #4	; (adr r2, 80003b4 <trafficLight_automatic+0x18>)
 80003ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003b2:	bf00      	nop
 80003b4:	080003c9 	.word	0x080003c9
 80003b8:	08000415 	.word	0x08000415
 80003bc:	08000555 	.word	0x08000555
 80003c0:	08000699 	.word	0x08000699
 80003c4:	080007a1 	.word	0x080007a1
	case IDLE:
		state = AUTO_RED1_GREEN2;
 80003c8:	4ba4      	ldr	r3, [pc, #656]	; (800065c <trafficLight_automatic+0x2c0>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	701a      	strb	r2, [r3, #0]
		clearTrafficDisplay();
 80003ce:	f000 faff 	bl	80009d0 <clearTrafficDisplay>
		segment1Counter = counter_red / DIVISION_NUMBER;
 80003d2:	4ba3      	ldr	r3, [pc, #652]	; (8000660 <trafficLight_automatic+0x2c4>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4aa3      	ldr	r2, [pc, #652]	; (8000664 <trafficLight_automatic+0x2c8>)
 80003d8:	fb82 1203 	smull	r1, r2, r2, r3
 80003dc:	1192      	asrs	r2, r2, #6
 80003de:	17db      	asrs	r3, r3, #31
 80003e0:	1ad3      	subs	r3, r2, r3
 80003e2:	4aa1      	ldr	r2, [pc, #644]	; (8000668 <trafficLight_automatic+0x2cc>)
 80003e4:	6013      	str	r3, [r2, #0]
		segment2Counter	= counter_green / DIVISION_NUMBER;
 80003e6:	4ba1      	ldr	r3, [pc, #644]	; (800066c <trafficLight_automatic+0x2d0>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a9e      	ldr	r2, [pc, #632]	; (8000664 <trafficLight_automatic+0x2c8>)
 80003ec:	fb82 1203 	smull	r1, r2, r2, r3
 80003f0:	1192      	asrs	r2, r2, #6
 80003f2:	17db      	asrs	r3, r3, #31
 80003f4:	1ad3      	subs	r3, r2, r3
 80003f6:	4a9e      	ldr	r2, [pc, #632]	; (8000670 <trafficLight_automatic+0x2d4>)
 80003f8:	6013      	str	r3, [r2, #0]
		setTimerTraffic1(counter_green);
 80003fa:	4b9c      	ldr	r3, [pc, #624]	; (800066c <trafficLight_automatic+0x2d0>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4618      	mov	r0, r3
 8000400:	f000 fd5e 	bl	8000ec0 <setTimerTraffic1>
		setTimerCounter1(DURATION_1S);
 8000404:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000408:	f000 fd92 	bl	8000f30 <setTimerCounter1>
		counter_pedestrian = 0;
 800040c:	4b99      	ldr	r3, [pc, #612]	; (8000674 <trafficLight_automatic+0x2d8>)
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
		break;
 8000412:	e251      	b.n	80008b8 <trafficLight_automatic+0x51c>
	case AUTO_RED1_GREEN2:
		displayTrafficLight(RED_LIGHT, GREEN_LIGHT);
 8000414:	2103      	movs	r1, #3
 8000416:	2001      	movs	r0, #1
 8000418:	f000 fa6e 	bl	80008f8 <displayTrafficLight>
		if(isPedestrian == 1) displayPedestrianLight(PEDESTRIAN_LIGHT_GO);
 800041c:	4b96      	ldr	r3, [pc, #600]	; (8000678 <trafficLight_automatic+0x2dc>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2b01      	cmp	r3, #1
 8000422:	d102      	bne.n	800042a <trafficLight_automatic+0x8e>
 8000424:	2004      	movs	r0, #4
 8000426:	f000 faf1 	bl	8000a0c <displayPedestrianLight>
		if(isPedestrian == 0) displayPedestrianLight(PEDESTRIAN_LIGHT_OFF);
 800042a:	4b93      	ldr	r3, [pc, #588]	; (8000678 <trafficLight_automatic+0x2dc>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d102      	bne.n	8000438 <trafficLight_automatic+0x9c>
 8000432:	2006      	movs	r0, #6
 8000434:	f000 faea 	bl	8000a0c <displayPedestrianLight>
		if(isInManual == 1){
 8000438:	4b90      	ldr	r3, [pc, #576]	; (800067c <trafficLight_automatic+0x2e0>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	2b01      	cmp	r3, #1
 800043e:	d102      	bne.n	8000446 <trafficLight_automatic+0xaa>
			state = MANUAL_RED1_GREEN2;
 8000440:	4b86      	ldr	r3, [pc, #536]	; (800065c <trafficLight_automatic+0x2c0>)
 8000442:	220b      	movs	r2, #11
 8000444:	701a      	strb	r2, [r3, #0]
		}
		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 8000446:	2000      	movs	r0, #0
 8000448:	f7ff ff74 	bl	8000334 <isPressedAndReleased>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d008      	beq.n	8000464 <trafficLight_automatic+0xc8>
			state = MANUAL_RED1_GREEN2;
 8000452:	4b82      	ldr	r3, [pc, #520]	; (800065c <trafficLight_automatic+0x2c0>)
 8000454:	220b      	movs	r2, #11
 8000456:	701a      	strb	r2, [r3, #0]
			isInManual = 1;
 8000458:	4b88      	ldr	r3, [pc, #544]	; (800067c <trafficLight_automatic+0x2e0>)
 800045a:	2201      	movs	r2, #1
 800045c:	601a      	str	r2, [r3, #0]
			isInAuto = 0;
 800045e:	4b88      	ldr	r3, [pc, #544]	; (8000680 <trafficLight_automatic+0x2e4>)
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
		}
		if(isLongPressedAndReleased(BTN_SELECT_INDEX)){
 8000464:	2000      	movs	r0, #0
 8000466:	f7ff ff7f 	bl	8000368 <isLongPressedAndReleased>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d014      	beq.n	800049a <trafficLight_automatic+0xfe>
			state = CHANGE_MODE_RED;
 8000470:	4b7a      	ldr	r3, [pc, #488]	; (800065c <trafficLight_automatic+0x2c0>)
 8000472:	2205      	movs	r2, #5
 8000474:	701a      	strb	r2, [r3, #0]
			isInChange = 1;
 8000476:	4b83      	ldr	r3, [pc, #524]	; (8000684 <trafficLight_automatic+0x2e8>)
 8000478:	2201      	movs	r2, #1
 800047a:	601a      	str	r2, [r3, #0]
			setTimerTriggerLed(DURATION_FOR_4HZ);
 800047c:	20fa      	movs	r0, #250	; 0xfa
 800047e:	f000 fd3b 	bl	8000ef8 <setTimerTriggerLed>
			clearTrafficDisplay();
 8000482:	f000 faa5 	bl	80009d0 <clearTrafficDisplay>
			tempCounter = counter_red/DIVISION_NUMBER;
 8000486:	4b76      	ldr	r3, [pc, #472]	; (8000660 <trafficLight_automatic+0x2c4>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a76      	ldr	r2, [pc, #472]	; (8000664 <trafficLight_automatic+0x2c8>)
 800048c:	fb82 1203 	smull	r1, r2, r2, r3
 8000490:	1192      	asrs	r2, r2, #6
 8000492:	17db      	asrs	r3, r3, #31
 8000494:	1ad3      	subs	r3, r2, r3
 8000496:	4a7c      	ldr	r2, [pc, #496]	; (8000688 <trafficLight_automatic+0x2ec>)
 8000498:	6013      	str	r3, [r2, #0]
		}
		if(isPressedAndReleased(BTN_PED_INDEX)){
 800049a:	2003      	movs	r0, #3
 800049c:	f7ff ff4a 	bl	8000334 <isPressedAndReleased>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d002      	beq.n	80004ac <trafficLight_automatic+0x110>
			isPedestrian = 1;
 80004a6:	4b74      	ldr	r3, [pc, #464]	; (8000678 <trafficLight_automatic+0x2dc>)
 80004a8:	2201      	movs	r2, #1
 80004aa:	601a      	str	r2, [r3, #0]
		}
		if(countDownTimer1_counter == 1){
 80004ac:	4b77      	ldr	r3, [pc, #476]	; (800068c <trafficLight_automatic+0x2f0>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	f040 81fa 	bne.w	80008aa <trafficLight_automatic+0x50e>
			segment1Counter --;
 80004b6:	4b6c      	ldr	r3, [pc, #432]	; (8000668 <trafficLight_automatic+0x2cc>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	3b01      	subs	r3, #1
 80004bc:	4a6a      	ldr	r2, [pc, #424]	; (8000668 <trafficLight_automatic+0x2cc>)
 80004be:	6013      	str	r3, [r2, #0]
			segment2Counter --;
 80004c0:	4b6b      	ldr	r3, [pc, #428]	; (8000670 <trafficLight_automatic+0x2d4>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	3b01      	subs	r3, #1
 80004c6:	4a6a      	ldr	r2, [pc, #424]	; (8000670 <trafficLight_automatic+0x2d4>)
 80004c8:	6013      	str	r3, [r2, #0]

			if(segment1Counter <= 2 && isPedestrian == 1) {
 80004ca:	4b67      	ldr	r3, [pc, #412]	; (8000668 <trafficLight_automatic+0x2cc>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	2b02      	cmp	r3, #2
 80004d0:	dc17      	bgt.n	8000502 <trafficLight_automatic+0x166>
 80004d2:	4b69      	ldr	r3, [pc, #420]	; (8000678 <trafficLight_automatic+0x2dc>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d113      	bne.n	8000502 <trafficLight_automatic+0x166>
				buzzer_sound(htim3, 10);
 80004da:	4e6d      	ldr	r6, [pc, #436]	; (8000690 <trafficLight_automatic+0x2f4>)
 80004dc:	230a      	movs	r3, #10
 80004de:	930e      	str	r3, [sp, #56]	; 0x38
 80004e0:	466d      	mov	r5, sp
 80004e2:	f106 0410 	add.w	r4, r6, #16
 80004e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80004f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80004fa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80004fe:	f000 fcab 	bl	8000e58 <buzzer_sound>
			}

			if(segment2Counter  == 0) {
 8000502:	4b5b      	ldr	r3, [pc, #364]	; (8000670 <trafficLight_automatic+0x2d4>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d11f      	bne.n	800054a <trafficLight_automatic+0x1ae>
				segment2Counter = counter_yellow / DIVISION_NUMBER;
 800050a:	4b62      	ldr	r3, [pc, #392]	; (8000694 <trafficLight_automatic+0x2f8>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a55      	ldr	r2, [pc, #340]	; (8000664 <trafficLight_automatic+0x2c8>)
 8000510:	fb82 1203 	smull	r1, r2, r2, r3
 8000514:	1192      	asrs	r2, r2, #6
 8000516:	17db      	asrs	r3, r3, #31
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	4a55      	ldr	r2, [pc, #340]	; (8000670 <trafficLight_automatic+0x2d4>)
 800051c:	6013      	str	r3, [r2, #0]
				state = AUTO_RED1_YELLOW2;
 800051e:	4b4f      	ldr	r3, [pc, #316]	; (800065c <trafficLight_automatic+0x2c0>)
 8000520:	2202      	movs	r2, #2
 8000522:	701a      	strb	r2, [r3, #0]

				if(isPedestrian == 1) {
 8000524:	4b54      	ldr	r3, [pc, #336]	; (8000678 <trafficLight_automatic+0x2dc>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d10e      	bne.n	800054a <trafficLight_automatic+0x1ae>
					counter_pedestrian++;
 800052c:	4b51      	ldr	r3, [pc, #324]	; (8000674 <trafficLight_automatic+0x2d8>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	3301      	adds	r3, #1
 8000532:	4a50      	ldr	r2, [pc, #320]	; (8000674 <trafficLight_automatic+0x2d8>)
 8000534:	6013      	str	r3, [r2, #0]
					if(counter_pedestrian == PEDESTRIAN_LIGHT_CYCLE) {
 8000536:	4b4f      	ldr	r3, [pc, #316]	; (8000674 <trafficLight_automatic+0x2d8>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2b08      	cmp	r3, #8
 800053c:	d105      	bne.n	800054a <trafficLight_automatic+0x1ae>
						counter_pedestrian = 0;
 800053e:	4b4d      	ldr	r3, [pc, #308]	; (8000674 <trafficLight_automatic+0x2d8>)
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
						isPedestrian = 0;
 8000544:	4b4c      	ldr	r3, [pc, #304]	; (8000678 <trafficLight_automatic+0x2dc>)
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
				}


			}

			setTimerCounter1(DURATION_1S);
 800054a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800054e:	f000 fcef 	bl	8000f30 <setTimerCounter1>
		}
		break;
 8000552:	e1aa      	b.n	80008aa <trafficLight_automatic+0x50e>
	case AUTO_RED1_YELLOW2:
		displayTrafficLight(RED_LIGHT, YELLOW_LIGHT);
 8000554:	2102      	movs	r1, #2
 8000556:	2001      	movs	r0, #1
 8000558:	f000 f9ce 	bl	80008f8 <displayTrafficLight>
		if(isPedestrian == 1) displayPedestrianLight(PEDESTRIAN_LIGHT_GO);
 800055c:	4b46      	ldr	r3, [pc, #280]	; (8000678 <trafficLight_automatic+0x2dc>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d102      	bne.n	800056a <trafficLight_automatic+0x1ce>
 8000564:	2004      	movs	r0, #4
 8000566:	f000 fa51 	bl	8000a0c <displayPedestrianLight>
		if(isPedestrian == 0) displayPedestrianLight(PEDESTRIAN_LIGHT_OFF);
 800056a:	4b43      	ldr	r3, [pc, #268]	; (8000678 <trafficLight_automatic+0x2dc>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d102      	bne.n	8000578 <trafficLight_automatic+0x1dc>
 8000572:	2006      	movs	r0, #6
 8000574:	f000 fa4a 	bl	8000a0c <displayPedestrianLight>
		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 8000578:	2000      	movs	r0, #0
 800057a:	f7ff fedb 	bl	8000334 <isPressedAndReleased>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d005      	beq.n	8000590 <trafficLight_automatic+0x1f4>
			isInManual = 1;
 8000584:	4b3d      	ldr	r3, [pc, #244]	; (800067c <trafficLight_automatic+0x2e0>)
 8000586:	2201      	movs	r2, #1
 8000588:	601a      	str	r2, [r3, #0]
			isInAuto = 0;
 800058a:	4b3d      	ldr	r3, [pc, #244]	; (8000680 <trafficLight_automatic+0x2e4>)
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
		}
		if(isPressedAndReleased(BTN_PED_INDEX)){
 8000590:	2003      	movs	r0, #3
 8000592:	f7ff fecf 	bl	8000334 <isPressedAndReleased>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d002      	beq.n	80005a2 <trafficLight_automatic+0x206>
			isPedestrian = 1;
 800059c:	4b36      	ldr	r3, [pc, #216]	; (8000678 <trafficLight_automatic+0x2dc>)
 800059e:	2201      	movs	r2, #1
 80005a0:	601a      	str	r2, [r3, #0]
		}
		if(isLongPressedAndReleased(BTN_SELECT_INDEX)){
 80005a2:	2000      	movs	r0, #0
 80005a4:	f7ff fee0 	bl	8000368 <isLongPressedAndReleased>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d014      	beq.n	80005d8 <trafficLight_automatic+0x23c>
			state = CHANGE_MODE_RED;
 80005ae:	4b2b      	ldr	r3, [pc, #172]	; (800065c <trafficLight_automatic+0x2c0>)
 80005b0:	2205      	movs	r2, #5
 80005b2:	701a      	strb	r2, [r3, #0]
			isInChange = 1;
 80005b4:	4b33      	ldr	r3, [pc, #204]	; (8000684 <trafficLight_automatic+0x2e8>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	601a      	str	r2, [r3, #0]
			setTimerTriggerLed(DURATION_FOR_4HZ);
 80005ba:	20fa      	movs	r0, #250	; 0xfa
 80005bc:	f000 fc9c 	bl	8000ef8 <setTimerTriggerLed>
			clearTrafficDisplay();
 80005c0:	f000 fa06 	bl	80009d0 <clearTrafficDisplay>
			tempCounter = counter_red/DIVISION_NUMBER;
 80005c4:	4b26      	ldr	r3, [pc, #152]	; (8000660 <trafficLight_automatic+0x2c4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a26      	ldr	r2, [pc, #152]	; (8000664 <trafficLight_automatic+0x2c8>)
 80005ca:	fb82 1203 	smull	r1, r2, r2, r3
 80005ce:	1192      	asrs	r2, r2, #6
 80005d0:	17db      	asrs	r3, r3, #31
 80005d2:	1ad3      	subs	r3, r2, r3
 80005d4:	4a2c      	ldr	r2, [pc, #176]	; (8000688 <trafficLight_automatic+0x2ec>)
 80005d6:	6013      	str	r3, [r2, #0]
		}
		if(countDownTimer1_counter == 1){
 80005d8:	4b2c      	ldr	r3, [pc, #176]	; (800068c <trafficLight_automatic+0x2f0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	f040 8166 	bne.w	80008ae <trafficLight_automatic+0x512>
			segment1Counter --;
 80005e2:	4b21      	ldr	r3, [pc, #132]	; (8000668 <trafficLight_automatic+0x2cc>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	3b01      	subs	r3, #1
 80005e8:	4a1f      	ldr	r2, [pc, #124]	; (8000668 <trafficLight_automatic+0x2cc>)
 80005ea:	6013      	str	r3, [r2, #0]
			segment2Counter --;
 80005ec:	4b20      	ldr	r3, [pc, #128]	; (8000670 <trafficLight_automatic+0x2d4>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	3b01      	subs	r3, #1
 80005f2:	4a1f      	ldr	r2, [pc, #124]	; (8000670 <trafficLight_automatic+0x2d4>)
 80005f4:	6013      	str	r3, [r2, #0]
			if (segment2Counter <= 0){
 80005f6:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <trafficLight_automatic+0x2d4>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	dc29      	bgt.n	8000652 <trafficLight_automatic+0x2b6>
				segment1Counter = counter_green / DIVISION_NUMBER;
 80005fe:	4b1b      	ldr	r3, [pc, #108]	; (800066c <trafficLight_automatic+0x2d0>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a18      	ldr	r2, [pc, #96]	; (8000664 <trafficLight_automatic+0x2c8>)
 8000604:	fb82 1203 	smull	r1, r2, r2, r3
 8000608:	1192      	asrs	r2, r2, #6
 800060a:	17db      	asrs	r3, r3, #31
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	4a16      	ldr	r2, [pc, #88]	; (8000668 <trafficLight_automatic+0x2cc>)
 8000610:	6013      	str	r3, [r2, #0]
				segment2Counter = counter_red / DIVISION_NUMBER;
 8000612:	4b13      	ldr	r3, [pc, #76]	; (8000660 <trafficLight_automatic+0x2c4>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a13      	ldr	r2, [pc, #76]	; (8000664 <trafficLight_automatic+0x2c8>)
 8000618:	fb82 1203 	smull	r1, r2, r2, r3
 800061c:	1192      	asrs	r2, r2, #6
 800061e:	17db      	asrs	r3, r3, #31
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	4a13      	ldr	r2, [pc, #76]	; (8000670 <trafficLight_automatic+0x2d4>)
 8000624:	6013      	str	r3, [r2, #0]
				state = AUTO_GREEN1_RED2;
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <trafficLight_automatic+0x2c0>)
 8000628:	2203      	movs	r2, #3
 800062a:	701a      	strb	r2, [r3, #0]


				if(isPedestrian == 1) {
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <trafficLight_automatic+0x2dc>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d10e      	bne.n	8000652 <trafficLight_automatic+0x2b6>
					counter_pedestrian++;
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <trafficLight_automatic+0x2d8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	3301      	adds	r3, #1
 800063a:	4a0e      	ldr	r2, [pc, #56]	; (8000674 <trafficLight_automatic+0x2d8>)
 800063c:	6013      	str	r3, [r2, #0]
					if(counter_pedestrian == PEDESTRIAN_LIGHT_CYCLE) {
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <trafficLight_automatic+0x2d8>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b08      	cmp	r3, #8
 8000644:	d105      	bne.n	8000652 <trafficLight_automatic+0x2b6>
						counter_pedestrian = 0;
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <trafficLight_automatic+0x2d8>)
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
						isPedestrian = 0;
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <trafficLight_automatic+0x2dc>)
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]



			}

			setTimerCounter1(DURATION_1S);
 8000652:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000656:	f000 fc6b 	bl	8000f30 <setTimerCounter1>
		}
		break;
 800065a:	e128      	b.n	80008ae <trafficLight_automatic+0x512>
 800065c:	200001b8 	.word	0x200001b8
 8000660:	20000000 	.word	0x20000000
 8000664:	10624dd3 	.word	0x10624dd3
 8000668:	200001a8 	.word	0x200001a8
 800066c:	20000008 	.word	0x20000008
 8000670:	200001b0 	.word	0x200001b0
 8000674:	200001d8 	.word	0x200001d8
 8000678:	200001ac 	.word	0x200001ac
 800067c:	20000198 	.word	0x20000198
 8000680:	200001bc 	.word	0x200001bc
 8000684:	200001c0 	.word	0x200001c0
 8000688:	200001b4 	.word	0x200001b4
 800068c:	200002b8 	.word	0x200002b8
 8000690:	200001dc 	.word	0x200001dc
 8000694:	20000004 	.word	0x20000004
	case AUTO_GREEN1_RED2:
		displayTrafficLight(GREEN_LIGHT, RED_LIGHT);
 8000698:	2101      	movs	r1, #1
 800069a:	2003      	movs	r0, #3
 800069c:	f000 f92c 	bl	80008f8 <displayTrafficLight>
		if(isPedestrian == 1) displayPedestrianLight(PEDESTRIAN_LIGHT_STOP);
 80006a0:	4b87      	ldr	r3, [pc, #540]	; (80008c0 <trafficLight_automatic+0x524>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d102      	bne.n	80006ae <trafficLight_automatic+0x312>
 80006a8:	2005      	movs	r0, #5
 80006aa:	f000 f9af 	bl	8000a0c <displayPedestrianLight>
		if(isPedestrian == 0) displayPedestrianLight(PEDESTRIAN_LIGHT_OFF);
 80006ae:	4b84      	ldr	r3, [pc, #528]	; (80008c0 <trafficLight_automatic+0x524>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d102      	bne.n	80006bc <trafficLight_automatic+0x320>
 80006b6:	2006      	movs	r0, #6
 80006b8:	f000 f9a8 	bl	8000a0c <displayPedestrianLight>
		if(isInManual == 1){
 80006bc:	4b81      	ldr	r3, [pc, #516]	; (80008c4 <trafficLight_automatic+0x528>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d102      	bne.n	80006ca <trafficLight_automatic+0x32e>
			state = MANUAL_GREEN1_RED2;
 80006c4:	4b80      	ldr	r3, [pc, #512]	; (80008c8 <trafficLight_automatic+0x52c>)
 80006c6:	220d      	movs	r2, #13
 80006c8:	701a      	strb	r2, [r3, #0]
		}
		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 80006ca:	2000      	movs	r0, #0
 80006cc:	f7ff fe32 	bl	8000334 <isPressedAndReleased>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d008      	beq.n	80006e8 <trafficLight_automatic+0x34c>
			state = MANUAL_GREEN1_RED2;
 80006d6:	4b7c      	ldr	r3, [pc, #496]	; (80008c8 <trafficLight_automatic+0x52c>)
 80006d8:	220d      	movs	r2, #13
 80006da:	701a      	strb	r2, [r3, #0]
			isInManual = 1;
 80006dc:	4b79      	ldr	r3, [pc, #484]	; (80008c4 <trafficLight_automatic+0x528>)
 80006de:	2201      	movs	r2, #1
 80006e0:	601a      	str	r2, [r3, #0]
			isInAuto = 0;
 80006e2:	4b7a      	ldr	r3, [pc, #488]	; (80008cc <trafficLight_automatic+0x530>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
		}
		if(isLongPressedAndReleased(BTN_SELECT_INDEX)){
 80006e8:	2000      	movs	r0, #0
 80006ea:	f7ff fe3d 	bl	8000368 <isLongPressedAndReleased>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d014      	beq.n	800071e <trafficLight_automatic+0x382>
			state = CHANGE_MODE_RED;
 80006f4:	4b74      	ldr	r3, [pc, #464]	; (80008c8 <trafficLight_automatic+0x52c>)
 80006f6:	2205      	movs	r2, #5
 80006f8:	701a      	strb	r2, [r3, #0]
			isInChange = 1;
 80006fa:	4b75      	ldr	r3, [pc, #468]	; (80008d0 <trafficLight_automatic+0x534>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	601a      	str	r2, [r3, #0]
			setTimerTriggerLed(DURATION_FOR_4HZ);
 8000700:	20fa      	movs	r0, #250	; 0xfa
 8000702:	f000 fbf9 	bl	8000ef8 <setTimerTriggerLed>
			clearTrafficDisplay();
 8000706:	f000 f963 	bl	80009d0 <clearTrafficDisplay>
			tempCounter = counter_red/DIVISION_NUMBER;
 800070a:	4b72      	ldr	r3, [pc, #456]	; (80008d4 <trafficLight_automatic+0x538>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a72      	ldr	r2, [pc, #456]	; (80008d8 <trafficLight_automatic+0x53c>)
 8000710:	fb82 1203 	smull	r1, r2, r2, r3
 8000714:	1192      	asrs	r2, r2, #6
 8000716:	17db      	asrs	r3, r3, #31
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	4a70      	ldr	r2, [pc, #448]	; (80008dc <trafficLight_automatic+0x540>)
 800071c:	6013      	str	r3, [r2, #0]
		}
		if(isPressedAndReleased(BTN_PED_INDEX)){
 800071e:	2003      	movs	r0, #3
 8000720:	f7ff fe08 	bl	8000334 <isPressedAndReleased>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d002      	beq.n	8000730 <trafficLight_automatic+0x394>
			isPedestrian = 1;
 800072a:	4b65      	ldr	r3, [pc, #404]	; (80008c0 <trafficLight_automatic+0x524>)
 800072c:	2201      	movs	r2, #1
 800072e:	601a      	str	r2, [r3, #0]
		}
		if(countDownTimer1_counter == 1){
 8000730:	4b6b      	ldr	r3, [pc, #428]	; (80008e0 <trafficLight_automatic+0x544>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b01      	cmp	r3, #1
 8000736:	f040 80bc 	bne.w	80008b2 <trafficLight_automatic+0x516>
			segment1Counter --;
 800073a:	4b6a      	ldr	r3, [pc, #424]	; (80008e4 <trafficLight_automatic+0x548>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	3b01      	subs	r3, #1
 8000740:	4a68      	ldr	r2, [pc, #416]	; (80008e4 <trafficLight_automatic+0x548>)
 8000742:	6013      	str	r3, [r2, #0]
			segment2Counter --;
 8000744:	4b68      	ldr	r3, [pc, #416]	; (80008e8 <trafficLight_automatic+0x54c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	3b01      	subs	r3, #1
 800074a:	4a67      	ldr	r2, [pc, #412]	; (80008e8 <trafficLight_automatic+0x54c>)
 800074c:	6013      	str	r3, [r2, #0]
			if (segment1Counter <= 0){
 800074e:	4b65      	ldr	r3, [pc, #404]	; (80008e4 <trafficLight_automatic+0x548>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	dc1f      	bgt.n	8000796 <trafficLight_automatic+0x3fa>
				segment1Counter = counter_yellow / DIVISION_NUMBER;
 8000756:	4b65      	ldr	r3, [pc, #404]	; (80008ec <trafficLight_automatic+0x550>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a5f      	ldr	r2, [pc, #380]	; (80008d8 <trafficLight_automatic+0x53c>)
 800075c:	fb82 1203 	smull	r1, r2, r2, r3
 8000760:	1192      	asrs	r2, r2, #6
 8000762:	17db      	asrs	r3, r3, #31
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	4a5f      	ldr	r2, [pc, #380]	; (80008e4 <trafficLight_automatic+0x548>)
 8000768:	6013      	str	r3, [r2, #0]
				state = AUTO_YELLOW1_RED2;
 800076a:	4b57      	ldr	r3, [pc, #348]	; (80008c8 <trafficLight_automatic+0x52c>)
 800076c:	2204      	movs	r2, #4
 800076e:	701a      	strb	r2, [r3, #0]


				if(isPedestrian == 1) {
 8000770:	4b53      	ldr	r3, [pc, #332]	; (80008c0 <trafficLight_automatic+0x524>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d10e      	bne.n	8000796 <trafficLight_automatic+0x3fa>
					counter_pedestrian++;
 8000778:	4b5d      	ldr	r3, [pc, #372]	; (80008f0 <trafficLight_automatic+0x554>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	4a5c      	ldr	r2, [pc, #368]	; (80008f0 <trafficLight_automatic+0x554>)
 8000780:	6013      	str	r3, [r2, #0]
					if(counter_pedestrian == PEDESTRIAN_LIGHT_CYCLE) {
 8000782:	4b5b      	ldr	r3, [pc, #364]	; (80008f0 <trafficLight_automatic+0x554>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2b08      	cmp	r3, #8
 8000788:	d105      	bne.n	8000796 <trafficLight_automatic+0x3fa>
						counter_pedestrian = 0;
 800078a:	4b59      	ldr	r3, [pc, #356]	; (80008f0 <trafficLight_automatic+0x554>)
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
						isPedestrian = 0;
 8000790:	4b4b      	ldr	r3, [pc, #300]	; (80008c0 <trafficLight_automatic+0x524>)
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]



			}

			setTimerCounter1(DURATION_1S);
 8000796:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800079a:	f000 fbc9 	bl	8000f30 <setTimerCounter1>
		}
		break;
 800079e:	e088      	b.n	80008b2 <trafficLight_automatic+0x516>
	case AUTO_YELLOW1_RED2:
		displayTrafficLight(YELLOW_LIGHT, RED_LIGHT);
 80007a0:	2101      	movs	r1, #1
 80007a2:	2002      	movs	r0, #2
 80007a4:	f000 f8a8 	bl	80008f8 <displayTrafficLight>
		if(isPedestrian == 1) displayPedestrianLight(PEDESTRIAN_LIGHT_STOP);
 80007a8:	4b45      	ldr	r3, [pc, #276]	; (80008c0 <trafficLight_automatic+0x524>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d102      	bne.n	80007b6 <trafficLight_automatic+0x41a>
 80007b0:	2005      	movs	r0, #5
 80007b2:	f000 f92b 	bl	8000a0c <displayPedestrianLight>
		if(isPedestrian == 0) displayPedestrianLight(PEDESTRIAN_LIGHT_OFF);
 80007b6:	4b42      	ldr	r3, [pc, #264]	; (80008c0 <trafficLight_automatic+0x524>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d102      	bne.n	80007c4 <trafficLight_automatic+0x428>
 80007be:	2006      	movs	r0, #6
 80007c0:	f000 f924 	bl	8000a0c <displayPedestrianLight>
		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 80007c4:	2000      	movs	r0, #0
 80007c6:	f7ff fdb5 	bl	8000334 <isPressedAndReleased>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d005      	beq.n	80007dc <trafficLight_automatic+0x440>
			isInManual = 1;
 80007d0:	4b3c      	ldr	r3, [pc, #240]	; (80008c4 <trafficLight_automatic+0x528>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	601a      	str	r2, [r3, #0]
			isInAuto = 0;
 80007d6:	4b3d      	ldr	r3, [pc, #244]	; (80008cc <trafficLight_automatic+0x530>)
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
		}
		if(isLongPressedAndReleased(BTN_SELECT_INDEX)){
 80007dc:	2000      	movs	r0, #0
 80007de:	f7ff fdc3 	bl	8000368 <isLongPressedAndReleased>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d014      	beq.n	8000812 <trafficLight_automatic+0x476>
			state = CHANGE_MODE_RED;
 80007e8:	4b37      	ldr	r3, [pc, #220]	; (80008c8 <trafficLight_automatic+0x52c>)
 80007ea:	2205      	movs	r2, #5
 80007ec:	701a      	strb	r2, [r3, #0]
			isInChange = 1;
 80007ee:	4b38      	ldr	r3, [pc, #224]	; (80008d0 <trafficLight_automatic+0x534>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	601a      	str	r2, [r3, #0]
			setTimerTriggerLed(DURATION_FOR_4HZ);
 80007f4:	20fa      	movs	r0, #250	; 0xfa
 80007f6:	f000 fb7f 	bl	8000ef8 <setTimerTriggerLed>
			clearTrafficDisplay();
 80007fa:	f000 f8e9 	bl	80009d0 <clearTrafficDisplay>
			tempCounter = counter_red/DIVISION_NUMBER;
 80007fe:	4b35      	ldr	r3, [pc, #212]	; (80008d4 <trafficLight_automatic+0x538>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a35      	ldr	r2, [pc, #212]	; (80008d8 <trafficLight_automatic+0x53c>)
 8000804:	fb82 1203 	smull	r1, r2, r2, r3
 8000808:	1192      	asrs	r2, r2, #6
 800080a:	17db      	asrs	r3, r3, #31
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	4a33      	ldr	r2, [pc, #204]	; (80008dc <trafficLight_automatic+0x540>)
 8000810:	6013      	str	r3, [r2, #0]
		}
		if(isPressedAndReleased(BTN_PED_INDEX)){
 8000812:	2003      	movs	r0, #3
 8000814:	f7ff fd8e 	bl	8000334 <isPressedAndReleased>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d002      	beq.n	8000824 <trafficLight_automatic+0x488>
			isPedestrian = 1;
 800081e:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <trafficLight_automatic+0x524>)
 8000820:	2201      	movs	r2, #1
 8000822:	601a      	str	r2, [r3, #0]
		}
		if(countDownTimer1_counter == 1){
 8000824:	4b2e      	ldr	r3, [pc, #184]	; (80008e0 <trafficLight_automatic+0x544>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d144      	bne.n	80008b6 <trafficLight_automatic+0x51a>
			segment1Counter --;
 800082c:	4b2d      	ldr	r3, [pc, #180]	; (80008e4 <trafficLight_automatic+0x548>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	3b01      	subs	r3, #1
 8000832:	4a2c      	ldr	r2, [pc, #176]	; (80008e4 <trafficLight_automatic+0x548>)
 8000834:	6013      	str	r3, [r2, #0]
			segment2Counter --;
 8000836:	4b2c      	ldr	r3, [pc, #176]	; (80008e8 <trafficLight_automatic+0x54c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	3b01      	subs	r3, #1
 800083c:	4a2a      	ldr	r2, [pc, #168]	; (80008e8 <trafficLight_automatic+0x54c>)
 800083e:	6013      	str	r3, [r2, #0]
			if (segment1Counter <= 0){
 8000840:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <trafficLight_automatic+0x548>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	dc29      	bgt.n	800089c <trafficLight_automatic+0x500>
				segment1Counter = counter_red / DIVISION_NUMBER;
 8000848:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <trafficLight_automatic+0x538>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a22      	ldr	r2, [pc, #136]	; (80008d8 <trafficLight_automatic+0x53c>)
 800084e:	fb82 1203 	smull	r1, r2, r2, r3
 8000852:	1192      	asrs	r2, r2, #6
 8000854:	17db      	asrs	r3, r3, #31
 8000856:	1ad3      	subs	r3, r2, r3
 8000858:	4a22      	ldr	r2, [pc, #136]	; (80008e4 <trafficLight_automatic+0x548>)
 800085a:	6013      	str	r3, [r2, #0]
				segment2Counter = counter_green / DIVISION_NUMBER;
 800085c:	4b25      	ldr	r3, [pc, #148]	; (80008f4 <trafficLight_automatic+0x558>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a1d      	ldr	r2, [pc, #116]	; (80008d8 <trafficLight_automatic+0x53c>)
 8000862:	fb82 1203 	smull	r1, r2, r2, r3
 8000866:	1192      	asrs	r2, r2, #6
 8000868:	17db      	asrs	r3, r3, #31
 800086a:	1ad3      	subs	r3, r2, r3
 800086c:	4a1e      	ldr	r2, [pc, #120]	; (80008e8 <trafficLight_automatic+0x54c>)
 800086e:	6013      	str	r3, [r2, #0]
				state = AUTO_RED1_GREEN2;
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <trafficLight_automatic+0x52c>)
 8000872:	2201      	movs	r2, #1
 8000874:	701a      	strb	r2, [r3, #0]


				if(isPedestrian == 1) {
 8000876:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <trafficLight_automatic+0x524>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d10e      	bne.n	800089c <trafficLight_automatic+0x500>
					counter_pedestrian++;
 800087e:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <trafficLight_automatic+0x554>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	3301      	adds	r3, #1
 8000884:	4a1a      	ldr	r2, [pc, #104]	; (80008f0 <trafficLight_automatic+0x554>)
 8000886:	6013      	str	r3, [r2, #0]
					if(counter_pedestrian == PEDESTRIAN_LIGHT_CYCLE) {
 8000888:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <trafficLight_automatic+0x554>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b08      	cmp	r3, #8
 800088e:	d105      	bne.n	800089c <trafficLight_automatic+0x500>
						counter_pedestrian = 0;
 8000890:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <trafficLight_automatic+0x554>)
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
						isPedestrian = 0;
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <trafficLight_automatic+0x524>)
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]



			}

			setTimerCounter1(DURATION_1S);
 800089c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a0:	f000 fb46 	bl	8000f30 <setTimerCounter1>
		}

		break;
 80008a4:	e007      	b.n	80008b6 <trafficLight_automatic+0x51a>
	default:
		break;
 80008a6:	bf00      	nop
 80008a8:	e006      	b.n	80008b8 <trafficLight_automatic+0x51c>
		break;
 80008aa:	bf00      	nop
 80008ac:	e004      	b.n	80008b8 <trafficLight_automatic+0x51c>
		break;
 80008ae:	bf00      	nop
 80008b0:	e002      	b.n	80008b8 <trafficLight_automatic+0x51c>
		break;
 80008b2:	bf00      	nop
 80008b4:	e000      	b.n	80008b8 <trafficLight_automatic+0x51c>
		break;
 80008b6:	bf00      	nop
	}
}
 80008b8:	bf00      	nop
 80008ba:	3704      	adds	r7, #4
 80008bc:	46bd      	mov	sp, r7
 80008be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008c0:	200001ac 	.word	0x200001ac
 80008c4:	20000198 	.word	0x20000198
 80008c8:	200001b8 	.word	0x200001b8
 80008cc:	200001bc 	.word	0x200001bc
 80008d0:	200001c0 	.word	0x200001c0
 80008d4:	20000000 	.word	0x20000000
 80008d8:	10624dd3 	.word	0x10624dd3
 80008dc:	200001b4 	.word	0x200001b4
 80008e0:	200002b8 	.word	0x200002b8
 80008e4:	200001a8 	.word	0x200001a8
 80008e8:	200001b0 	.word	0x200001b0
 80008ec:	20000004 	.word	0x20000004
 80008f0:	200001d8 	.word	0x200001d8
 80008f4:	20000008 	.word	0x20000008

080008f8 <displayTrafficLight>:

#include "led_segment_control.h"
#include "main.h"
#include "global.h"
#include "software_timer.h"
void displayTrafficLight(int light1, int light2){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
	switch(light1){
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b03      	cmp	r3, #3
 8000906:	d021      	beq.n	800094c <displayTrafficLight+0x54>
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b03      	cmp	r3, #3
 800090c:	dc2a      	bgt.n	8000964 <displayTrafficLight+0x6c>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d003      	beq.n	800091c <displayTrafficLight+0x24>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b02      	cmp	r3, #2
 8000918:	d00c      	beq.n	8000934 <displayTrafficLight+0x3c>
 800091a:	e023      	b.n	8000964 <displayTrafficLight+0x6c>
	case RED_LIGHT:
		HAL_GPIO_WritePin(D2_RED_LED1_GPIO_Port, D2_RED_LED1_Pin, GPIO_PIN_SET);
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000922:	4829      	ldr	r0, [pc, #164]	; (80009c8 <displayTrafficLight+0xd0>)
 8000924:	f001 f81f 	bl	8001966 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GREEN_LED1_GPIO_Port, D3_GREEN_LED1_Pin, GPIO_PIN_RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	2108      	movs	r1, #8
 800092c:	4827      	ldr	r0, [pc, #156]	; (80009cc <displayTrafficLight+0xd4>)
 800092e:	f001 f81a 	bl	8001966 <HAL_GPIO_WritePin>
		break;
 8000932:	e017      	b.n	8000964 <displayTrafficLight+0x6c>
	case YELLOW_LIGHT:
		HAL_GPIO_WritePin(D2_RED_LED1_GPIO_Port, D2_RED_LED1_Pin, GPIO_PIN_SET);
 8000934:	2201      	movs	r2, #1
 8000936:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093a:	4823      	ldr	r0, [pc, #140]	; (80009c8 <displayTrafficLight+0xd0>)
 800093c:	f001 f813 	bl	8001966 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GREEN_LED1_GPIO_Port, D3_GREEN_LED1_Pin, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	2108      	movs	r1, #8
 8000944:	4821      	ldr	r0, [pc, #132]	; (80009cc <displayTrafficLight+0xd4>)
 8000946:	f001 f80e 	bl	8001966 <HAL_GPIO_WritePin>
		break;
 800094a:	e00b      	b.n	8000964 <displayTrafficLight+0x6c>
	case GREEN_LIGHT:
		HAL_GPIO_WritePin(D2_RED_LED1_GPIO_Port, D2_RED_LED1_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000952:	481d      	ldr	r0, [pc, #116]	; (80009c8 <displayTrafficLight+0xd0>)
 8000954:	f001 f807 	bl	8001966 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GREEN_LED1_GPIO_Port, D3_GREEN_LED1_Pin, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2108      	movs	r1, #8
 800095c:	481b      	ldr	r0, [pc, #108]	; (80009cc <displayTrafficLight+0xd4>)
 800095e:	f001 f802 	bl	8001966 <HAL_GPIO_WritePin>
		break;
 8000962:	bf00      	nop
	}
	switch(light2){
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	2b03      	cmp	r3, #3
 8000968:	d01f      	beq.n	80009aa <displayTrafficLight+0xb2>
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	2b03      	cmp	r3, #3
 800096e:	dc27      	bgt.n	80009c0 <displayTrafficLight+0xc8>
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d003      	beq.n	800097e <displayTrafficLight+0x86>
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	2b02      	cmp	r3, #2
 800097a:	d00b      	beq.n	8000994 <displayTrafficLight+0x9c>
	case GREEN_LIGHT:
		HAL_GPIO_WritePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin, GPIO_PIN_SET);
		break;
	}
}
 800097c:	e020      	b.n	80009c0 <displayTrafficLight+0xc8>
		HAL_GPIO_WritePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin, GPIO_PIN_SET);
 800097e:	2201      	movs	r2, #1
 8000980:	2120      	movs	r1, #32
 8000982:	4812      	ldr	r0, [pc, #72]	; (80009cc <displayTrafficLight+0xd4>)
 8000984:	f000 ffef 	bl	8001966 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2110      	movs	r1, #16
 800098c:	480f      	ldr	r0, [pc, #60]	; (80009cc <displayTrafficLight+0xd4>)
 800098e:	f000 ffea 	bl	8001966 <HAL_GPIO_WritePin>
		break;
 8000992:	e015      	b.n	80009c0 <displayTrafficLight+0xc8>
		HAL_GPIO_WritePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin, GPIO_PIN_SET);
 8000994:	2201      	movs	r2, #1
 8000996:	2120      	movs	r1, #32
 8000998:	480c      	ldr	r0, [pc, #48]	; (80009cc <displayTrafficLight+0xd4>)
 800099a:	f000 ffe4 	bl	8001966 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin, GPIO_PIN_SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	2110      	movs	r1, #16
 80009a2:	480a      	ldr	r0, [pc, #40]	; (80009cc <displayTrafficLight+0xd4>)
 80009a4:	f000 ffdf 	bl	8001966 <HAL_GPIO_WritePin>
		break;
 80009a8:	e00a      	b.n	80009c0 <displayTrafficLight+0xc8>
		HAL_GPIO_WritePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2120      	movs	r1, #32
 80009ae:	4807      	ldr	r0, [pc, #28]	; (80009cc <displayTrafficLight+0xd4>)
 80009b0:	f000 ffd9 	bl	8001966 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin, GPIO_PIN_SET);
 80009b4:	2201      	movs	r2, #1
 80009b6:	2110      	movs	r1, #16
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <displayTrafficLight+0xd4>)
 80009ba:	f000 ffd4 	bl	8001966 <HAL_GPIO_WritePin>
		break;
 80009be:	bf00      	nop
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40010800 	.word	0x40010800
 80009cc:	40010c00 	.word	0x40010c00

080009d0 <clearTrafficDisplay>:

void clearTrafficDisplay(){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_RED_LED1_GPIO_Port, D2_RED_LED1_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009da:	480a      	ldr	r0, [pc, #40]	; (8000a04 <clearTrafficDisplay+0x34>)
 80009dc:	f000 ffc3 	bl	8001966 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GREEN_LED1_GPIO_Port, D3_GREEN_LED1_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2108      	movs	r1, #8
 80009e4:	4808      	ldr	r0, [pc, #32]	; (8000a08 <clearTrafficDisplay+0x38>)
 80009e6:	f000 ffbe 	bl	8001966 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D4_RED_LED_2_GPIO_Port, D4_RED_LED_2_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2120      	movs	r1, #32
 80009ee:	4806      	ldr	r0, [pc, #24]	; (8000a08 <clearTrafficDisplay+0x38>)
 80009f0:	f000 ffb9 	bl	8001966 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GREEN_LED2_GPIO_Port, D5_GREEN_LED2_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2110      	movs	r1, #16
 80009f8:	4803      	ldr	r0, [pc, #12]	; (8000a08 <clearTrafficDisplay+0x38>)
 80009fa:	f000 ffb4 	bl	8001966 <HAL_GPIO_WritePin>
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40010800 	.word	0x40010800
 8000a08:	40010c00 	.word	0x40010c00

08000a0c <displayPedestrianLight>:

void displayPedestrianLight(int status){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	switch(status){
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b06      	cmp	r3, #6
 8000a18:	d023      	beq.n	8000a62 <displayPedestrianLight+0x56>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b06      	cmp	r3, #6
 8000a1e:	dc2c      	bgt.n	8000a7a <displayPedestrianLight+0x6e>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	d003      	beq.n	8000a2e <displayPedestrianLight+0x22>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b05      	cmp	r3, #5
 8000a2a:	d00d      	beq.n	8000a48 <displayPedestrianLight+0x3c>
 8000a2c:	e025      	b.n	8000a7a <displayPedestrianLight+0x6e>
	case PEDESTRIAN_LIGHT_GO:
		HAL_GPIO_WritePin(D6_PED_LIGHT1_GPIO_Port, D6_PED_LIGHT1_Pin, GPIO_PIN_SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a34:	4819      	ldr	r0, [pc, #100]	; (8000a9c <displayPedestrianLight+0x90>)
 8000a36:	f000 ff96 	bl	8001966 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_PEDLIGHT2_GPIO_Port, D7_PEDLIGHT2_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a40:	4817      	ldr	r0, [pc, #92]	; (8000aa0 <displayPedestrianLight+0x94>)
 8000a42:	f000 ff90 	bl	8001966 <HAL_GPIO_WritePin>
		break;
 8000a46:	e025      	b.n	8000a94 <displayPedestrianLight+0x88>
	case PEDESTRIAN_LIGHT_STOP:
		HAL_GPIO_WritePin(D6_PED_LIGHT1_GPIO_Port, D6_PED_LIGHT1_Pin, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a4e:	4813      	ldr	r0, [pc, #76]	; (8000a9c <displayPedestrianLight+0x90>)
 8000a50:	f000 ff89 	bl	8001966 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_PEDLIGHT2_GPIO_Port, D7_PEDLIGHT2_Pin, GPIO_PIN_SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a5a:	4811      	ldr	r0, [pc, #68]	; (8000aa0 <displayPedestrianLight+0x94>)
 8000a5c:	f000 ff83 	bl	8001966 <HAL_GPIO_WritePin>
		break;
 8000a60:	e018      	b.n	8000a94 <displayPedestrianLight+0x88>
	case PEDESTRIAN_LIGHT_OFF:
		HAL_GPIO_WritePin(D6_PED_LIGHT1_GPIO_Port, D6_PED_LIGHT1_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a68:	480c      	ldr	r0, [pc, #48]	; (8000a9c <displayPedestrianLight+0x90>)
 8000a6a:	f000 ff7c 	bl	8001966 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_PEDLIGHT2_GPIO_Port, D7_PEDLIGHT2_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a74:	480a      	ldr	r0, [pc, #40]	; (8000aa0 <displayPedestrianLight+0x94>)
 8000a76:	f000 ff76 	bl	8001966 <HAL_GPIO_WritePin>
	default:
		HAL_GPIO_WritePin(D6_PED_LIGHT1_GPIO_Port, D6_PED_LIGHT1_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a80:	4806      	ldr	r0, [pc, #24]	; (8000a9c <displayPedestrianLight+0x90>)
 8000a82:	f000 ff70 	bl	8001966 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_PEDLIGHT2_GPIO_Port, D7_PEDLIGHT2_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <displayPedestrianLight+0x94>)
 8000a8e:	f000 ff6a 	bl	8001966 <HAL_GPIO_WritePin>
		break;
 8000a92:	bf00      	nop
	}
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40010c00 	.word	0x40010c00
 8000aa0:	40010800 	.word	0x40010800

08000aa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aa6:	b091      	sub	sp, #68	; 0x44
 8000aa8:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aaa:	f000 fc51 	bl	8001350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aae:	f000 f831 	bl	8000b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab2:	f000 f941 	bl	8000d38 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ab6:	f000 f86f 	bl	8000b98 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000aba:	f000 f8b9 	bl	8000c30 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000abe:	f000 f911 	bl	8000ce4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000ac2:	4810      	ldr	r0, [pc, #64]	; (8000b04 <main+0x60>)
 8000ac4:	f001 fbd2 	bl	800226c <HAL_TIM_Base_Start_IT>
  buzzer_init(TIM3);
 8000ac8:	480f      	ldr	r0, [pc, #60]	; (8000b08 <main+0x64>)
 8000aca:	f000 f9b5 	bl	8000e38 <buzzer_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //setTimerTraffic1(10);
  state = IDLE;
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <main+0x68>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  trafficLight_automatic();
 8000ad4:	f7ff fc62 	bl	800039c <trafficLight_automatic>
	  buzzer_sound(htim3, 10);
 8000ad8:	4e0d      	ldr	r6, [pc, #52]	; (8000b10 <main+0x6c>)
 8000ada:	230a      	movs	r3, #10
 8000adc:	930e      	str	r3, [sp, #56]	; 0x38
 8000ade:	466d      	mov	r5, sp
 8000ae0:	f106 0410 	add.w	r4, r6, #16
 8000ae4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ae6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ae8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000aec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000af0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000af4:	e885 0003 	stmia.w	r5, {r0, r1}
 8000af8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000afc:	f000 f9ac 	bl	8000e58 <buzzer_sound>
	  trafficLight_automatic();
 8000b00:	e7e8      	b.n	8000ad4 <main+0x30>
 8000b02:	bf00      	nop
 8000b04:	20000224 	.word	0x20000224
 8000b08:	40000400 	.word	0x40000400
 8000b0c:	200001b8 	.word	0x200001b8
 8000b10:	200001dc 	.word	0x200001dc

08000b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b090      	sub	sp, #64	; 0x40
 8000b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1a:	f107 0318 	add.w	r3, r7, #24
 8000b1e:	2228      	movs	r2, #40	; 0x28
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f002 fae2 	bl	80030ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b3e:	2310      	movs	r3, #16
 8000b40:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b42:	2302      	movs	r3, #2
 8000b44:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b46:	2300      	movs	r3, #0
 8000b48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000b4a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b50:	f107 0318 	add.w	r3, r7, #24
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 ff1f 	bl	8001998 <HAL_RCC_OscConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000b60:	f000 f964 	bl	8000e2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b64:	230f      	movs	r3, #15
 8000b66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	2102      	movs	r1, #2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 f98a 	bl	8001e98 <HAL_RCC_ClockConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000b8a:	f000 f94f 	bl	8000e2c <Error_Handler>
  }
}
 8000b8e:	bf00      	nop
 8000b90:	3740      	adds	r7, #64	; 0x40
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9e:	f107 0308 	add.w	r3, r7, #8
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bac:	463b      	mov	r3, r7
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bb4:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <MX_TIM2_Init+0x94>)
 8000bb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <MX_TIM2_Init+0x94>)
 8000bbe:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000bc2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc4:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <MX_TIM2_Init+0x94>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <MX_TIM2_Init+0x94>)
 8000bcc:	224f      	movs	r2, #79	; 0x4f
 8000bce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <MX_TIM2_Init+0x94>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <MX_TIM2_Init+0x94>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bdc:	4813      	ldr	r0, [pc, #76]	; (8000c2c <MX_TIM2_Init+0x94>)
 8000bde:	f001 faf5 	bl	80021cc <HAL_TIM_Base_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000be8:	f000 f920 	bl	8000e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bf2:	f107 0308 	add.w	r3, r7, #8
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	480c      	ldr	r0, [pc, #48]	; (8000c2c <MX_TIM2_Init+0x94>)
 8000bfa:	f001 fd9f 	bl	800273c <HAL_TIM_ConfigClockSource>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c04:	f000 f912 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c10:	463b      	mov	r3, r7
 8000c12:	4619      	mov	r1, r3
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_TIM2_Init+0x94>)
 8000c16:	f002 f8f9 	bl	8002e0c <HAL_TIMEx_MasterConfigSynchronization>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c20:	f000 f904 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c24:	bf00      	nop
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000224 	.word	0x20000224

08000c30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c36:	f107 0320 	add.w	r3, r7, #32
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]
 8000c4e:	615a      	str	r2, [r3, #20]
 8000c50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c52:	4b22      	ldr	r3, [pc, #136]	; (8000cdc <MX_TIM3_Init+0xac>)
 8000c54:	4a22      	ldr	r2, [pc, #136]	; (8000ce0 <MX_TIM3_Init+0xb0>)
 8000c56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000c58:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <MX_TIM3_Init+0xac>)
 8000c5a:	223f      	movs	r2, #63	; 0x3f
 8000c5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5e:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <MX_TIM3_Init+0xac>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000c64:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <MX_TIM3_Init+0xac>)
 8000c66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <MX_TIM3_Init+0xac>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c72:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <MX_TIM3_Init+0xac>)
 8000c74:	2280      	movs	r2, #128	; 0x80
 8000c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c78:	4818      	ldr	r0, [pc, #96]	; (8000cdc <MX_TIM3_Init+0xac>)
 8000c7a:	f001 fb49 	bl	8002310 <HAL_TIM_PWM_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000c84:	f000 f8d2 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c90:	f107 0320 	add.w	r3, r7, #32
 8000c94:	4619      	mov	r1, r3
 8000c96:	4811      	ldr	r0, [pc, #68]	; (8000cdc <MX_TIM3_Init+0xac>)
 8000c98:	f002 f8b8 	bl	8002e0c <HAL_TIMEx_MasterConfigSynchronization>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000ca2:	f000 f8c3 	bl	8000e2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ca6:	2360      	movs	r3, #96	; 0x60
 8000ca8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4807      	ldr	r0, [pc, #28]	; (8000cdc <MX_TIM3_Init+0xac>)
 8000cbe:	f001 fc7f 	bl	80025c0 <HAL_TIM_PWM_ConfigChannel>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000cc8:	f000 f8b0 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ccc:	4803      	ldr	r0, [pc, #12]	; (8000cdc <MX_TIM3_Init+0xac>)
 8000cce:	f000 fa65 	bl	800119c <HAL_TIM_MspPostInit>

}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	; 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200001dc 	.word	0x200001dc
 8000ce0:	40000400 	.word	0x40000400

08000ce4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <MX_USART2_UART_Init+0x50>)
 8000cec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000cf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000d1c:	f002 f8e6 	bl	8002eec <HAL_UART_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d26:	f000 f881 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2000026c 	.word	0x2000026c
 8000d34:	40004400 	.word	0x40004400

08000d38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	4b2e      	ldr	r3, [pc, #184]	; (8000e08 <MX_GPIO_Init+0xd0>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a2d      	ldr	r2, [pc, #180]	; (8000e08 <MX_GPIO_Init+0xd0>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b2b      	ldr	r3, [pc, #172]	; (8000e08 <MX_GPIO_Init+0xd0>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d64:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <MX_GPIO_Init+0xd0>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4a27      	ldr	r2, [pc, #156]	; (8000e08 <MX_GPIO_Init+0xd0>)
 8000d6a:	f043 0308 	orr.w	r3, r3, #8
 8000d6e:	6193      	str	r3, [r2, #24]
 8000d70:	4b25      	ldr	r3, [pc, #148]	; (8000e08 <MX_GPIO_Init+0xd0>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f003 0308 	and.w	r3, r3, #8
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PED_LIGHT1_Pin|D3_GREEN_LED1_Pin|D5_GREEN_LED2_Pin|D4_RED_LED_2_Pin, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000d82:	4822      	ldr	r0, [pc, #136]	; (8000e0c <MX_GPIO_Init+0xd4>)
 8000d84:	f000 fdef 	bl	8001966 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_PEDLIGHT2_Pin|D2_RED_LED1_Pin, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000d8e:	4820      	ldr	r0, [pc, #128]	; (8000e10 <MX_GPIO_Init+0xd8>)
 8000d90:	f000 fde9 	bl	8001966 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_BTN_PED_Pin A1_BTN_SELECT_Pin A2_BTN_MODIFY_Pin */
  GPIO_InitStruct.Pin = A0_BTN_PED_Pin|A1_BTN_SELECT_Pin|A2_BTN_MODIFY_Pin;
 8000d94:	2313      	movs	r3, #19
 8000d96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	f107 0308 	add.w	r3, r7, #8
 8000da4:	4619      	mov	r1, r3
 8000da6:	481a      	ldr	r0, [pc, #104]	; (8000e10 <MX_GPIO_Init+0xd8>)
 8000da8:	f000 fc42 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_BTN_SET_Pin */
  GPIO_InitStruct.Pin = A3_BTN_SET_Pin;
 8000dac:	2301      	movs	r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_BTN_SET_GPIO_Port, &GPIO_InitStruct);
 8000db8:	f107 0308 	add.w	r3, r7, #8
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4813      	ldr	r0, [pc, #76]	; (8000e0c <MX_GPIO_Init+0xd4>)
 8000dc0:	f000 fc36 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PED_LIGHT1_Pin D3_GREEN_LED1_Pin D5_GREEN_LED2_Pin D4_RED_LED_2_Pin */
  GPIO_InitStruct.Pin = D6_PED_LIGHT1_Pin|D3_GREEN_LED1_Pin|D5_GREEN_LED2_Pin|D4_RED_LED_2_Pin;
 8000dc4:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000dc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd6:	f107 0308 	add.w	r3, r7, #8
 8000dda:	4619      	mov	r1, r3
 8000ddc:	480b      	ldr	r0, [pc, #44]	; (8000e0c <MX_GPIO_Init+0xd4>)
 8000dde:	f000 fc27 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_PEDLIGHT2_Pin D2_RED_LED1_Pin */
  GPIO_InitStruct.Pin = D7_PEDLIGHT2_Pin|D2_RED_LED1_Pin;
 8000de2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000de6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de8:	2301      	movs	r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2302      	movs	r3, #2
 8000df2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df4:	f107 0308 	add.w	r3, r7, #8
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <MX_GPIO_Init+0xd8>)
 8000dfc:	f000 fc18 	bl	8001630 <HAL_GPIO_Init>

}
 8000e00:	bf00      	nop
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40010c00 	.word	0x40010c00
 8000e10:	40010800 	.word	0x40010800

08000e14 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	readKeyInput();
 8000e1c:	f7ff f996 	bl	800014c <readKeyInput>
	timer_run();
 8000e20:	f000 f8a2 	bl	8000f68 <timer_run>
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
}
 8000e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <Error_Handler+0x8>
	...

08000e38 <buzzer_init>:
int signal = 1;
uint8_t idx = 0;
uint16_t beep[3] = {1,1,1};
uint32_t scale = 0;

void buzzer_init(TIM_TypeDef *tim){
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	scale = tim->PSC;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e44:	4a03      	ldr	r2, [pc, #12]	; (8000e54 <buzzer_init+0x1c>)
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000174 	.word	0x20000174

08000e58 <buzzer_sound>:
		NOTE_B5,NOTE_B5,0,NOTE_B5, //4
		NOTE_CS6,NOTE_D6,0, NOTE_G5, //4
		NOTE_FS5, NOTE_F5, NOTE_D6 , NOTE_AS5, NOTE_B5, NOTE_B5//6
};

void buzzer_sound(TIM_HandleTypeDef htim ,int volume){
 8000e58:	b084      	sub	sp, #16
 8000e5a:	b490      	push	{r4, r7}
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	f107 0408 	add.w	r4, r7, #8
 8000e62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// PSC + 1 => Hz - 31.5
	//TIM_CCxChannelCmd(&htim3, TIM_CHANNEL_1, TIM_CCx_ENABLE);
	__HAL_TIM_SET_COMPARE(&htim,TIM_CHANNEL_1,volume);
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000e6a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->PSC = 64000/dio[idx%(sizeof(dio)/4)];// melody[i%3];
 8000e6c:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <buzzer_sound+0x58>)
 8000e6e:	781a      	ldrb	r2, [r3, #0]
 8000e70:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <buzzer_sound+0x5c>)
 8000e72:	fba3 1302 	umull	r1, r3, r3, r2
 8000e76:	0919      	lsrs	r1, r3, #4
 8000e78:	460b      	mov	r3, r1
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	440b      	add	r3, r1
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <buzzer_sound+0x60>)
 8000e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e8c:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000e90:	fb92 f2f3 	sdiv	r2, r2, r3
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <buzzer_sound+0x64>)
 8000e96:	629a      	str	r2, [r3, #40]	; 0x28
	idx++;
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <buzzer_sound+0x58>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <buzzer_sound+0x58>)
 8000ea2:	701a      	strb	r2, [r3, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc90      	pop	{r4, r7}
 8000eaa:	b004      	add	sp, #16
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000170 	.word	0x20000170
 8000eb4:	38e38e39 	.word	0x38e38e39
 8000eb8:	2000000c 	.word	0x2000000c
 8000ebc:	40000400 	.word	0x40000400

08000ec0 <setTimerTraffic1>:
int modifyTimer_counter;
int countDownTimer1_counter;
int countDownTimer2_counter;
int scanFreqTimer_counter;

void setTimerTraffic1(int duration){
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	trafficTimer1_counter = duration/TIMER_CYCLE;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a08      	ldr	r2, [pc, #32]	; (8000eec <setTimerTraffic1+0x2c>)
 8000ecc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ed0:	1092      	asrs	r2, r2, #2
 8000ed2:	17db      	asrs	r3, r3, #31
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <setTimerTraffic1+0x30>)
 8000ed8:	6013      	str	r3, [r2, #0]
	trafficTimer1_flag = 0;
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <setTimerTraffic1+0x34>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	66666667 	.word	0x66666667
 8000ef0:	200002d0 	.word	0x200002d0
 8000ef4:	200002e8 	.word	0x200002e8

08000ef8 <setTimerTriggerLed>:
void setTimerModify(int duration){
	modifyTimer_counter = duration/TIMER_CYCLE;
	modifyTimer_flag = 0;
}

void setTimerTriggerLed(int duration){
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	timerLed_counter = duration/TIMER_CYCLE;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a08      	ldr	r2, [pc, #32]	; (8000f24 <setTimerTriggerLed+0x2c>)
 8000f04:	fb82 1203 	smull	r1, r2, r2, r3
 8000f08:	1092      	asrs	r2, r2, #2
 8000f0a:	17db      	asrs	r3, r3, #31
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	4a06      	ldr	r2, [pc, #24]	; (8000f28 <setTimerTriggerLed+0x30>)
 8000f10:	6013      	str	r3, [r2, #0]
	timerLed_flag = 0;
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <setTimerTriggerLed+0x34>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	66666667 	.word	0x66666667
 8000f28:	200002bc 	.word	0x200002bc
 8000f2c:	200002c8 	.word	0x200002c8

08000f30 <setTimerCounter1>:

void setTimerCounter1(int duration){
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	countDownTimer1_counter = duration/TIMER_CYCLE;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a08      	ldr	r2, [pc, #32]	; (8000f5c <setTimerCounter1+0x2c>)
 8000f3c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f40:	1092      	asrs	r2, r2, #2
 8000f42:	17db      	asrs	r3, r3, #31
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <setTimerCounter1+0x30>)
 8000f48:	6013      	str	r3, [r2, #0]
	countDownTimer1_flag = 0;
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <setTimerCounter1+0x34>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	66666667 	.word	0x66666667
 8000f60:	200002b8 	.word	0x200002b8
 8000f64:	200002b4 	.word	0x200002b4

08000f68 <timer_run>:
void setTimerScanFreq(int duration){
	scanFreqTimer_counter = duration/TIMER_CYCLE;
	scanFreqTimer_flag = 0;
}

void timer_run(){
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
	if(trafficTimer1_counter >= 0){
 8000f6c:	4b41      	ldr	r3, [pc, #260]	; (8001074 <timer_run+0x10c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db0b      	blt.n	8000f8c <timer_run+0x24>
		trafficTimer1_counter --;
 8000f74:	4b3f      	ldr	r3, [pc, #252]	; (8001074 <timer_run+0x10c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	4a3e      	ldr	r2, [pc, #248]	; (8001074 <timer_run+0x10c>)
 8000f7c:	6013      	str	r3, [r2, #0]
		if(trafficTimer1_counter == 0) trafficTimer1_flag = 1;
 8000f7e:	4b3d      	ldr	r3, [pc, #244]	; (8001074 <timer_run+0x10c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d102      	bne.n	8000f8c <timer_run+0x24>
 8000f86:	4b3c      	ldr	r3, [pc, #240]	; (8001078 <timer_run+0x110>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]
	}
	if(trafficTimer2_counter >= 0){
 8000f8c:	4b3b      	ldr	r3, [pc, #236]	; (800107c <timer_run+0x114>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db0b      	blt.n	8000fac <timer_run+0x44>
		trafficTimer2_counter --;
 8000f94:	4b39      	ldr	r3, [pc, #228]	; (800107c <timer_run+0x114>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	4a38      	ldr	r2, [pc, #224]	; (800107c <timer_run+0x114>)
 8000f9c:	6013      	str	r3, [r2, #0]
		if(trafficTimer2_counter == 0) trafficTimer2_flag = 1;
 8000f9e:	4b37      	ldr	r3, [pc, #220]	; (800107c <timer_run+0x114>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d102      	bne.n	8000fac <timer_run+0x44>
 8000fa6:	4b36      	ldr	r3, [pc, #216]	; (8001080 <timer_run+0x118>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	601a      	str	r2, [r3, #0]
	}
	if(waitTimer_counter >= 0){
 8000fac:	4b35      	ldr	r3, [pc, #212]	; (8001084 <timer_run+0x11c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	db0b      	blt.n	8000fcc <timer_run+0x64>
		waitTimer_counter --;
 8000fb4:	4b33      	ldr	r3, [pc, #204]	; (8001084 <timer_run+0x11c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	4a32      	ldr	r2, [pc, #200]	; (8001084 <timer_run+0x11c>)
 8000fbc:	6013      	str	r3, [r2, #0]
		if(waitTimer_counter == 0) waitTimer_flag = 1;
 8000fbe:	4b31      	ldr	r3, [pc, #196]	; (8001084 <timer_run+0x11c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d102      	bne.n	8000fcc <timer_run+0x64>
 8000fc6:	4b30      	ldr	r3, [pc, #192]	; (8001088 <timer_run+0x120>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	601a      	str	r2, [r3, #0]
	}
	if(modifyTimer_counter >= 0){
 8000fcc:	4b2f      	ldr	r3, [pc, #188]	; (800108c <timer_run+0x124>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	db0b      	blt.n	8000fec <timer_run+0x84>
		modifyTimer_counter --;
 8000fd4:	4b2d      	ldr	r3, [pc, #180]	; (800108c <timer_run+0x124>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	4a2c      	ldr	r2, [pc, #176]	; (800108c <timer_run+0x124>)
 8000fdc:	6013      	str	r3, [r2, #0]
		if(modifyTimer_counter == 0) modifyTimer_flag = 1;
 8000fde:	4b2b      	ldr	r3, [pc, #172]	; (800108c <timer_run+0x124>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d102      	bne.n	8000fec <timer_run+0x84>
 8000fe6:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <timer_run+0x128>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	601a      	str	r2, [r3, #0]
	}
	if(timerLed_counter >= 0){
 8000fec:	4b29      	ldr	r3, [pc, #164]	; (8001094 <timer_run+0x12c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	db0b      	blt.n	800100c <timer_run+0xa4>
		timerLed_counter --;
 8000ff4:	4b27      	ldr	r3, [pc, #156]	; (8001094 <timer_run+0x12c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	4a26      	ldr	r2, [pc, #152]	; (8001094 <timer_run+0x12c>)
 8000ffc:	6013      	str	r3, [r2, #0]
		if(timerLed_counter == 0) timerLed_flag = 1;
 8000ffe:	4b25      	ldr	r3, [pc, #148]	; (8001094 <timer_run+0x12c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d102      	bne.n	800100c <timer_run+0xa4>
 8001006:	4b24      	ldr	r3, [pc, #144]	; (8001098 <timer_run+0x130>)
 8001008:	2201      	movs	r2, #1
 800100a:	601a      	str	r2, [r3, #0]
	}
	if(countDownTimer1_counter >= 0){
 800100c:	4b23      	ldr	r3, [pc, #140]	; (800109c <timer_run+0x134>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0b      	blt.n	800102c <timer_run+0xc4>
		countDownTimer1_counter --;
 8001014:	4b21      	ldr	r3, [pc, #132]	; (800109c <timer_run+0x134>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3b01      	subs	r3, #1
 800101a:	4a20      	ldr	r2, [pc, #128]	; (800109c <timer_run+0x134>)
 800101c:	6013      	str	r3, [r2, #0]
		if(countDownTimer1_counter == 0) countDownTimer1_flag = 1;
 800101e:	4b1f      	ldr	r3, [pc, #124]	; (800109c <timer_run+0x134>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d102      	bne.n	800102c <timer_run+0xc4>
 8001026:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <timer_run+0x138>)
 8001028:	2201      	movs	r2, #1
 800102a:	601a      	str	r2, [r3, #0]
	}
	if(countDownTimer2_counter >= 0){
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <timer_run+0x13c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0b      	blt.n	800104c <timer_run+0xe4>
		countDownTimer2_counter --;
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <timer_run+0x13c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	3b01      	subs	r3, #1
 800103a:	4a1a      	ldr	r2, [pc, #104]	; (80010a4 <timer_run+0x13c>)
 800103c:	6013      	str	r3, [r2, #0]
		if(countDownTimer2_counter == 0) countDownTimer2_flag = 1;
 800103e:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <timer_run+0x13c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d102      	bne.n	800104c <timer_run+0xe4>
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <timer_run+0x140>)
 8001048:	2201      	movs	r2, #1
 800104a:	601a      	str	r2, [r3, #0]
	}
	if(scanFreqTimer_counter >= 0){
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <timer_run+0x144>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	db0b      	blt.n	800106c <timer_run+0x104>
		scanFreqTimer_counter --;
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <timer_run+0x144>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	3b01      	subs	r3, #1
 800105a:	4a14      	ldr	r2, [pc, #80]	; (80010ac <timer_run+0x144>)
 800105c:	6013      	str	r3, [r2, #0]
		if(scanFreqTimer_counter == 0) scanFreqTimer_flag = 1;
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <timer_run+0x144>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d102      	bne.n	800106c <timer_run+0x104>
 8001066:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <timer_run+0x148>)
 8001068:	2201      	movs	r2, #1
 800106a:	601a      	str	r2, [r3, #0]
	}
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	200002d0 	.word	0x200002d0
 8001078:	200002e8 	.word	0x200002e8
 800107c:	200002c0 	.word	0x200002c0
 8001080:	200002b0 	.word	0x200002b0
 8001084:	200002c4 	.word	0x200002c4
 8001088:	200002e0 	.word	0x200002e0
 800108c:	200002ec 	.word	0x200002ec
 8001090:	200002d4 	.word	0x200002d4
 8001094:	200002bc 	.word	0x200002bc
 8001098:	200002c8 	.word	0x200002c8
 800109c:	200002b8 	.word	0x200002b8
 80010a0:	200002b4 	.word	0x200002b4
 80010a4:	200002d8 	.word	0x200002d8
 80010a8:	200002cc 	.word	0x200002cc
 80010ac:	200002e4 	.word	0x200002e4
 80010b0:	200002dc 	.word	0x200002dc

080010b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <HAL_MspInit+0x5c>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	4a14      	ldr	r2, [pc, #80]	; (8001110 <HAL_MspInit+0x5c>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6193      	str	r3, [r2, #24]
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <HAL_MspInit+0x5c>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <HAL_MspInit+0x5c>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <HAL_MspInit+0x5c>)
 80010d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010dc:	61d3      	str	r3, [r2, #28]
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <HAL_MspInit+0x5c>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <HAL_MspInit+0x60>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	4a04      	ldr	r2, [pc, #16]	; (8001114 <HAL_MspInit+0x60>)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	40021000 	.word	0x40021000
 8001114:	40010000 	.word	0x40010000

08001118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001128:	d113      	bne.n	8001152 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <HAL_TIM_Base_MspInit+0x44>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	4a0b      	ldr	r2, [pc, #44]	; (800115c <HAL_TIM_Base_MspInit+0x44>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	61d3      	str	r3, [r2, #28]
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <HAL_TIM_Base_MspInit+0x44>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	201c      	movs	r0, #28
 8001148:	f000 fa3b 	bl	80015c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800114c:	201c      	movs	r0, #28
 800114e:	f000 fa54 	bl	80015fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40021000 	.word	0x40021000

08001160 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a09      	ldr	r2, [pc, #36]	; (8001194 <HAL_TIM_PWM_MspInit+0x34>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d10b      	bne.n	800118a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <HAL_TIM_PWM_MspInit+0x38>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	4a08      	ldr	r2, [pc, #32]	; (8001198 <HAL_TIM_PWM_MspInit+0x38>)
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	61d3      	str	r3, [r2, #28]
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_TIM_PWM_MspInit+0x38>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	40000400 	.word	0x40000400
 8001198:	40021000 	.word	0x40021000

0800119c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a0f      	ldr	r2, [pc, #60]	; (80011f4 <HAL_TIM_MspPostInit+0x58>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d117      	bne.n	80011ec <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011bc:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <HAL_TIM_MspPostInit+0x5c>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a0d      	ldr	r2, [pc, #52]	; (80011f8 <HAL_TIM_MspPostInit+0x5c>)
 80011c2:	f043 0304 	orr.w	r3, r3, #4
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <HAL_TIM_MspPostInit+0x5c>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011d4:	2340      	movs	r3, #64	; 0x40
 80011d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2302      	movs	r3, #2
 80011de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	4619      	mov	r1, r3
 80011e6:	4805      	ldr	r0, [pc, #20]	; (80011fc <HAL_TIM_MspPostInit+0x60>)
 80011e8:	f000 fa22 	bl	8001630 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011ec:	bf00      	nop
 80011ee:	3720      	adds	r7, #32
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40000400 	.word	0x40000400
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40010800 	.word	0x40010800

08001200 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a1b      	ldr	r2, [pc, #108]	; (8001288 <HAL_UART_MspInit+0x88>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d12f      	bne.n	8001280 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001220:	4b1a      	ldr	r3, [pc, #104]	; (800128c <HAL_UART_MspInit+0x8c>)
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	4a19      	ldr	r2, [pc, #100]	; (800128c <HAL_UART_MspInit+0x8c>)
 8001226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122a:	61d3      	str	r3, [r2, #28]
 800122c:	4b17      	ldr	r3, [pc, #92]	; (800128c <HAL_UART_MspInit+0x8c>)
 800122e:	69db      	ldr	r3, [r3, #28]
 8001230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <HAL_UART_MspInit+0x8c>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	4a13      	ldr	r2, [pc, #76]	; (800128c <HAL_UART_MspInit+0x8c>)
 800123e:	f043 0304 	orr.w	r3, r3, #4
 8001242:	6193      	str	r3, [r2, #24]
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <HAL_UART_MspInit+0x8c>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001250:	2304      	movs	r3, #4
 8001252:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	4619      	mov	r1, r3
 8001262:	480b      	ldr	r0, [pc, #44]	; (8001290 <HAL_UART_MspInit+0x90>)
 8001264:	f000 f9e4 	bl	8001630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001268:	2308      	movs	r3, #8
 800126a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	4619      	mov	r1, r3
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <HAL_UART_MspInit+0x90>)
 800127c:	f000 f9d8 	bl	8001630 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001280:	bf00      	nop
 8001282:	3720      	adds	r7, #32
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40004400 	.word	0x40004400
 800128c:	40021000 	.word	0x40021000
 8001290:	40010800 	.word	0x40010800

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <NMI_Handler+0x4>

0800129a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <HardFault_Handler+0x4>

080012a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <MemManage_Handler+0x4>

080012a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <BusFault_Handler+0x4>

080012ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <UsageFault_Handler+0x4>

080012b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr

080012be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr

080012ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr

080012d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012da:	f000 f87f 	bl	80013dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <TIM2_IRQHandler+0x10>)
 80012ea:	f001 f860 	bl	80023ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000224 	.word	0x20000224

080012f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001306:	490d      	ldr	r1, [pc, #52]	; (800133c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001308:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800130c:	e002      	b.n	8001314 <LoopCopyDataInit>

0800130e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001312:	3304      	adds	r3, #4

08001314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001318:	d3f9      	bcc.n	800130e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800131c:	4c0a      	ldr	r4, [pc, #40]	; (8001348 <LoopFillZerobss+0x22>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001320:	e001      	b.n	8001326 <LoopFillZerobss>

08001322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001324:	3204      	adds	r2, #4

08001326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001328:	d3fb      	bcc.n	8001322 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800132a:	f7ff ffe5 	bl	80012f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800132e:	f001 feb9 	bl	80030a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001332:	f7ff fbb7 	bl	8000aa4 <main>
  bx lr
 8001336:	4770      	bx	lr
  ldr r0, =_sdata
 8001338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800133c:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 8001340:	08003144 	.word	0x08003144
  ldr r2, =_sbss
 8001344:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 8001348:	200002f4 	.word	0x200002f4

0800134c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800134c:	e7fe      	b.n	800134c <ADC1_2_IRQHandler>
	...

08001350 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HAL_Init+0x28>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a07      	ldr	r2, [pc, #28]	; (8001378 <HAL_Init+0x28>)
 800135a:	f043 0310 	orr.w	r3, r3, #16
 800135e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001360:	2003      	movs	r0, #3
 8001362:	f000 f923 	bl	80015ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001366:	200f      	movs	r0, #15
 8001368:	f000 f808 	bl	800137c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800136c:	f7ff fea2 	bl	80010b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40022000 	.word	0x40022000

0800137c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_InitTick+0x54>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_InitTick+0x58>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001392:	fbb3 f3f1 	udiv	r3, r3, r1
 8001396:	fbb2 f3f3 	udiv	r3, r2, r3
 800139a:	4618      	mov	r0, r3
 800139c:	f000 f93b 	bl	8001616 <HAL_SYSTICK_Config>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00e      	b.n	80013c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b0f      	cmp	r3, #15
 80013ae:	d80a      	bhi.n	80013c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b0:	2200      	movs	r2, #0
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f000 f903 	bl	80015c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013bc:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <HAL_InitTick+0x5c>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	e000      	b.n	80013c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	2000012c 	.word	0x2000012c
 80013d4:	20000134 	.word	0x20000134
 80013d8:	20000130 	.word	0x20000130

080013dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <HAL_IncTick+0x1c>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <HAL_IncTick+0x20>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	4a03      	ldr	r2, [pc, #12]	; (80013fc <HAL_IncTick+0x20>)
 80013ee:	6013      	str	r3, [r2, #0]
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	20000134 	.word	0x20000134
 80013fc:	200002f0 	.word	0x200002f0

08001400 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return uwTick;
 8001404:	4b02      	ldr	r3, [pc, #8]	; (8001410 <HAL_GetTick+0x10>)
 8001406:	681b      	ldr	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	200002f0 	.word	0x200002f0

08001414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001430:	4013      	ands	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800143c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001446:	4a04      	ldr	r2, [pc, #16]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	60d3      	str	r3, [r2, #12]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <__NVIC_GetPriorityGrouping+0x18>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	f003 0307 	and.w	r3, r3, #7
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	2b00      	cmp	r3, #0
 8001488:	db0b      	blt.n	80014a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	f003 021f 	and.w	r2, r3, #31
 8001490:	4906      	ldr	r1, [pc, #24]	; (80014ac <__NVIC_EnableIRQ+0x34>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	095b      	lsrs	r3, r3, #5
 8001498:	2001      	movs	r0, #1
 800149a:	fa00 f202 	lsl.w	r2, r0, r2
 800149e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	e000e100 	.word	0xe000e100

080014b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	db0a      	blt.n	80014da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	490c      	ldr	r1, [pc, #48]	; (80014fc <__NVIC_SetPriority+0x4c>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	0112      	lsls	r2, r2, #4
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	440b      	add	r3, r1
 80014d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d8:	e00a      	b.n	80014f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4908      	ldr	r1, [pc, #32]	; (8001500 <__NVIC_SetPriority+0x50>)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	3b04      	subs	r3, #4
 80014e8:	0112      	lsls	r2, r2, #4
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	440b      	add	r3, r1
 80014ee:	761a      	strb	r2, [r3, #24]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000e100 	.word	0xe000e100
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	; 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f1c3 0307 	rsb	r3, r3, #7
 800151e:	2b04      	cmp	r3, #4
 8001520:	bf28      	it	cs
 8001522:	2304      	movcs	r3, #4
 8001524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3304      	adds	r3, #4
 800152a:	2b06      	cmp	r3, #6
 800152c:	d902      	bls.n	8001534 <NVIC_EncodePriority+0x30>
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3b03      	subs	r3, #3
 8001532:	e000      	b.n	8001536 <NVIC_EncodePriority+0x32>
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	f04f 32ff 	mov.w	r2, #4294967295
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43da      	mvns	r2, r3
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	401a      	ands	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800154c:	f04f 31ff 	mov.w	r1, #4294967295
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa01 f303 	lsl.w	r3, r1, r3
 8001556:	43d9      	mvns	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	4313      	orrs	r3, r2
         );
}
 800155e:	4618      	mov	r0, r3
 8001560:	3724      	adds	r7, #36	; 0x24
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001578:	d301      	bcc.n	800157e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157a:	2301      	movs	r3, #1
 800157c:	e00f      	b.n	800159e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157e:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <SysTick_Config+0x40>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001586:	210f      	movs	r1, #15
 8001588:	f04f 30ff 	mov.w	r0, #4294967295
 800158c:	f7ff ff90 	bl	80014b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <SysTick_Config+0x40>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001596:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <SysTick_Config+0x40>)
 8001598:	2207      	movs	r2, #7
 800159a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	e000e010 	.word	0xe000e010

080015ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ff2d 	bl	8001414 <__NVIC_SetPriorityGrouping>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d4:	f7ff ff42 	bl	800145c <__NVIC_GetPriorityGrouping>
 80015d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	6978      	ldr	r0, [r7, #20]
 80015e0:	f7ff ff90 	bl	8001504 <NVIC_EncodePriority>
 80015e4:	4602      	mov	r2, r0
 80015e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ea:	4611      	mov	r1, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff5f 	bl	80014b0 <__NVIC_SetPriority>
}
 80015f2:	bf00      	nop
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff35 	bl	8001478 <__NVIC_EnableIRQ>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff ffa2 	bl	8001568 <SysTick_Config>
 8001624:	4603      	mov	r3, r0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001630:	b480      	push	{r7}
 8001632:	b08b      	sub	sp, #44	; 0x2c
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001642:	e169      	b.n	8001918 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001644:	2201      	movs	r2, #1
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	69fa      	ldr	r2, [r7, #28]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	429a      	cmp	r2, r3
 800165e:	f040 8158 	bne.w	8001912 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4a9a      	ldr	r2, [pc, #616]	; (80018d0 <HAL_GPIO_Init+0x2a0>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d05e      	beq.n	800172a <HAL_GPIO_Init+0xfa>
 800166c:	4a98      	ldr	r2, [pc, #608]	; (80018d0 <HAL_GPIO_Init+0x2a0>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d875      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 8001672:	4a98      	ldr	r2, [pc, #608]	; (80018d4 <HAL_GPIO_Init+0x2a4>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d058      	beq.n	800172a <HAL_GPIO_Init+0xfa>
 8001678:	4a96      	ldr	r2, [pc, #600]	; (80018d4 <HAL_GPIO_Init+0x2a4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d86f      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 800167e:	4a96      	ldr	r2, [pc, #600]	; (80018d8 <HAL_GPIO_Init+0x2a8>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d052      	beq.n	800172a <HAL_GPIO_Init+0xfa>
 8001684:	4a94      	ldr	r2, [pc, #592]	; (80018d8 <HAL_GPIO_Init+0x2a8>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d869      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 800168a:	4a94      	ldr	r2, [pc, #592]	; (80018dc <HAL_GPIO_Init+0x2ac>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d04c      	beq.n	800172a <HAL_GPIO_Init+0xfa>
 8001690:	4a92      	ldr	r2, [pc, #584]	; (80018dc <HAL_GPIO_Init+0x2ac>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d863      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 8001696:	4a92      	ldr	r2, [pc, #584]	; (80018e0 <HAL_GPIO_Init+0x2b0>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d046      	beq.n	800172a <HAL_GPIO_Init+0xfa>
 800169c:	4a90      	ldr	r2, [pc, #576]	; (80018e0 <HAL_GPIO_Init+0x2b0>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d85d      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 80016a2:	2b12      	cmp	r3, #18
 80016a4:	d82a      	bhi.n	80016fc <HAL_GPIO_Init+0xcc>
 80016a6:	2b12      	cmp	r3, #18
 80016a8:	d859      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 80016aa:	a201      	add	r2, pc, #4	; (adr r2, 80016b0 <HAL_GPIO_Init+0x80>)
 80016ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b0:	0800172b 	.word	0x0800172b
 80016b4:	08001705 	.word	0x08001705
 80016b8:	08001717 	.word	0x08001717
 80016bc:	08001759 	.word	0x08001759
 80016c0:	0800175f 	.word	0x0800175f
 80016c4:	0800175f 	.word	0x0800175f
 80016c8:	0800175f 	.word	0x0800175f
 80016cc:	0800175f 	.word	0x0800175f
 80016d0:	0800175f 	.word	0x0800175f
 80016d4:	0800175f 	.word	0x0800175f
 80016d8:	0800175f 	.word	0x0800175f
 80016dc:	0800175f 	.word	0x0800175f
 80016e0:	0800175f 	.word	0x0800175f
 80016e4:	0800175f 	.word	0x0800175f
 80016e8:	0800175f 	.word	0x0800175f
 80016ec:	0800175f 	.word	0x0800175f
 80016f0:	0800175f 	.word	0x0800175f
 80016f4:	0800170d 	.word	0x0800170d
 80016f8:	08001721 	.word	0x08001721
 80016fc:	4a79      	ldr	r2, [pc, #484]	; (80018e4 <HAL_GPIO_Init+0x2b4>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d013      	beq.n	800172a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001702:	e02c      	b.n	800175e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	623b      	str	r3, [r7, #32]
          break;
 800170a:	e029      	b.n	8001760 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	3304      	adds	r3, #4
 8001712:	623b      	str	r3, [r7, #32]
          break;
 8001714:	e024      	b.n	8001760 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	3308      	adds	r3, #8
 800171c:	623b      	str	r3, [r7, #32]
          break;
 800171e:	e01f      	b.n	8001760 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	330c      	adds	r3, #12
 8001726:	623b      	str	r3, [r7, #32]
          break;
 8001728:	e01a      	b.n	8001760 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d102      	bne.n	8001738 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001732:	2304      	movs	r3, #4
 8001734:	623b      	str	r3, [r7, #32]
          break;
 8001736:	e013      	b.n	8001760 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d105      	bne.n	800174c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001740:	2308      	movs	r3, #8
 8001742:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69fa      	ldr	r2, [r7, #28]
 8001748:	611a      	str	r2, [r3, #16]
          break;
 800174a:	e009      	b.n	8001760 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800174c:	2308      	movs	r3, #8
 800174e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	615a      	str	r2, [r3, #20]
          break;
 8001756:	e003      	b.n	8001760 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001758:	2300      	movs	r3, #0
 800175a:	623b      	str	r3, [r7, #32]
          break;
 800175c:	e000      	b.n	8001760 <HAL_GPIO_Init+0x130>
          break;
 800175e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	2bff      	cmp	r3, #255	; 0xff
 8001764:	d801      	bhi.n	800176a <HAL_GPIO_Init+0x13a>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	e001      	b.n	800176e <HAL_GPIO_Init+0x13e>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3304      	adds	r3, #4
 800176e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	2bff      	cmp	r3, #255	; 0xff
 8001774:	d802      	bhi.n	800177c <HAL_GPIO_Init+0x14c>
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	e002      	b.n	8001782 <HAL_GPIO_Init+0x152>
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	3b08      	subs	r3, #8
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	210f      	movs	r1, #15
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	fa01 f303 	lsl.w	r3, r1, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	401a      	ands	r2, r3
 8001794:	6a39      	ldr	r1, [r7, #32]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	431a      	orrs	r2, r3
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 80b1 	beq.w	8001912 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017b0:	4b4d      	ldr	r3, [pc, #308]	; (80018e8 <HAL_GPIO_Init+0x2b8>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	4a4c      	ldr	r2, [pc, #304]	; (80018e8 <HAL_GPIO_Init+0x2b8>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6193      	str	r3, [r2, #24]
 80017bc:	4b4a      	ldr	r3, [pc, #296]	; (80018e8 <HAL_GPIO_Init+0x2b8>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017c8:	4a48      	ldr	r2, [pc, #288]	; (80018ec <HAL_GPIO_Init+0x2bc>)
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	089b      	lsrs	r3, r3, #2
 80017ce:	3302      	adds	r3, #2
 80017d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	220f      	movs	r2, #15
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	4013      	ands	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a40      	ldr	r2, [pc, #256]	; (80018f0 <HAL_GPIO_Init+0x2c0>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d013      	beq.n	800181c <HAL_GPIO_Init+0x1ec>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a3f      	ldr	r2, [pc, #252]	; (80018f4 <HAL_GPIO_Init+0x2c4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d00d      	beq.n	8001818 <HAL_GPIO_Init+0x1e8>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a3e      	ldr	r2, [pc, #248]	; (80018f8 <HAL_GPIO_Init+0x2c8>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d007      	beq.n	8001814 <HAL_GPIO_Init+0x1e4>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a3d      	ldr	r2, [pc, #244]	; (80018fc <HAL_GPIO_Init+0x2cc>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d101      	bne.n	8001810 <HAL_GPIO_Init+0x1e0>
 800180c:	2303      	movs	r3, #3
 800180e:	e006      	b.n	800181e <HAL_GPIO_Init+0x1ee>
 8001810:	2304      	movs	r3, #4
 8001812:	e004      	b.n	800181e <HAL_GPIO_Init+0x1ee>
 8001814:	2302      	movs	r3, #2
 8001816:	e002      	b.n	800181e <HAL_GPIO_Init+0x1ee>
 8001818:	2301      	movs	r3, #1
 800181a:	e000      	b.n	800181e <HAL_GPIO_Init+0x1ee>
 800181c:	2300      	movs	r3, #0
 800181e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001820:	f002 0203 	and.w	r2, r2, #3
 8001824:	0092      	lsls	r2, r2, #2
 8001826:	4093      	lsls	r3, r2
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	4313      	orrs	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800182e:	492f      	ldr	r1, [pc, #188]	; (80018ec <HAL_GPIO_Init+0x2bc>)
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	089b      	lsrs	r3, r3, #2
 8001834:	3302      	adds	r3, #2
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d006      	beq.n	8001856 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001848:	4b2d      	ldr	r3, [pc, #180]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	492c      	ldr	r1, [pc, #176]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	600b      	str	r3, [r1, #0]
 8001854:	e006      	b.n	8001864 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001856:	4b2a      	ldr	r3, [pc, #168]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	43db      	mvns	r3, r3
 800185e:	4928      	ldr	r1, [pc, #160]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 8001860:	4013      	ands	r3, r2
 8001862:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d006      	beq.n	800187e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001870:	4b23      	ldr	r3, [pc, #140]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	4922      	ldr	r1, [pc, #136]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	4313      	orrs	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
 800187c:	e006      	b.n	800188c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800187e:	4b20      	ldr	r3, [pc, #128]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	43db      	mvns	r3, r3
 8001886:	491e      	ldr	r1, [pc, #120]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 8001888:	4013      	ands	r3, r2
 800188a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d006      	beq.n	80018a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001898:	4b19      	ldr	r3, [pc, #100]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	4918      	ldr	r1, [pc, #96]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	608b      	str	r3, [r1, #8]
 80018a4:	e006      	b.n	80018b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018a6:	4b16      	ldr	r3, [pc, #88]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	4914      	ldr	r1, [pc, #80]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d021      	beq.n	8001904 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	490e      	ldr	r1, [pc, #56]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	60cb      	str	r3, [r1, #12]
 80018cc:	e021      	b.n	8001912 <HAL_GPIO_Init+0x2e2>
 80018ce:	bf00      	nop
 80018d0:	10320000 	.word	0x10320000
 80018d4:	10310000 	.word	0x10310000
 80018d8:	10220000 	.word	0x10220000
 80018dc:	10210000 	.word	0x10210000
 80018e0:	10120000 	.word	0x10120000
 80018e4:	10110000 	.word	0x10110000
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40010000 	.word	0x40010000
 80018f0:	40010800 	.word	0x40010800
 80018f4:	40010c00 	.word	0x40010c00
 80018f8:	40011000 	.word	0x40011000
 80018fc:	40011400 	.word	0x40011400
 8001900:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_GPIO_Init+0x304>)
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	43db      	mvns	r3, r3
 800190c:	4909      	ldr	r1, [pc, #36]	; (8001934 <HAL_GPIO_Init+0x304>)
 800190e:	4013      	ands	r3, r2
 8001910:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	3301      	adds	r3, #1
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	fa22 f303 	lsr.w	r3, r2, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	f47f ae8e 	bne.w	8001644 <HAL_GPIO_Init+0x14>
  }
}
 8001928:	bf00      	nop
 800192a:	bf00      	nop
 800192c:	372c      	adds	r7, #44	; 0x2c
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	40010400 	.word	0x40010400

08001938 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	887b      	ldrh	r3, [r7, #2]
 800194a:	4013      	ands	r3, r2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d002      	beq.n	8001956 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001950:	2301      	movs	r3, #1
 8001952:	73fb      	strb	r3, [r7, #15]
 8001954:	e001      	b.n	800195a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001956:	2300      	movs	r3, #0
 8001958:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800195a:	7bfb      	ldrb	r3, [r7, #15]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr

08001966 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	460b      	mov	r3, r1
 8001970:	807b      	strh	r3, [r7, #2]
 8001972:	4613      	mov	r3, r2
 8001974:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001976:	787b      	ldrb	r3, [r7, #1]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800197c:	887a      	ldrh	r2, [r7, #2]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001982:	e003      	b.n	800198c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001984:	887b      	ldrh	r3, [r7, #2]
 8001986:	041a      	lsls	r2, r3, #16
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	611a      	str	r2, [r3, #16]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr
	...

08001998 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e26c      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 8087 	beq.w	8001ac6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019b8:	4b92      	ldr	r3, [pc, #584]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 030c 	and.w	r3, r3, #12
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d00c      	beq.n	80019de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019c4:	4b8f      	ldr	r3, [pc, #572]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 030c 	and.w	r3, r3, #12
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d112      	bne.n	80019f6 <HAL_RCC_OscConfig+0x5e>
 80019d0:	4b8c      	ldr	r3, [pc, #560]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019dc:	d10b      	bne.n	80019f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019de:	4b89      	ldr	r3, [pc, #548]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d06c      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x12c>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d168      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e246      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_OscConfig+0x76>
 8001a00:	4b80      	ldr	r3, [pc, #512]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a7f      	ldr	r2, [pc, #508]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	e02e      	b.n	8001a6c <HAL_RCC_OscConfig+0xd4>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x98>
 8001a16:	4b7b      	ldr	r3, [pc, #492]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a7a      	ldr	r2, [pc, #488]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	4b78      	ldr	r3, [pc, #480]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a77      	ldr	r2, [pc, #476]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	e01d      	b.n	8001a6c <HAL_RCC_OscConfig+0xd4>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a38:	d10c      	bne.n	8001a54 <HAL_RCC_OscConfig+0xbc>
 8001a3a:	4b72      	ldr	r3, [pc, #456]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a71      	ldr	r2, [pc, #452]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	4b6f      	ldr	r3, [pc, #444]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a6e      	ldr	r2, [pc, #440]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	e00b      	b.n	8001a6c <HAL_RCC_OscConfig+0xd4>
 8001a54:	4b6b      	ldr	r3, [pc, #428]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a6a      	ldr	r2, [pc, #424]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	4b68      	ldr	r3, [pc, #416]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a67      	ldr	r2, [pc, #412]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d013      	beq.n	8001a9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff fcc4 	bl	8001400 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a7c:	f7ff fcc0 	bl	8001400 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b64      	cmp	r3, #100	; 0x64
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e1fa      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8e:	4b5d      	ldr	r3, [pc, #372]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0xe4>
 8001a9a:	e014      	b.n	8001ac6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9c:	f7ff fcb0 	bl	8001400 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa4:	f7ff fcac 	bl	8001400 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b64      	cmp	r3, #100	; 0x64
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e1e6      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab6:	4b53      	ldr	r3, [pc, #332]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x10c>
 8001ac2:	e000      	b.n	8001ac6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d063      	beq.n	8001b9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ad2:	4b4c      	ldr	r3, [pc, #304]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00b      	beq.n	8001af6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ade:	4b49      	ldr	r3, [pc, #292]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d11c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x18c>
 8001aea:	4b46      	ldr	r3, [pc, #280]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d116      	bne.n	8001b24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af6:	4b43      	ldr	r3, [pc, #268]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d005      	beq.n	8001b0e <HAL_RCC_OscConfig+0x176>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d001      	beq.n	8001b0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e1ba      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0e:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	4939      	ldr	r1, [pc, #228]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b22:	e03a      	b.n	8001b9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d020      	beq.n	8001b6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b2c:	4b36      	ldr	r3, [pc, #216]	; (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7ff fc65 	bl	8001400 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3a:	f7ff fc61 	bl	8001400 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e19b      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4c:	4b2d      	ldr	r3, [pc, #180]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b58:	4b2a      	ldr	r3, [pc, #168]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	4927      	ldr	r1, [pc, #156]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	600b      	str	r3, [r1, #0]
 8001b6c:	e015      	b.n	8001b9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b6e:	4b26      	ldr	r3, [pc, #152]	; (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b74:	f7ff fc44 	bl	8001400 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b7c:	f7ff fc40 	bl	8001400 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e17a      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8e:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f0      	bne.n	8001b7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d03a      	beq.n	8001c1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d019      	beq.n	8001be2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bae:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb4:	f7ff fc24 	bl	8001400 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bbc:	f7ff fc20 	bl	8001400 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e15a      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bce:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bda:	2001      	movs	r0, #1
 8001bdc:	f000 fad8 	bl	8002190 <RCC_Delay>
 8001be0:	e01c      	b.n	8001c1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be8:	f7ff fc0a 	bl	8001400 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bee:	e00f      	b.n	8001c10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf0:	f7ff fc06 	bl	8001400 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d908      	bls.n	8001c10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e140      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
 8001c02:	bf00      	nop
 8001c04:	40021000 	.word	0x40021000
 8001c08:	42420000 	.word	0x42420000
 8001c0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c10:	4b9e      	ldr	r3, [pc, #632]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1e9      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 80a6 	beq.w	8001d76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2e:	4b97      	ldr	r3, [pc, #604]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10d      	bne.n	8001c56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	4b94      	ldr	r3, [pc, #592]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	4a93      	ldr	r2, [pc, #588]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c44:	61d3      	str	r3, [r2, #28]
 8001c46:	4b91      	ldr	r3, [pc, #580]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c52:	2301      	movs	r3, #1
 8001c54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c56:	4b8e      	ldr	r3, [pc, #568]	; (8001e90 <HAL_RCC_OscConfig+0x4f8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d118      	bne.n	8001c94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c62:	4b8b      	ldr	r3, [pc, #556]	; (8001e90 <HAL_RCC_OscConfig+0x4f8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a8a      	ldr	r2, [pc, #552]	; (8001e90 <HAL_RCC_OscConfig+0x4f8>)
 8001c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c6e:	f7ff fbc7 	bl	8001400 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c76:	f7ff fbc3 	bl	8001400 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b64      	cmp	r3, #100	; 0x64
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e0fd      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c88:	4b81      	ldr	r3, [pc, #516]	; (8001e90 <HAL_RCC_OscConfig+0x4f8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d106      	bne.n	8001caa <HAL_RCC_OscConfig+0x312>
 8001c9c:	4b7b      	ldr	r3, [pc, #492]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	4a7a      	ldr	r2, [pc, #488]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6213      	str	r3, [r2, #32]
 8001ca8:	e02d      	b.n	8001d06 <HAL_RCC_OscConfig+0x36e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x334>
 8001cb2:	4b76      	ldr	r3, [pc, #472]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	4a75      	ldr	r2, [pc, #468]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001cb8:	f023 0301 	bic.w	r3, r3, #1
 8001cbc:	6213      	str	r3, [r2, #32]
 8001cbe:	4b73      	ldr	r3, [pc, #460]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4a72      	ldr	r2, [pc, #456]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	f023 0304 	bic.w	r3, r3, #4
 8001cc8:	6213      	str	r3, [r2, #32]
 8001cca:	e01c      	b.n	8001d06 <HAL_RCC_OscConfig+0x36e>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	2b05      	cmp	r3, #5
 8001cd2:	d10c      	bne.n	8001cee <HAL_RCC_OscConfig+0x356>
 8001cd4:	4b6d      	ldr	r3, [pc, #436]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	4a6c      	ldr	r2, [pc, #432]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001cda:	f043 0304 	orr.w	r3, r3, #4
 8001cde:	6213      	str	r3, [r2, #32]
 8001ce0:	4b6a      	ldr	r3, [pc, #424]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	4a69      	ldr	r2, [pc, #420]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	6213      	str	r3, [r2, #32]
 8001cec:	e00b      	b.n	8001d06 <HAL_RCC_OscConfig+0x36e>
 8001cee:	4b67      	ldr	r3, [pc, #412]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	4a66      	ldr	r2, [pc, #408]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001cf4:	f023 0301 	bic.w	r3, r3, #1
 8001cf8:	6213      	str	r3, [r2, #32]
 8001cfa:	4b64      	ldr	r3, [pc, #400]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	4a63      	ldr	r2, [pc, #396]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	f023 0304 	bic.w	r3, r3, #4
 8001d04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d015      	beq.n	8001d3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0e:	f7ff fb77 	bl	8001400 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d14:	e00a      	b.n	8001d2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d16:	f7ff fb73 	bl	8001400 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e0ab      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d2c:	4b57      	ldr	r3, [pc, #348]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0ee      	beq.n	8001d16 <HAL_RCC_OscConfig+0x37e>
 8001d38:	e014      	b.n	8001d64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3a:	f7ff fb61 	bl	8001400 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d40:	e00a      	b.n	8001d58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d42:	f7ff fb5d 	bl	8001400 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e095      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d58:	4b4c      	ldr	r3, [pc, #304]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1ee      	bne.n	8001d42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d64:	7dfb      	ldrb	r3, [r7, #23]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d105      	bne.n	8001d76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d6a:	4b48      	ldr	r3, [pc, #288]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	4a47      	ldr	r2, [pc, #284]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 8081 	beq.w	8001e82 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d80:	4b42      	ldr	r3, [pc, #264]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 030c 	and.w	r3, r3, #12
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d061      	beq.n	8001e50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d146      	bne.n	8001e22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d94:	4b3f      	ldr	r3, [pc, #252]	; (8001e94 <HAL_RCC_OscConfig+0x4fc>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9a:	f7ff fb31 	bl	8001400 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da2:	f7ff fb2d 	bl	8001400 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e067      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db4:	4b35      	ldr	r3, [pc, #212]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1f0      	bne.n	8001da2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc8:	d108      	bne.n	8001ddc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dca:	4b30      	ldr	r3, [pc, #192]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	492d      	ldr	r1, [pc, #180]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ddc:	4b2b      	ldr	r3, [pc, #172]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a19      	ldr	r1, [r3, #32]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	430b      	orrs	r3, r1
 8001dee:	4927      	ldr	r1, [pc, #156]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df4:	4b27      	ldr	r3, [pc, #156]	; (8001e94 <HAL_RCC_OscConfig+0x4fc>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfa:	f7ff fb01 	bl	8001400 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e02:	f7ff fafd 	bl	8001400 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e037      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e14:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x46a>
 8001e20:	e02f      	b.n	8001e82 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e22:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <HAL_RCC_OscConfig+0x4fc>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7ff faea 	bl	8001400 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e30:	f7ff fae6 	bl	8001400 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e020      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e42:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f0      	bne.n	8001e30 <HAL_RCC_OscConfig+0x498>
 8001e4e:	e018      	b.n	8001e82 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e013      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d106      	bne.n	8001e7e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d001      	beq.n	8001e82 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40007000 	.word	0x40007000
 8001e94:	42420060 	.word	0x42420060

08001e98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0d0      	b.n	800204e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001eac:	4b6a      	ldr	r3, [pc, #424]	; (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d910      	bls.n	8001edc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eba:	4b67      	ldr	r3, [pc, #412]	; (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 0207 	bic.w	r2, r3, #7
 8001ec2:	4965      	ldr	r1, [pc, #404]	; (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eca:	4b63      	ldr	r3, [pc, #396]	; (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d001      	beq.n	8001edc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0b8      	b.n	800204e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d020      	beq.n	8001f2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ef4:	4b59      	ldr	r3, [pc, #356]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	4a58      	ldr	r2, [pc, #352]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001efe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f0c:	4b53      	ldr	r3, [pc, #332]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	4a52      	ldr	r2, [pc, #328]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f18:	4b50      	ldr	r3, [pc, #320]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	494d      	ldr	r1, [pc, #308]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d040      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d107      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3e:	4b47      	ldr	r3, [pc, #284]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d115      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e07f      	b.n	800204e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d107      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f56:	4b41      	ldr	r3, [pc, #260]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d109      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e073      	b.n	800204e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f66:	4b3d      	ldr	r3, [pc, #244]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e06b      	b.n	800204e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f76:	4b39      	ldr	r3, [pc, #228]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f023 0203 	bic.w	r2, r3, #3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	4936      	ldr	r1, [pc, #216]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f88:	f7ff fa3a 	bl	8001400 <HAL_GetTick>
 8001f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8e:	e00a      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f90:	f7ff fa36 	bl	8001400 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e053      	b.n	800204e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa6:	4b2d      	ldr	r3, [pc, #180]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 020c 	and.w	r2, r3, #12
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d1eb      	bne.n	8001f90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb8:	4b27      	ldr	r3, [pc, #156]	; (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d210      	bcs.n	8001fe8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc6:	4b24      	ldr	r3, [pc, #144]	; (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 0207 	bic.w	r2, r3, #7
 8001fce:	4922      	ldr	r1, [pc, #136]	; (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd6:	4b20      	ldr	r3, [pc, #128]	; (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d001      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e032      	b.n	800204e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d008      	beq.n	8002006 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff4:	4b19      	ldr	r3, [pc, #100]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4916      	ldr	r1, [pc, #88]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	4313      	orrs	r3, r2
 8002004:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002012:	4b12      	ldr	r3, [pc, #72]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	490e      	ldr	r1, [pc, #56]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8002022:	4313      	orrs	r3, r2
 8002024:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002026:	f000 f821 	bl	800206c <HAL_RCC_GetSysClockFreq>
 800202a:	4602      	mov	r2, r0
 800202c:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	091b      	lsrs	r3, r3, #4
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	490a      	ldr	r1, [pc, #40]	; (8002060 <HAL_RCC_ClockConfig+0x1c8>)
 8002038:	5ccb      	ldrb	r3, [r1, r3]
 800203a:	fa22 f303 	lsr.w	r3, r2, r3
 800203e:	4a09      	ldr	r2, [pc, #36]	; (8002064 <HAL_RCC_ClockConfig+0x1cc>)
 8002040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_RCC_ClockConfig+0x1d0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff f998 	bl	800137c <HAL_InitTick>

  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40022000 	.word	0x40022000
 800205c:	40021000 	.word	0x40021000
 8002060:	08003124 	.word	0x08003124
 8002064:	2000012c 	.word	0x2000012c
 8002068:	20000130 	.word	0x20000130

0800206c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800206c:	b490      	push	{r4, r7}
 800206e:	b08a      	sub	sp, #40	; 0x28
 8002070:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002072:	4b2a      	ldr	r3, [pc, #168]	; (800211c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002074:	1d3c      	adds	r4, r7, #4
 8002076:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002078:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800207c:	f240 2301 	movw	r3, #513	; 0x201
 8002080:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	2300      	movs	r3, #0
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002092:	2300      	movs	r3, #0
 8002094:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002096:	4b22      	ldr	r3, [pc, #136]	; (8002120 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f003 030c 	and.w	r3, r3, #12
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d002      	beq.n	80020ac <HAL_RCC_GetSysClockFreq+0x40>
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d003      	beq.n	80020b2 <HAL_RCC_GetSysClockFreq+0x46>
 80020aa:	e02d      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020ac:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ae:	623b      	str	r3, [r7, #32]
      break;
 80020b0:	e02d      	b.n	800210e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	0c9b      	lsrs	r3, r3, #18
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020be:	4413      	add	r3, r2
 80020c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020c4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d013      	beq.n	80020f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	0c5b      	lsrs	r3, r3, #17
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020de:	4413      	add	r3, r2
 80020e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	4a0e      	ldr	r2, [pc, #56]	; (8002124 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ea:	fb02 f203 	mul.w	r2, r2, r3
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
 80020f6:	e004      	b.n	8002102 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	4a0b      	ldr	r2, [pc, #44]	; (8002128 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020fc:	fb02 f303 	mul.w	r3, r2, r3
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	623b      	str	r3, [r7, #32]
      break;
 8002106:	e002      	b.n	800210e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <HAL_RCC_GetSysClockFreq+0xb8>)
 800210a:	623b      	str	r3, [r7, #32]
      break;
 800210c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800210e:	6a3b      	ldr	r3, [r7, #32]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3728      	adds	r7, #40	; 0x28
 8002114:	46bd      	mov	sp, r7
 8002116:	bc90      	pop	{r4, r7}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	08003114 	.word	0x08003114
 8002120:	40021000 	.word	0x40021000
 8002124:	007a1200 	.word	0x007a1200
 8002128:	003d0900 	.word	0x003d0900

0800212c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002130:	4b02      	ldr	r3, [pc, #8]	; (800213c <HAL_RCC_GetHCLKFreq+0x10>)
 8002132:	681b      	ldr	r3, [r3, #0]
}
 8002134:	4618      	mov	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr
 800213c:	2000012c 	.word	0x2000012c

08002140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002144:	f7ff fff2 	bl	800212c <HAL_RCC_GetHCLKFreq>
 8002148:	4602      	mov	r2, r0
 800214a:	4b05      	ldr	r3, [pc, #20]	; (8002160 <HAL_RCC_GetPCLK1Freq+0x20>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	0a1b      	lsrs	r3, r3, #8
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	4903      	ldr	r1, [pc, #12]	; (8002164 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002156:	5ccb      	ldrb	r3, [r1, r3]
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800215c:	4618      	mov	r0, r3
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	08003134 	.word	0x08003134

08002168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800216c:	f7ff ffde 	bl	800212c <HAL_RCC_GetHCLKFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	0adb      	lsrs	r3, r3, #11
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	4903      	ldr	r1, [pc, #12]	; (800218c <HAL_RCC_GetPCLK2Freq+0x24>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002184:	4618      	mov	r0, r3
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40021000 	.word	0x40021000
 800218c:	08003134 	.word	0x08003134

08002190 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002198:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <RCC_Delay+0x34>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <RCC_Delay+0x38>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	0a5b      	lsrs	r3, r3, #9
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021ac:	bf00      	nop
  }
  while (Delay --);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1e5a      	subs	r2, r3, #1
 80021b2:	60fa      	str	r2, [r7, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1f9      	bne.n	80021ac <RCC_Delay+0x1c>
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr
 80021c4:	2000012c 	.word	0x2000012c
 80021c8:	10624dd3 	.word	0x10624dd3

080021cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e041      	b.n	8002262 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d106      	bne.n	80021f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7fe ff90 	bl	8001118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3304      	adds	r3, #4
 8002208:	4619      	mov	r1, r3
 800220a:	4610      	mov	r0, r2
 800220c:	f000 fb7e 	bl	800290c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b01      	cmp	r3, #1
 800227e:	d001      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e03a      	b.n	80022fa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0201 	orr.w	r2, r2, #1
 800229a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a18      	ldr	r2, [pc, #96]	; (8002304 <HAL_TIM_Base_Start_IT+0x98>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00e      	beq.n	80022c4 <HAL_TIM_Base_Start_IT+0x58>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ae:	d009      	beq.n	80022c4 <HAL_TIM_Base_Start_IT+0x58>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a14      	ldr	r2, [pc, #80]	; (8002308 <HAL_TIM_Base_Start_IT+0x9c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d004      	beq.n	80022c4 <HAL_TIM_Base_Start_IT+0x58>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a13      	ldr	r2, [pc, #76]	; (800230c <HAL_TIM_Base_Start_IT+0xa0>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d111      	bne.n	80022e8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2b06      	cmp	r3, #6
 80022d4:	d010      	beq.n	80022f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f042 0201 	orr.w	r2, r2, #1
 80022e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e6:	e007      	b.n	80022f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	40012c00 	.word	0x40012c00
 8002308:	40000400 	.word	0x40000400
 800230c:	40000800 	.word	0x40000800

08002310 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e041      	b.n	80023a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d106      	bne.n	800233c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7fe ff12 	bl	8001160 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3304      	adds	r3, #4
 800234c:	4619      	mov	r1, r3
 800234e:	4610      	mov	r0, r2
 8002350:	f000 fadc 	bl	800290c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d122      	bne.n	800240a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d11b      	bne.n	800240a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f06f 0202 	mvn.w	r2, #2
 80023da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 fa70 	bl	80028d6 <HAL_TIM_IC_CaptureCallback>
 80023f6:	e005      	b.n	8002404 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fa63 	bl	80028c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fa72 	bl	80028e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b04      	cmp	r3, #4
 8002416:	d122      	bne.n	800245e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	2b04      	cmp	r3, #4
 8002424:	d11b      	bne.n	800245e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f06f 0204 	mvn.w	r2, #4
 800242e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 fa46 	bl	80028d6 <HAL_TIM_IC_CaptureCallback>
 800244a:	e005      	b.n	8002458 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 fa39 	bl	80028c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 fa48 	bl	80028e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b08      	cmp	r3, #8
 800246a:	d122      	bne.n	80024b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b08      	cmp	r3, #8
 8002478:	d11b      	bne.n	80024b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f06f 0208 	mvn.w	r2, #8
 8002482:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2204      	movs	r2, #4
 8002488:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 fa1c 	bl	80028d6 <HAL_TIM_IC_CaptureCallback>
 800249e:	e005      	b.n	80024ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 fa0f 	bl	80028c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fa1e 	bl	80028e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b10      	cmp	r3, #16
 80024be:	d122      	bne.n	8002506 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b10      	cmp	r3, #16
 80024cc:	d11b      	bne.n	8002506 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f06f 0210 	mvn.w	r2, #16
 80024d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2208      	movs	r2, #8
 80024dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f9f2 	bl	80028d6 <HAL_TIM_IC_CaptureCallback>
 80024f2:	e005      	b.n	8002500 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f9e5 	bl	80028c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f9f4 	bl	80028e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b01      	cmp	r3, #1
 8002512:	d10e      	bne.n	8002532 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b01      	cmp	r3, #1
 8002520:	d107      	bne.n	8002532 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f06f 0201 	mvn.w	r2, #1
 800252a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7fe fc71 	bl	8000e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253c:	2b80      	cmp	r3, #128	; 0x80
 800253e:	d10e      	bne.n	800255e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254a:	2b80      	cmp	r3, #128	; 0x80
 800254c:	d107      	bne.n	800255e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 fcbe 	bl	8002eda <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002568:	2b40      	cmp	r3, #64	; 0x40
 800256a:	d10e      	bne.n	800258a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002576:	2b40      	cmp	r3, #64	; 0x40
 8002578:	d107      	bne.n	800258a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f9b8 	bl	80028fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	f003 0320 	and.w	r3, r3, #32
 8002594:	2b20      	cmp	r3, #32
 8002596:	d10e      	bne.n	80025b6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f003 0320 	and.w	r3, r3, #32
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	d107      	bne.n	80025b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f06f 0220 	mvn.w	r2, #32
 80025ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 fc89 	bl	8002ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_TIM_PWM_ConfigChannel+0x1a>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e0ac      	b.n	8002734 <HAL_TIM_PWM_ConfigChannel+0x174>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b0c      	cmp	r3, #12
 80025e6:	f200 809f 	bhi.w	8002728 <HAL_TIM_PWM_ConfigChannel+0x168>
 80025ea:	a201      	add	r2, pc, #4	; (adr r2, 80025f0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80025ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f0:	08002625 	.word	0x08002625
 80025f4:	08002729 	.word	0x08002729
 80025f8:	08002729 	.word	0x08002729
 80025fc:	08002729 	.word	0x08002729
 8002600:	08002665 	.word	0x08002665
 8002604:	08002729 	.word	0x08002729
 8002608:	08002729 	.word	0x08002729
 800260c:	08002729 	.word	0x08002729
 8002610:	080026a7 	.word	0x080026a7
 8002614:	08002729 	.word	0x08002729
 8002618:	08002729 	.word	0x08002729
 800261c:	08002729 	.word	0x08002729
 8002620:	080026e7 	.word	0x080026e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	4618      	mov	r0, r3
 800262c:	f000 f9d0 	bl	80029d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699a      	ldr	r2, [r3, #24]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0208 	orr.w	r2, r2, #8
 800263e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699a      	ldr	r2, [r3, #24]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0204 	bic.w	r2, r2, #4
 800264e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6999      	ldr	r1, [r3, #24]
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	619a      	str	r2, [r3, #24]
      break;
 8002662:	e062      	b.n	800272a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68b9      	ldr	r1, [r7, #8]
 800266a:	4618      	mov	r0, r3
 800266c:	f000 fa16 	bl	8002a9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699a      	ldr	r2, [r3, #24]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800267e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699a      	ldr	r2, [r3, #24]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800268e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6999      	ldr	r1, [r3, #24]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	021a      	lsls	r2, r3, #8
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	619a      	str	r2, [r3, #24]
      break;
 80026a4:	e041      	b.n	800272a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68b9      	ldr	r1, [r7, #8]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 fa5f 	bl	8002b70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	69da      	ldr	r2, [r3, #28]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f042 0208 	orr.w	r2, r2, #8
 80026c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69da      	ldr	r2, [r3, #28]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0204 	bic.w	r2, r2, #4
 80026d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	69d9      	ldr	r1, [r3, #28]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	61da      	str	r2, [r3, #28]
      break;
 80026e4:	e021      	b.n	800272a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68b9      	ldr	r1, [r7, #8]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 faa9 	bl	8002c44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	69da      	ldr	r2, [r3, #28]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	69da      	ldr	r2, [r3, #28]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	69d9      	ldr	r1, [r3, #28]
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	021a      	lsls	r2, r3, #8
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	61da      	str	r2, [r3, #28]
      break;
 8002726:	e000      	b.n	800272a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002728:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_TIM_ConfigClockSource+0x18>
 8002750:	2302      	movs	r3, #2
 8002752:	e0b3      	b.n	80028bc <HAL_TIM_ConfigClockSource+0x180>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002772:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800277a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800278c:	d03e      	beq.n	800280c <HAL_TIM_ConfigClockSource+0xd0>
 800278e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002792:	f200 8087 	bhi.w	80028a4 <HAL_TIM_ConfigClockSource+0x168>
 8002796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800279a:	f000 8085 	beq.w	80028a8 <HAL_TIM_ConfigClockSource+0x16c>
 800279e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a2:	d87f      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x168>
 80027a4:	2b70      	cmp	r3, #112	; 0x70
 80027a6:	d01a      	beq.n	80027de <HAL_TIM_ConfigClockSource+0xa2>
 80027a8:	2b70      	cmp	r3, #112	; 0x70
 80027aa:	d87b      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x168>
 80027ac:	2b60      	cmp	r3, #96	; 0x60
 80027ae:	d050      	beq.n	8002852 <HAL_TIM_ConfigClockSource+0x116>
 80027b0:	2b60      	cmp	r3, #96	; 0x60
 80027b2:	d877      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x168>
 80027b4:	2b50      	cmp	r3, #80	; 0x50
 80027b6:	d03c      	beq.n	8002832 <HAL_TIM_ConfigClockSource+0xf6>
 80027b8:	2b50      	cmp	r3, #80	; 0x50
 80027ba:	d873      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x168>
 80027bc:	2b40      	cmp	r3, #64	; 0x40
 80027be:	d058      	beq.n	8002872 <HAL_TIM_ConfigClockSource+0x136>
 80027c0:	2b40      	cmp	r3, #64	; 0x40
 80027c2:	d86f      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x168>
 80027c4:	2b30      	cmp	r3, #48	; 0x30
 80027c6:	d064      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0x156>
 80027c8:	2b30      	cmp	r3, #48	; 0x30
 80027ca:	d86b      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x168>
 80027cc:	2b20      	cmp	r3, #32
 80027ce:	d060      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0x156>
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d867      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x168>
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d05c      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0x156>
 80027d8:	2b10      	cmp	r3, #16
 80027da:	d05a      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80027dc:	e062      	b.n	80028a4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6818      	ldr	r0, [r3, #0]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	6899      	ldr	r1, [r3, #8]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f000 faee 	bl	8002dce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002800:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	609a      	str	r2, [r3, #8]
      break;
 800280a:	e04e      	b.n	80028aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6818      	ldr	r0, [r3, #0]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	6899      	ldr	r1, [r3, #8]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f000 fad7 	bl	8002dce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800282e:	609a      	str	r2, [r3, #8]
      break;
 8002830:	e03b      	b.n	80028aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6818      	ldr	r0, [r3, #0]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	6859      	ldr	r1, [r3, #4]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	461a      	mov	r2, r3
 8002840:	f000 fa4e 	bl	8002ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2150      	movs	r1, #80	; 0x50
 800284a:	4618      	mov	r0, r3
 800284c:	f000 faa5 	bl	8002d9a <TIM_ITRx_SetConfig>
      break;
 8002850:	e02b      	b.n	80028aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	6859      	ldr	r1, [r3, #4]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	461a      	mov	r2, r3
 8002860:	f000 fa6c 	bl	8002d3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2160      	movs	r1, #96	; 0x60
 800286a:	4618      	mov	r0, r3
 800286c:	f000 fa95 	bl	8002d9a <TIM_ITRx_SetConfig>
      break;
 8002870:	e01b      	b.n	80028aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	6859      	ldr	r1, [r3, #4]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	461a      	mov	r2, r3
 8002880:	f000 fa2e 	bl	8002ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2140      	movs	r1, #64	; 0x40
 800288a:	4618      	mov	r0, r3
 800288c:	f000 fa85 	bl	8002d9a <TIM_ITRx_SetConfig>
      break;
 8002890:	e00b      	b.n	80028aa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4619      	mov	r1, r3
 800289c:	4610      	mov	r0, r2
 800289e:	f000 fa7c 	bl	8002d9a <TIM_ITRx_SetConfig>
        break;
 80028a2:	e002      	b.n	80028aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028a4:	bf00      	nop
 80028a6:	e000      	b.n	80028aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr

080028d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr

080028fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a29      	ldr	r2, [pc, #164]	; (80029c4 <TIM_Base_SetConfig+0xb8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d00b      	beq.n	800293c <TIM_Base_SetConfig+0x30>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800292a:	d007      	beq.n	800293c <TIM_Base_SetConfig+0x30>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a26      	ldr	r2, [pc, #152]	; (80029c8 <TIM_Base_SetConfig+0xbc>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d003      	beq.n	800293c <TIM_Base_SetConfig+0x30>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a25      	ldr	r2, [pc, #148]	; (80029cc <TIM_Base_SetConfig+0xc0>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d108      	bne.n	800294e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	4313      	orrs	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a1c      	ldr	r2, [pc, #112]	; (80029c4 <TIM_Base_SetConfig+0xb8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00b      	beq.n	800296e <TIM_Base_SetConfig+0x62>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295c:	d007      	beq.n	800296e <TIM_Base_SetConfig+0x62>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a19      	ldr	r2, [pc, #100]	; (80029c8 <TIM_Base_SetConfig+0xbc>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d003      	beq.n	800296e <TIM_Base_SetConfig+0x62>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a18      	ldr	r2, [pc, #96]	; (80029cc <TIM_Base_SetConfig+0xc0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d108      	bne.n	8002980 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a07      	ldr	r2, [pc, #28]	; (80029c4 <TIM_Base_SetConfig+0xb8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d103      	bne.n	80029b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	615a      	str	r2, [r3, #20]
}
 80029ba:	bf00      	nop
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr
 80029c4:	40012c00 	.word	0x40012c00
 80029c8:	40000400 	.word	0x40000400
 80029cc:	40000800 	.word	0x40000800

080029d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b087      	sub	sp, #28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	f023 0201 	bic.w	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f023 0303 	bic.w	r3, r3, #3
 8002a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f023 0302 	bic.w	r3, r3, #2
 8002a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a1c      	ldr	r2, [pc, #112]	; (8002a98 <TIM_OC1_SetConfig+0xc8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d10c      	bne.n	8002a46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f023 0308 	bic.w	r3, r3, #8
 8002a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f023 0304 	bic.w	r3, r3, #4
 8002a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a13      	ldr	r2, [pc, #76]	; (8002a98 <TIM_OC1_SetConfig+0xc8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d111      	bne.n	8002a72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	621a      	str	r2, [r3, #32]
}
 8002a8c:	bf00      	nop
 8002a8e:	371c      	adds	r7, #28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40012c00 	.word	0x40012c00

08002a9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	f023 0210 	bic.w	r2, r3, #16
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	021b      	lsls	r3, r3, #8
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f023 0320 	bic.w	r3, r3, #32
 8002ae6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a1d      	ldr	r2, [pc, #116]	; (8002b6c <TIM_OC2_SetConfig+0xd0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d10d      	bne.n	8002b18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a14      	ldr	r2, [pc, #80]	; (8002b6c <TIM_OC2_SetConfig+0xd0>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d113      	bne.n	8002b48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	621a      	str	r2, [r3, #32]
}
 8002b62:	bf00      	nop
 8002b64:	371c      	adds	r7, #28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr
 8002b6c:	40012c00 	.word	0x40012c00

08002b70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f023 0303 	bic.w	r3, r3, #3
 8002ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a1d      	ldr	r2, [pc, #116]	; (8002c40 <TIM_OC3_SetConfig+0xd0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d10d      	bne.n	8002bea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	021b      	lsls	r3, r3, #8
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a14      	ldr	r2, [pc, #80]	; (8002c40 <TIM_OC3_SetConfig+0xd0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d113      	bne.n	8002c1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	621a      	str	r2, [r3, #32]
}
 8002c34:	bf00      	nop
 8002c36:	371c      	adds	r7, #28
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40012c00 	.word	0x40012c00

08002c44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	021b      	lsls	r3, r3, #8
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	031b      	lsls	r3, r3, #12
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a0f      	ldr	r2, [pc, #60]	; (8002cdc <TIM_OC4_SetConfig+0x98>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d109      	bne.n	8002cb8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002caa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	019b      	lsls	r3, r3, #6
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	621a      	str	r2, [r3, #32]
}
 8002cd2:	bf00      	nop
 8002cd4:	371c      	adds	r7, #28
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr
 8002cdc:	40012c00 	.word	0x40012c00

08002ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b087      	sub	sp, #28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	f023 0201 	bic.w	r2, r3, #1
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f023 030a 	bic.w	r3, r3, #10
 8002d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	621a      	str	r2, [r3, #32]
}
 8002d32:	bf00      	nop
 8002d34:	371c      	adds	r7, #28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	f023 0210 	bic.w	r2, r3, #16
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	031b      	lsls	r3, r3, #12
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	621a      	str	r2, [r3, #32]
}
 8002d90:	bf00      	nop
 8002d92:	371c      	adds	r7, #28
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr

08002d9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b085      	sub	sp, #20
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f043 0307 	orr.w	r3, r3, #7
 8002dbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	609a      	str	r2, [r3, #8]
}
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr

08002dce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b087      	sub	sp, #28
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
 8002dda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002de8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	021a      	lsls	r2, r3, #8
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	431a      	orrs	r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	609a      	str	r2, [r3, #8]
}
 8002e02:	bf00      	nop
 8002e04:	371c      	adds	r7, #28
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e046      	b.n	8002eb2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a16      	ldr	r2, [pc, #88]	; (8002ebc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d00e      	beq.n	8002e86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e70:	d009      	beq.n	8002e86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a12      	ldr	r2, [pc, #72]	; (8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d004      	beq.n	8002e86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a10      	ldr	r2, [pc, #64]	; (8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d10c      	bne.n	8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr
 8002ebc:	40012c00 	.word	0x40012c00
 8002ec0:	40000400 	.word	0x40000400
 8002ec4:	40000800 	.word	0x40000800

08002ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr

08002eda <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e03f      	b.n	8002f7e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7fe f974 	bl	8001200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2224      	movs	r2, #36	; 0x24
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f829 	bl	8002f88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695a      	ldr	r2, [r3, #20]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002fc2:	f023 030c 	bic.w	r3, r3, #12
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6812      	ldr	r2, [r2, #0]
 8002fca:	68b9      	ldr	r1, [r7, #8]
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699a      	ldr	r2, [r3, #24]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a2c      	ldr	r2, [pc, #176]	; (800309c <UART_SetConfig+0x114>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d103      	bne.n	8002ff8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ff0:	f7ff f8ba 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	e002      	b.n	8002ffe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ff8:	f7ff f8a2 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 8002ffc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	009a      	lsls	r2, r3, #2
 8003008:	441a      	add	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	fbb2 f3f3 	udiv	r3, r2, r3
 8003014:	4a22      	ldr	r2, [pc, #136]	; (80030a0 <UART_SetConfig+0x118>)
 8003016:	fba2 2303 	umull	r2, r3, r2, r3
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	0119      	lsls	r1, r3, #4
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	009a      	lsls	r2, r3, #2
 8003028:	441a      	add	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	fbb2 f2f3 	udiv	r2, r2, r3
 8003034:	4b1a      	ldr	r3, [pc, #104]	; (80030a0 <UART_SetConfig+0x118>)
 8003036:	fba3 0302 	umull	r0, r3, r3, r2
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	2064      	movs	r0, #100	; 0x64
 800303e:	fb00 f303 	mul.w	r3, r0, r3
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	3332      	adds	r3, #50	; 0x32
 8003048:	4a15      	ldr	r2, [pc, #84]	; (80030a0 <UART_SetConfig+0x118>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003054:	4419      	add	r1, r3
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	009a      	lsls	r2, r3, #2
 8003060:	441a      	add	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	fbb2 f2f3 	udiv	r2, r2, r3
 800306c:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <UART_SetConfig+0x118>)
 800306e:	fba3 0302 	umull	r0, r3, r3, r2
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	2064      	movs	r0, #100	; 0x64
 8003076:	fb00 f303 	mul.w	r3, r0, r3
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	3332      	adds	r3, #50	; 0x32
 8003080:	4a07      	ldr	r2, [pc, #28]	; (80030a0 <UART_SetConfig+0x118>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	f003 020f 	and.w	r2, r3, #15
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	440a      	add	r2, r1
 8003092:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003094:	bf00      	nop
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40013800 	.word	0x40013800
 80030a0:	51eb851f 	.word	0x51eb851f

080030a4 <__libc_init_array>:
 80030a4:	b570      	push	{r4, r5, r6, lr}
 80030a6:	2600      	movs	r6, #0
 80030a8:	4d0c      	ldr	r5, [pc, #48]	; (80030dc <__libc_init_array+0x38>)
 80030aa:	4c0d      	ldr	r4, [pc, #52]	; (80030e0 <__libc_init_array+0x3c>)
 80030ac:	1b64      	subs	r4, r4, r5
 80030ae:	10a4      	asrs	r4, r4, #2
 80030b0:	42a6      	cmp	r6, r4
 80030b2:	d109      	bne.n	80030c8 <__libc_init_array+0x24>
 80030b4:	f000 f822 	bl	80030fc <_init>
 80030b8:	2600      	movs	r6, #0
 80030ba:	4d0a      	ldr	r5, [pc, #40]	; (80030e4 <__libc_init_array+0x40>)
 80030bc:	4c0a      	ldr	r4, [pc, #40]	; (80030e8 <__libc_init_array+0x44>)
 80030be:	1b64      	subs	r4, r4, r5
 80030c0:	10a4      	asrs	r4, r4, #2
 80030c2:	42a6      	cmp	r6, r4
 80030c4:	d105      	bne.n	80030d2 <__libc_init_array+0x2e>
 80030c6:	bd70      	pop	{r4, r5, r6, pc}
 80030c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030cc:	4798      	blx	r3
 80030ce:	3601      	adds	r6, #1
 80030d0:	e7ee      	b.n	80030b0 <__libc_init_array+0xc>
 80030d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d6:	4798      	blx	r3
 80030d8:	3601      	adds	r6, #1
 80030da:	e7f2      	b.n	80030c2 <__libc_init_array+0x1e>
 80030dc:	0800313c 	.word	0x0800313c
 80030e0:	0800313c 	.word	0x0800313c
 80030e4:	0800313c 	.word	0x0800313c
 80030e8:	08003140 	.word	0x08003140

080030ec <memset>:
 80030ec:	4603      	mov	r3, r0
 80030ee:	4402      	add	r2, r0
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d100      	bne.n	80030f6 <memset+0xa>
 80030f4:	4770      	bx	lr
 80030f6:	f803 1b01 	strb.w	r1, [r3], #1
 80030fa:	e7f9      	b.n	80030f0 <memset+0x4>

080030fc <_init>:
 80030fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fe:	bf00      	nop
 8003100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003102:	bc08      	pop	{r3}
 8003104:	469e      	mov	lr, r3
 8003106:	4770      	bx	lr

08003108 <_fini>:
 8003108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310a:	bf00      	nop
 800310c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310e:	bc08      	pop	{r3}
 8003110:	469e      	mov	lr, r3
 8003112:	4770      	bx	lr
